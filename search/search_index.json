{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"AI-Assisted Graph Algorithms","text":"<p>Welcome to our new AI-assisted graph algorithms course.  In this course, we will use AI to help us learn about the various algorithms that are used to solve business problems using graph networks.  We also discuss how machine learning and graph embeddings are used to complement deterministic graph algorithms.</p> <p>This course leverages generative AI to create interactive simulations of how these algorithms work.  We give you sample prompts and code templates to allow you to use generative AI  to quickly customize our animations, even if you are not familiar with the graph animation libraries.</p> <p>All content in this course is licensed under Creative Commons (CC BY-NC-SA 4.0 DEED).  You may use and customize this content in your courses but you are not permitted to resell this content. Attribution is always appreciated.</p> <p>Please let us know if you have any suggestions for improving this course.</p> <p>Dan McCreary on LinkedIn</p>"},{"location":"about/","title":"About the Graph Algorithms Book","text":"<p>How important are graph algorithms? Could a single graph algorithm really be worth $350 million?  Yes, it can!</p> <p>When Larry Page was a student at Stanford he created the PageRank algorithm for predicting how high a page should be ranked in a search result.  The patent, which was owned by Stanford was licensed to Google for stock.  When Google went public the stock was valued at $350 million!</p> <p>This story is just one example of why graph algorithms are relevant to modeling the world around us.  In the graph community, we have the expression \"graphs are everywhere.\"  This statement reflects the fact that graph data models, particularly the labeled property graph model.</p>"},{"location":"about/#focus-on-interactive-simulations","title":"Focus on Interactive Simulations","text":"<p>The reason this book was created was to address the lack of an easy-to-customize interactive website on graph algorithms that includes modern work on graph machine learning.  Our goal is to allow anyone who wants to teach graph algorithms the ability to use this content for their courses.</p> <p>Our focus is not to just describe the algorithms with descriptive text but to allow students to have fine-grain control of animations of the algorithms in action.  In the past, this would be too expensive to create and maintain these animations.  However, with the assistance of generative AI tools, these animations are easy to create, easy to customize and easy to maintain.</p>"},{"location":"about/#acknowledgments","title":"Acknowledgments","text":"<p>I want to thank my colleagues, Arun Batchu(https://www.linkedin.com/in/arunbatchu/), Parker Erickson and Jon Herke for their encouragement in the creation of this website.</p> <p>Much of the work on building small simulations and animations (MicroSims) were created by Val Lockhart and Troy Peterson.  Our work leverages their innovations and we are grateful for their work.</p> <p>I also want to acknowledge all the people who contributed to open-source libraries such as p5.js, vis.js and  the D3 Network Graph.  This website would not be possible without these tools.</p>"},{"location":"contact/","title":"Contact","text":"<p>Please contact me on LinkedIn</p> <p>Thanks! - Dan</p>"},{"location":"course-description/","title":"Graph Algorithms Course Description","text":"<p>Course Title: Learning Graph Algorithms with AI</p>"},{"location":"course-description/#course-description","title":"Course Description","text":"<p>This 10-week course is designed for college students eager to learn how graph algorithms can be applied to solve real-world business problems. A distinctive feature of this course is its integration of generative AI tools, enabling students to generate code, create visualizations, and experiment with algorithms in real time.</p>"},{"location":"course-description/#prerequisites","title":"Prerequisites","text":"<p>Students should have a foundational understanding of data structures and databases. Access to a web browser and a software development environment capable of running Python code is required. While familiarity with Python and JavaScript is beneficial, it is not mandatory.</p>"},{"location":"course-description/#course-objectives","title":"Course Objectives","text":"<p>By the end of this course, students will be able to:</p> <ol> <li>Remember: Define key graph components (nodes, edges, properties) and basic graph types (e.g., directed, undirected, acyclic, concept graphs).</li> <li>Understand: Explain and compare the RDF and LPG data models, discussing their relative strengths and weaknesses.</li> <li>Apply: Use generative AI tools to generate graph data and algorithms for real-world business scenarios.</li> <li>Analyze: Distinguish between various types of graph algorithms (e.g., depth-first search, clustering, page rank, similarity, centrality), and identify their use cases.</li> <li>Evaluate: Assess the suitability of different graph algorithms for specific business problems and justify algorithm choices.</li> <li>Create: Develop and refine custom graph algorithms using browser-based libraries like D3.js and vis.js, incorporating generative AI for assistance.</li> </ol>"},{"location":"course-description/#additional-skills","title":"Additional Skills:","text":"<ul> <li>Utilize generative AI prompts to accelerate learning and enhance algorithm creation.</li> <li>Visualize complex graphs in web environments for better comprehension and presentation.</li> </ul>"},{"location":"glossary/","title":"Glossary of Terms for Graph Algorithms Course","text":""},{"location":"glossary/#a-search-algorithm","title":"A* Search Algorithm","text":"<p>An algorithm that finds the shortest path from a start node to a target node in a weighted graph. It uses heuristics to optimize the search process. Example: GPS navigation systems use A* to find the shortest route.</p>"},{"location":"glossary/#anomaly-detection","title":"Anomaly Detection","text":"<p>The identification of items, events, or observations in data that do not conform to an expected pattern. In graph terms, this often involves identifying unusual subgraphs or patterns. Example: Detecting unusual patterns in financial transactions which may indicate fraudulent activity.</p>"},{"location":"glossary/#attention-mechanisms-in-graphs","title":"Attention Mechanisms in Graphs","text":"<p>Incorporation of attention mechanisms in graph neural networks, allowing the model to focus on important parts of the graph while making predictions. Example: Improving performance in document classification tasks where documents are represented as word co-occurrence graphs.#### Behavioral Analytics</p> <p>The use of data about people's behavior to understand intent and predict future actions. In graph analysis, this involves studying how individuals interact within a network. Example: Analyzing customer transaction patterns to identify potential cases of money laundering.</p>"},{"location":"glossary/#bellman-ford-algorithm","title":"Bellman-Ford Algorithm","text":"<p>An algorithm that computes shortest paths from a single source vertex to all other vertices in a weighted graph. It can handle negative weight edges. Example: Used in network routing protocols.</p>"},{"location":"glossary/#big-o-notation","title":"Big-O Notation","text":"<p>A mathematical notation that describes the limiting behavior of a function when the argument tends towards a particular value or infinity. It is a critical concept in analyzing the performance and scalability of algorithms. Example: Describing the time complexity of graph algorithms, like O(n^2) for certain implementations of Dijkstra's algorithm.</p>"},{"location":"glossary/#breadth-first-search-bfs","title":"Breadth-First Search (BFS)","text":"<p>An algorithm for traversing or searching tree or graph data structures. It starts at a selected node and explores all neighbor nodes at the present depth before moving to nodes at the next depth level. Example: Used in social networking applications to find people within a certain number of degrees of separation.</p>"},{"location":"glossary/#centrality-measures","title":"Centrality Measures","text":"<p>Metrics used in network analysis to determine the importance or influence of a particular node within a graph. Common measures include degree centrality, closeness centrality, betweenness centrality, and eigenvector centrality. Example: Identifying key influencers in a social network.</p>"},{"location":"glossary/#churn-prediction","title":"Churn Prediction","text":"<p>The process of identifying signals that indicate a customer is likely to stop using a service. Graph analysis can help in identifying patterns that precede customer churn. Example: Analyzing customer interaction networks to predict which customers are at risk of churning.</p>"},{"location":"glossary/#cluster","title":"Cluster","text":"<p>A single node that represents a group of multiple nodes and their connecting edges that have been merged together based on specific criteria or attributes. Clustering is a technique used to simplify complex network graphs by reducing visual clutter, enhancing readability, and improving performance when dealing with large datasets.</p>"},{"location":"glossary/#clustering-coefficient","title":"Clustering Coefficient","text":"<p>A measure of the degree to which nodes in a graph tend to cluster together. High clustering coefficients indicate a tendency of nodes to form tightly knit groups. Example: Used in market analysis to identify communities or segments within customer networks.</p>"},{"location":"glossary/#cohort-analysis","title":"Cohort Analysis","text":"<p>A type of behavioral analytics that takes the data from a given dataset (like an e-commerce platform) and rather than looking at all users as one unit, it breaks them into related groups for analysis. Graphs can be used to visualize and analyze these cohorts. Example: Grouping customers by the date of their first purchase and analyzing their behavior patterns.</p>"},{"location":"glossary/#community-detection","title":"Community Detection","text":"<p>The process of identifying groups of nodes in a graph that are more densely connected internally than with the rest of the network. Example: Used in social network analysis to identify groups of closely connected individuals.</p>"},{"location":"glossary/#complex-event-processing-cep","title":"Complex Event Processing (CEP)","text":"<p>A method of tracking and analyzing streams of information (data) about things that happen (events), and deriving a conclusion from them. Used in finance for real-time fraud detection by analyzing patterns of transactions. Example: Monitoring financial transactions in real-time to identify potentially fraudulent activities.</p>"},{"location":"glossary/#customer-360-view","title":"Customer 360 View","text":"<p>Refers to an integrated view of customer data compiled from various touchpoints and sources, providing a comprehensive picture of the customer journey. In graph analysis, this might involve creating a graph that connects all customer interactions with products, services, and brand touchpoints. Example: Building a complete profile of a customer's interactions, preferences, transaction history, and feedback.</p>"},{"location":"glossary/#customer-lifetime-value-clv","title":"Customer Lifetime Value (CLV)","text":"<p>A prediction of the net profit attributed to the entire future relationship with a customer. Graph theory can help in understanding and predicting CLV by analyzing customer behavior patterns and their network effects. Example: Using transaction networks to predict future customer spending and loyalty.</p>"},{"location":"glossary/#degree","title":"Degree","text":"<p>The number of edges connected to a vertex. In directed graphs, this includes in-degree (number of incoming edges) and out-degree (number of outgoing edges). For instance, in a social network, a user's vertex degree might correspond to their number of friends or connections.</p>"},{"location":"glossary/#depth-first-search-dfs","title":"Depth-First Search (DFS)","text":"<p>An algorithm used for traversing or searching a graph. It starts at the root and explores as far as possible along each branch before backtracking. Example: Used in solving puzzles such as mazes.</p> <p>#### Deterministic Algorithm  A type of algorithm that, given a particular input, will always produce the same output with a predictable computation process.</p> <p>In deterministic algorithms, each step and decision is specifically defined and does not involve any randomness or probability. The outcome and the state of the system at each stage of the algorithm are entirely predictable based on the input.</p> <p>Deterministic algorithms also have a high degree of explainability compared to machine-learning models.</p> <p>Example: A common example of a deterministic algorithm is the depth-first search algorithm.</p> <p>See also: Machine Learning Model</p>"},{"location":"glossary/#dijkstras-algorithm","title":"Dijkstra's Algorithm","text":"<p>An algorithm that finds the shortest paths between nodes in a graph, which may represent, for example, road networks. It can be used for weighted graphs without negative weights. Example: Used in GPS devices to find the shortest driving route.</p>"},{"location":"glossary/#directionality","title":"Directionality","text":"<p>Refers to the presence of directed edges in a graph, where each edge has a direction, typically indicated by an arrow. In a webpage link graph, an edge from page A to page B is directed, showing a link from A to B.</p>"},{"location":"glossary/#distributed-graph-processing","title":"Distributed Graph Processing","text":"<p>A method of processing large graphs that are too big to fit in a single machine's memory by distributing the data across multiple machines. Example: Google's Pregel and Apache Giraph are frameworks for distributed graph processing.</p>"},{"location":"glossary/#dynamic-graphs","title":"Dynamic Graphs","text":"<p>Graphs that evolve over time with additions or deletions of nodes, edges, or changing edge weights. Machine learning on dynamic graphs involves adapting to these changes. Example: Analyzing transaction networks in banking for real-time fraud detection.</p>"},{"location":"glossary/#edge","title":"Edge","text":"<p>A connection between two vertices in a graph, which can be directed (indicating a one-way relationship) or undirected (indicating a two-way relationship).</p> <p>For example, in a road network graph, an edge could represent a road connecting two intersections.  A one-way street could be represented as a directed edge.</p> <p>In the LPG graphs that we study in this book, all our edges connect two vertices and are called binary edges.  Edges are also typed so that they connect specific types of nodes.</p> <ul> <li>Also known as: link, arc, relationship</li> </ul>"},{"location":"glossary/#edge-partitioning","title":"Edge Partitioning","text":"<p>A technique used in distributed graph processing where edges are distributed across different machines or processes, which can help in parallelizing computation and managing large-scale graphs. Example: Used in handling social network graphs that are too large for single-machine processing.</p>"},{"location":"glossary/#edge-prediction","title":"Edge Prediction","text":"<p>A machine learning task in graph analysis where the goal is to predict the formation or existence of edges in the graph based on observed data. Example: In a collaboration network, predicting future collaborations based on historical data.</p>"},{"location":"glossary/#edge-weight-anomalies","title":"Edge Weight Anomalies","text":"<p>Refers to irregularities or unexpected values in the weights of edges in a graph. In a financial transaction graph, for example, edge weights could represent the amount of money transferred. Example: Identifying unusually large transactions in a financial network that might suggest money laundering.</p>"},{"location":"glossary/#eigen-vector","title":"Eigen Vector","text":"<p>A matrix representation of the graph, such as the adjacency matrix or Laplacian matrix that undergoes specific mathematical transformation to focus on structure of the graph.</p>"},{"location":"glossary/#floyd-warshall-algorithm","title":"Floyd-Warshall Algorithm","text":"<p>An algorithm for finding shortest paths in a weighted graph with positive or negative edge weights (but with no negative cycles). Example: Used in high-frequency trading for finding the quickest path through a network.</p>"},{"location":"glossary/#forensic-analysis","title":"Forensic Analysis","text":"<p>The use of scientific methods and techniques to investigate crime or fraud. In graph theory, this involves examining the structure and connections within the graph to uncover illicit activities. Example: Investigating healthcare claims to uncover patterns indicative of fraudulent practices.</p>"},{"location":"glossary/#graph-analytics","title":"Graph Analytics","text":"<p>The process of analyzing data in a graph format, where modeling, statistics, and machine learning techniques are applied to the graph data. Example: Used in fraud detection by analyzing transaction networks to identify unusual patterns.</p>"},{"location":"glossary/#graph-autoencoders","title":"Graph Autoencoders","text":"<p>A neural network model that is trained to encode graph structure into a low-dimensional space and then decode this representation back to a graph. Example: Used for feature learning on graph-structured data.</p>"},{"location":"glossary/#graph-connectivity","title":"Graph Connectivity","text":"<p>Refers to the degree to which the vertices within a graph are connected. Strong connectivity in a directed graph means there is a path from each vertex to every other vertex. Example: Assessing network resilience in computer networks.</p>"},{"location":"glossary/#graph-convolutional-networks-gcns","title":"Graph Convolutional Networks (GCNs)","text":"<p>A type of Graph Neural Network that generalizes convolutional neural networks to graph-structured data. GCNs are effective in handling non-Euclidean data inherent in graphs. Example: Used in drug discovery for predicting molecular interactions.</p>"},{"location":"glossary/#graph-database","title":"Graph Database","text":"<p>A database that uses graph structures for semantic queries with nodes, edges, and properties to represent and store data. They are particularly useful for analyzing interconnections in large data sets. Example: Neo4j and Amazon Neptune are popular graph databases.</p>"},{"location":"glossary/#graph-embeddings","title":"Graph Embeddings","text":"<p>The process of transforming nodes, edges, and their features into a vector space while preserving graph topology and properties. These embeddings can be used in various machine-learning applications. Example: Creating vector representations of social network users to feed into machine learning models for friend suggestions.</p>"},{"location":"glossary/#graph-neural-networks-gnns","title":"Graph Neural Networks (GNNs)","text":"<p>A type of neural network designed to directly operate on the graph structure. GNNs are used for learning graph embeddings by leveraging node features and structure. Example: Used in recommendation systems where both users and items are represented in a graph.</p>"},{"location":"glossary/#graph-partitioning","title":"Graph Partitioning","text":"<p>The process of dividing a graph into smaller components while minimizing the number of edges between different components. This is particularly important for processing large graphs on multiple machines. Example: Used in parallel computing to optimize the performance of graph algorithms.</p>"},{"location":"glossary/#graph-pattern-recognition","title":"Graph Pattern Recognition","text":"<p>The task of identifying regularities or patterns within graph data. This is crucial in detecting structured patterns associated with fraudulent activities. Example: Detecting common patterns in out-of-network referral practices that might suggest fraudulent behavior.</p>"},{"location":"glossary/#graph-scale","title":"Graph Scale","text":"<p>The \"Scale\" in the graph benchmarks refers to the size of the problem being solved. Specifically, it indicates the exponent in the graph size, which is 2 raised to the power of the \"Scale\" value.</p> <p>For example, the Graph500 benchmark measures the performance of supercomputers in handling large-scale graph processing tasks, which are common in data-intensive applications like social network analysis, cybersecurity, and bioinformatics.</p> <p>In the recent graph 500 listings:</p> <ul> <li>A Scale of 42 means the graph has 2 to the 42nd power vertices (nodes).</li> <li>A Scale of 41 means the graph has 2 to the 41st power vertices.</li> </ul> <p>2 to the 42nd power equals 4,398,046,511,104. This means a graph with a Scale of 42 in the Graph500 benchmark would have over 4.39 trillion vertices.</p> <p>The larger the scale, the larger the graph, and thus, the more challenging the computation. This scale value helps to quantify the size and complexity of the graph problem that the supercomputer is capable of handling efficiently.</p>"},{"location":"glossary/#gtep-billion-of-traversed-edges-per-second","title":"GTEP (Billion of Traversed Edges per Second)","text":"<p>A performance benchmark metric used primarily in the field of graph computing and data analysis. It quantifies the speed at which a system can traverse the edges in a graph data structure. One edge traversal is counted each time the system moves from one node to another along an edge connecting them.</p> <p>GTEP metric is crucial in evaluating the efficiency of graph processing systems, which are widely used in various applications like social network analysis, recommendation engines, and network topology analysis. Higher GTEP values indicate faster data processing capabilities, which is vital for handling large-scale, complex graph structures.</p>"},{"location":"glossary/#hamiltonian-cycle","title":"Hamiltonian Cycle","text":"<p>A cycle in a graph that visits each vertex exactly once and returns to the starting vertex. Determining if such a cycle exists in a graph is a well-known problem. Example: Used in solving routing problems like the traveling salesman problem.</p>"},{"location":"glossary/#heuristic","title":"Heuristic","text":"<p>A technique designed for solving a problem more quickly when classic methods are too slow, or for finding an approximate solution when classic methods fail to find any exact solution. Example: Used in A* search algorithm for pathfinding and graph traversal.</p>"},{"location":"glossary/#homogeneous-graph","title":"Homogeneous Graph","text":"<p>A graph structure where all nodes (or vertices) are of the same type. This uniformity in node types distinguishes it from heterogeneous graphs where nodes have multiple types. An example is a citation graph where each node represents a scientific paper.</p> <p>Homogeneous graphs are ideal for identifying patterns or shapes within networks.  They are also used for benchmarking where the only key matric is number of nodes traversed per second.</p>"},{"location":"glossary/#hypergraph","title":"Hypergraph","text":"<p>A type of graph that has edges that can connect more than two nodes.  In the LPG models used in this book, edges connect pairs of nodes.</p> <p>Although many academics favor the use of hypergraphs for theoretical research, there is no evidence they have better abilities to represent knowledge.  Any hypergraph can be converted into an LPG graph by converting edges with more than two connections into a node.  The concept of directionality is also much more complex in hypergraphs.</p> <p>Unlike distributed graphs like TigerGraph, MemGraph and DGraph, all of which work with binary edges, there are no distributed hypergraph products.</p>"},{"location":"glossary/#inbound-edge","title":"Inbound Edge","text":"<p>In a directed graph, it is an edge pointing towards a particular vertex. For example, in a traffic network, an inbound edge to a vertex might represent a road leading into a city.</p>"},{"location":"glossary/#influence-maximization","title":"Influence Maximization","text":"<p>A problem in social network analysis to determine a set of nodes that should be targeted to maximize the spread of information or influence. Example: Used in viral marketing campaigns to identify potential early adopters for new products.</p>"},{"location":"glossary/#influence-networks","title":"Influence Networks","text":"<p>Networks that map the influence customers or key opinion leaders have within their social circles. This can be particularly important for understanding how information, trends, and opinions spread among customers. Example: Identifying key influencers within a network who can sway the purchasing decisions of others.</p>"},{"location":"glossary/#knowledge-representation","title":"Knowledge Representation","text":"<p>A field of artificial intelligence that focuses on designing computer representations that capture information about the world that can be used for solving complex problems.</p> <p>Finding the best knowledge representation is often considered one of the most difficult areas of artificial intelligence.</p>"},{"location":"glossary/#know-your-customer-kyc-compliance","title":"Know Your Customer (KYC) Compliance","text":"<p>A standard in the finance industry that ensures investment advisors know detailed information about their clients' risk tolerance, investment knowledge, and financial position. Graphs can be used to map customer relationships and transactions to ensure compliance. Example: Analyzing transaction networks to ensure customers are not involved in money laundering.</p>"},{"location":"glossary/#kruskals-algorithm","title":"Kruskal's Algorithm","text":"<p>An algorithm that finds a minimum spanning tree for a connected weighted graph. This means it finds a subset of the edges that forms a tree that includes every vertex, where the total weight of all the edges in the tree is minimized. Example: Used in designing networks like water supply networks.</p>"},{"location":"glossary/#labeled-property-graph","title":"Labeled Property Graph","text":"<p>The term \"Labeled Property Graph Model\" or (LPG) refers to a specific type of graph database model that is primarily used for storing and managing complex networks of data.  In the LPG model, both nodes and edges have properties.  Edges may also optionally have a direction.  Each node has a specific type that can determine what its valid relationship and properties are.</p> <p>This course uses the LPG model.</p>"},{"location":"glossary/#link-prediction","title":"Link Prediction","text":"<p>The problem of predicting the existence of a link between two entities in a network. Example: Used in recommendation systems to suggest new connections on professional networks like LinkedIn.</p>"},{"location":"glossary/#mapreduce","title":"MapReduce","text":"<p>A programming model suitable for processing large data sets with a parallel, distributed algorithm on a cluster. Example: Used in processing large-scale graph data, as in Google's implementation of the PageRank algorithm.</p>"},{"location":"glossary/#maximal-flow","title":"Maximal Flow","text":"<p>Refers to the greatest possible flow rate in a network flow problem. Algorithms like Ford-Fulkerson are used to compute this. Example: Used in telecommunications to determine the maximum data transfer speed through a network.</p>"},{"location":"glossary/#minimum-spanning-tree-mst","title":"Minimum Spanning Tree (MST)","text":"<p>A subset of the edges of a connected, edge-weighted undirected graph that connects all the vertices together, without any cycles and with the minimum possible total edge weight. Example: Used in designing the least expensive network layout (like electrical grids or road networks).</p>"},{"location":"glossary/#money-laundering-detection","title":"Money Laundering Detection","text":"<p>The process of identifying financial transactions that are part of a money laundering scheme. Graph analysis is used to trace the complex web of transactions typical of money laundering schemes. Example: Tracing transactions through multiple accounts to uncover the layering stage of money laundering.</p>"},{"location":"glossary/#network-flow","title":"Network Flow","text":"<p>An optimization and graph algorithm to find the maximum flow in a flow network. It is used in various applications, such as traffic system, fluid dynamics, and network routing. Example: Calculating the maximum number of vehicles that can pass through a road network.</p>"},{"location":"glossary/#network-optimization","title":"Network Optimization","text":"<p>The process of optimizing the design or operation of a network. In business, this often relates to logistics, like optimizing the layout of a distribution network to minimize transport costs or time. Example: Optimizing supply chain networks.</p>"},{"location":"glossary/#network-segmentation","title":"Network Segmentation","text":"<p>The process of dividing a customer network into non-overlapping segments or groups, based on certain criteria like demographics, purchasing behavior, or social connections. Example: Creating targeted marketing campaigns based on customer segments identified through network analysis.</p>"},{"location":"glossary/#node2vec","title":"Node2Vec","text":"<p>An algorithmic framework for learning continuous feature representations for nodes in networks. Node2Vec uses flexible notions of a node's network neighborhood and can learn representations that maximize the likelihood of preserving network neighborhoods. Example: Used in fraud detection to represent transaction patterns.</p>"},{"location":"glossary/#outbound-edge","title":"Outbound Edge","text":"<p>In a directed graph, it is an edge that originates from a vertex and points away from it. For instance, in a citation network, an outbound edge from a research paper vertex could signify a citation to another paper.</p>"},{"location":"glossary/#pagerank-algorithm","title":"PageRank Algorithm","text":"<p>An algorithm used by Google Search to rank web pages in their search engine results. It is based on the structure of the web and links between pages. Example: Ranking web pages in search engine results.</p>"},{"location":"glossary/#path-analysis","title":"Path Analysis","text":"<p>In customer journey analytics, path analysis involves mapping the sequence of touchpoints or interactions a customer has with a brand before making a purchase decision. Example: Understanding the most common paths to purchase and optimizing marketing strategies accordingly.</p>"},{"location":"glossary/#prims-algorithm","title":"Prim's Algorithm","text":"<p>An algorithm that finds a minimum spanning tree for a connected weighted undirected graph. It finds a subset of the edges that forms a tree, including every vertex, where the total weight is minimized. Example: Used in network design, particularly in the design of cable networks.</p>"},{"location":"glossary/#scalability","title":"Scalability","text":"<p>The property of a system to handle a growing amount of work by adding resources. In the context of graph algorithms, it refers to the ability of the algorithm to handle increasingly large graphs. Example: Evaluating whether an algorithm like BFS can scale to graphs with billions of vertices.</p>"},{"location":"glossary/#sentiment-analysis","title":"Sentiment Analysis","text":"<p>The use of natural language processing, text analysis, and computational linguistics to identify and extract subjective information from source materials. When applied to graph theory, sentiment analysis can be used to gauge public opinion about a product or service based on social network data. Example: Analyzing social media networks to understand customer feelings towards a brand or product.</p>"},{"location":"glossary/#shortest-path-problem","title":"Shortest Path Problem","text":"<p>A problem of finding a path between two vertices (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized. Example: Used in GPS systems for finding the shortest driving route.</p>"},{"location":"glossary/#social-listening","title":"Social Listening","text":"<p>The monitoring of social media channels for mentions of a brand, product, competitors, or anything related to business. Combined with graph analysis, it can reveal insights about customer preferences and market trends. Example: Tracking brand mentions on social media to gauge customer sentiment and respond to customer needs proactively.</p>"},{"location":"glossary/#social-network-analysis-sna","title":"Social Network Analysis (SNA)","text":"<p>The process of investigating social structures through the use of network and graph theories. It characterizes networked structures in terms of nodes (individual actors, people, or things within the network) and the ties, edges, or links (relationships or interactions) that connect them. Example: Analyzing employee relationships in a corporation to improve communication or collaboration.</p>"},{"location":"glossary/#social-network-analysis-in-fraud-detection","title":"Social Network Analysis in Fraud Detection","text":"<p>Analyzing the social connections between entities (such as individuals, organizations, bank accounts) to identify fraudulent patterns of behavior. Example: Identifying fraud rings in insurance claims by analyzing the network of claimants and providers.</p>"},{"location":"glossary/#sparse-graph","title":"Sparse Graph","text":"<p>A graph in which the number of edges is close to the minimal number of edges. Sparse graphs contrast with dense graphs, where the number of edges is close to the maximal number of edges. Example: Social networks are often modeled as sparse graphs.</p>"},{"location":"glossary/#spectral-graph-theory","title":"Spectral Graph Theory","text":"<p>A field that applies concepts from linear algebra and spectral theory to graph theory. It is used in machine learning for graph embedding and clustering. Example: Clustering of web pages based on their similarity in the hyperlink structure.</p>"},{"location":"glossary/#streaming-algorithms","title":"Streaming Algorithms","text":"<p>Algorithms designed for processing data streams where the input is presented as a sequence of items and can be examined only once or a small number of times. Example: Used in real-time analysis of large-scale graph data, like analyzing trends from social media feeds.</p>"},{"location":"glossary/#subgraph-matching","title":"Subgraph Matching","text":"<p>The process of finding instances of a smaller graph (subgraph) within a larger graph. This has applications in various fields, including pattern recognition, bioinformatics, and social network analysis. Example: Used in chemical compound databases to find compounds that include a particular molecular structure.</p>"},{"location":"glossary/#suspicious-activity-reports-sars","title":"Suspicious Activity Reports (SARs)","text":"<p>Reports filed by financial institutions to flag suspected instances of money laundering or fraud. Graph analysis can help in identifying relationships and patterns that lead to the filing of SARs. Example: Analyzing transaction networks to detect patterns that necessitate the filing of a SAR.</p>"},{"location":"glossary/#tarjans-algorithm","title":"Tarjan's Algorithm","text":"<p>An algorithm for finding the strongly connected components of a directed graph. Example: Used in compilers to find loops in control flow graphs.</p>"},{"location":"glossary/#temporal-graph-analysis","title":"Temporal Graph Analysis","text":"<p>The study of graphs that change over time, where relationships between nodes can appear, disappear, or change their properties. This is crucial for analyzing dynamic systems. Example: Monitoring communication networks to identify changes in interaction patterns over time.</p>"},{"location":"glossary/#time-series-analysis-on-graphs","title":"Time Series Analysis on Graphs","text":"<p>The study of graphs in which the nodes and/or edges have time-series data associated with them. This is particularly relevant in dynamic networks where relationships evolve over time. Example: Analyzing consumer behavior over time in a retail network.</p>"},{"location":"glossary/#topological-sorting","title":"Topological Sorting","text":"<p>An algorithm used to linearly order the vertices of a graph such that for every directed edge from vertex \ufffdu to vertex \ufffdv, \ufffdu comes before \ufffdv in the ordering. Example: Used in scheduling jobs from the given dependencies among jobs.</p>"},{"location":"glossary/#touchpoint-analysis","title":"Touchpoint Analysis","text":"<p>The analysis of individual points of interaction between a customer and a brand to assess what part they play in the customer's journey. In graph theory, this involves analyzing how different touchpoints are connected and how they influence the customer's decision-making process. Example: Evaluating the effectiveness of different marketing channels in influencing customer decisions.</p>"},{"location":"glossary/#union-find-algorithm","title":"Union-Find Algorithm","text":"<p>An algorithm that performs two useful operations on a set: finding the root of an element and merging two sets. It is particularly useful for graph problems that involve partitioning elements into disjoint sets. Example: Used in Kruskal's algorithm for finding the minimum spanning tree.</p>"},{"location":"glossary/#unweighted-graph","title":"Unweighted Graph","text":"<p>A graph where edges do not have weights. Connections are either present or absent without any additional quantitative attributes. An example is a simple friendship network where edges simply indicate whether a friendship exists between two people.</p>"},{"location":"glossary/#vertex-node","title":"Vertex (Node)","text":"<p>A fundamental unit of which graphs are formed, representing an entity. For instance, in a social network graph, each user can be represented as a vertex.</p>"},{"location":"glossary/#vertex-cover","title":"Vertex Cover","text":"<p>A set of vertices that includes at least one endpoint of every edge of the graph. The problem of finding a minimum vertex cover is a classical optimization problem in computer science. Example: Used in network security to determine the minimum number of points to control to monitor network traffic.</p>"},{"location":"glossary/#weighted-graph","title":"Weighted Graph","text":"<p>A graph where each edge has a numerical value (weight) associated with it, representing quantities like distance, cost, or capacity. A common example is a road network where edges are roads with weights representing distances.</p>"},{"location":"graph-query-languages/","title":"Graph Query Languages","text":"<p>Comparing popular graph query languages like Cypher, GSQL (TigerGraph), and the emerging ISO GQL language is essential for understanding the landscape of graph database technologies. Here's a brief comparison:</p>"},{"location":"graph-query-languages/#cypher","title":"Cypher","text":"<ul> <li>Developed By: Neo4j</li> <li>Key Features:<ul> <li>Declarative query language, focusing on simplicity and expressiveness.</li> <li>Emphasizes pattern matching, making it intuitive to work with graph data.</li> <li>Allows for expressive and efficient querying and data manipulation.</li> <li>Widely used due to its association with Neo4j, a leading graph database.</li> </ul> </li> <li>Use Cases: Well-suited for social network analysis, recommendation engines, fraud detection, etc.</li> <li>Pros:<ul> <li>User-friendly syntax, especially for those familiar with SQL.</li> <li>Strong community support and extensive documentation.</li> </ul> </li> <li>Cons:<ul> <li>Primarily tied to Neo4j; not as universal across other graph database systems.</li> </ul> </li> </ul>"},{"location":"graph-query-languages/#gsql-tigergraph","title":"GSQL (TigerGraph)","text":"<ul> <li>Developed By: TigerGraph</li> <li>Key Features:<ul> <li>A highly expressive and rich graph query language.</li> <li>Supports deep link analytics: complex pattern matching and shortest path algorithms.</li> <li>Allows for the creation of user-defined functions.</li> <li>High performance and scalability, suitable for large-scale graph data.</li> </ul> </li> <li>Use Cases: Ideal for complex and deep graph analytics problems like network optimization, supply chain analysis, advanced machine learning on graph data.</li> <li>Pros:<ul> <li>Powerful and flexible for complex graph computations.</li> <li>Good scalability and performance.</li> </ul> </li> <li>Cons:<ul> <li>Steeper learning curve due to its complexity.</li> <li>Less widespread in use compared to Cypher.</li> </ul> </li> </ul>"},{"location":"graph-query-languages/#iso-gql-graph-query-language","title":"ISO GQL (Graph Query Language)","text":"<ul> <li>Developed By: ISO/IEC</li> <li>Key Features:<ul> <li>A new standard being developed by the same committee responsible for SQL.</li> <li>Aims to be a unifying language for querying graph databases.</li> <li>Intends to incorporate the strengths of existing graph query languages.</li> </ul> </li> <li>Use Cases: As it's under development, specific use cases are yet to be fully established. The goal is to have a standardized language that can be widely adopted across different graph database systems.</li> <li>Pros:<ul> <li>Potential for wide adoption and standardization.</li> <li>Incorporates features from various graph query languages.</li> </ul> </li> <li>Cons:<ul> <li>Still in development; not yet available for use.</li> <li>Uncertainty about how existing database systems will adopt or adapt to GQL.</li> </ul> </li> </ul>"},{"location":"graph-query-languages/#comparison-summary","title":"Comparison Summary","text":"<ul> <li>User-Friendliness: Cypher is often praised for its simplicity and SQL-like syntax, making it more accessible for newcomers.</li> <li>Complexity and Power: GSQL is known for its rich feature set and ability to handle complex, deep graph queries efficiently, making it ideal for advanced use cases.</li> <li>Standardization: ISO GQL aims to standardize graph querying, potentially bringing the best of both worlds, but it's still in the pipeline and its impact remains to be seen.</li> </ul> <p>Each language has its strengths and caters to different needs within the graph database ecosystem. The choice between them often depends on the specific requirements of the project and the user's familiarity with these languages.</p>"},{"location":"how-we-built-this-site/","title":"How We Built This Site","text":"<p>This page describes how we built this website and some of  the rationale behind why we made various design choices.</p>"},{"location":"how-we-built-this-site/#python","title":"Python","text":"<p>MicroSims are about how we use generative AI to create animations and simulations.  The language of AI is Python.  So we wanted to create a site that could be easily understood by Python developers.</p>"},{"location":"how-we-built-this-site/#mkdocs-vs-docusaurus","title":"Mkdocs vs. Docusaurus","text":"<p>There are two main tools used by Python developers to write documentation: Mkdocs and Docusaurus.  Mkdocs is easier to use and more popular than Docusaurus. Docusaurus is also optimized for single-page applications. Mkdocs also has an extensive library of themes and plugins. None of us are experts in JavaScript or React. Based on our ChatGPT Analysis of the Tradeoffs we chose mkdocs for this site management.</p>"},{"location":"how-we-built-this-site/#github-and-github-pages","title":"GitHub and GitHub Pages","text":"<p>GitHub is a logical choice to store our  site source code and documentation.  GitHub also has a Custom GitHub Action that does auto-deployment if any files on the site change. We don't currently have this action enabled, but other teams can use this feature if they don't have the ability to do a local build with mkdocs.</p> <p>GitHub also has Issues,  Projects and releases that we can use to manage our bugs and tasks.</p> <p>The best practice for low-cost websites that have public-only content is GitHub Pages. Mkdocs has a command (<code>mkdocs gh-deploy</code>) that does deployment directly to GitHub Pages.  This was an easy choice to make.</p>"},{"location":"how-we-built-this-site/#github-clone","title":"GitHub Clone","text":"<p>If you would like to clone this repository, here are the commands:</p> <pre><code>mkdir projects\ncd projects\ngit clone https://github.com/dmccreary/microsims\n</code></pre>"},{"location":"how-we-built-this-site/#after-changes","title":"After Changes","text":"<p>After you make local changes you must do the following:</p> <pre><code># add the new files to a a local commit transaction\ngit add FILES\n# Execute the a local commit with a message about what and why you are doing the commit\ngit commit -m \"comment\"\n# Update the central GitHub repository\ngit push\n</code></pre>"},{"location":"how-we-built-this-site/#material-theme","title":"Material Theme","text":"<p>We had several options when picking a mkdocs theme:</p> <ol> <li>Mkdocs default</li> <li>Readthedocs</li> <li>Third-Party Themes See Ranking</li> </ol> <p>The Material Theme had 16K stars.  No other theme had over a few hundred. This was also an easy design decision.</p> <p>One key criterial was the social Open Graph tags so that when our users post a link to a simulation, the image of the simulation is included in the link.  Since Material supported this, we used the Material theme. You can see our ChatGPT Design Decision Analysis if you want to check our decision process.</p>"},{"location":"how-we-built-this-site/#conda-vs-venv","title":"Conda vs VENV","text":"<p>There are two choices for virtual environments.  We can use the native Python venv or use Conda.  venv is simle but is only designed for pure Python projects.  We imagine that this site could use JavaScript and other langauges in the future, so we picked Conda. There is nothing on this microsite that prevents you from using one or the other.  See the ChatGPT Analysis Here.</p> <p>Here is the conda script that we ran to create a new mkdocs environment that also supports the material social imaging libraries.</p> <pre><code>conda deactivate\nconda create -n mkdocs python=3\nconda activate mkdocs\npip install mkdocs \"mkdocs-material[imaging]\"\n</code></pre>"},{"location":"how-we-built-this-site/#mkdocs-commands","title":"Mkdocs Commands","text":"<p>There are three simple mkdoc commands we use.</p>"},{"location":"how-we-built-this-site/#local-build","title":"Local Build","text":"<pre><code>mkdocs build\n</code></pre> <p>This builds your website in a folder called <code>site</code>.  Use this to test that the mkdocs.yml site is working and does not have any errors.</p>"},{"location":"how-we-built-this-site/#run-a-local-server","title":"Run a Local Server","text":"<pre><code>mkdocs serve\n</code></pre> <p>This runs a server on <code>http://localhost:8000</code>. Use this to test the display formatting locally before you push your code up to the GitHub repo.</p> <pre><code>mkdoc gh-deploy\n</code></pre> <p>This pushes everything up to the GitHub Pages site. Note that it does not commit your code to GitHub.</p>"},{"location":"how-we-built-this-site/#mkdocs-material-social-tags","title":"Mkdocs Material Social Tags","text":"<p>We are using the Material Social tags.  This is a work in progress!</p> <p>Here is what we have learned.</p> <ol> <li>There are extensive image processing libraries that can't be installed with just pip.  You will need to run a tool like brew on the Mac to get the libraries installed.</li> <li>Even after <code>brew</code> installs the libraries, you have to get your environment to find the libraries.  The only way I could get that to work was to set up a local UNIX environment variable.</li> </ol> <p>Here is the brew command that I ran:</p> <pre><code>brew install cairo freetype libffi libjpeg libpng zlib\n</code></pre> <p>I then had to add the following to my ~/.zshrc file:</p> <pre><code>export DYLD_FALLBACK_LIBRARY_PATH=/opt/homebrew/lib\n</code></pre> <p>Note that I am running on a Mac with Apple silicon.  This means that the image libraries that brew downloads must be specific to the Mac Arm instruction set.</p> <ul> <li>Cover images for blog post #4364</li> <li>Discussion on overriding the Social Card Image</li> </ul>"},{"location":"license/","title":"Creative Commons License","text":"<p>All content in this repository is governed by the following license agreement:</p>"},{"location":"license/#license-type","title":"License Type","text":"<p>Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0 DEED)</p>"},{"location":"license/#link-to-license-agreement","title":"Link to License Agreement","text":"<p>https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en</p>"},{"location":"license/#your-rights","title":"Your Rights","text":"<p>You are free to:</p> <ul> <li>Share \u2014 copy and redistribute the material in any medium or format</li> <li>Adapt \u2014 remix, transform, and build upon the material</li> </ul> <p>The licensor cannot revoke these freedoms as long as you follow the license terms.</p>"},{"location":"license/#restrictions","title":"Restrictions","text":"<ul> <li>Attribution \u2014 You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.</li> <li>NonCommercial \u2014 You may not use the material for commercial purposes.</li> <li>ShareAlike \u2014 If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.</li> <li>No additional restrictions \u2014 You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.</li> </ul> <p>Notices</p> <p>You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.</p> <p>No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material.</p> <p>This deed highlights only some of the key features and terms of the actual license. It is not a license and has no legal value. You should carefully review all of the terms and conditions of the actual license before using the licensed material.</p>"},{"location":"references/","title":"Graph Algorithm References","text":"<p>Newbies Guide to Python-igraph Manim Community Edtion</p>"},{"location":"relationship-traversal/","title":"Relationship Traversal","text":"<p>The chart illustrates the significant performance advantage that native graph databases typically have over RDBM systems in scenarios involving large and complex graph structures.  The chart provides a comparison of the predicted relationship traversal performance in a scenario with a very large graph, consisting of 1 billion vertices and 100 billion edges.</p> <ul> <li> <p>Native Labeled Property Graph (Green Line): Demonstrates a very slow linear growth in traversal time. This represents the high efficiency of graph databases in traversing relationships, benefiting from their optimized structure for direct pointer access and effective handling of large-scale graphs.</p> </li> <li> <p>RDBMS System (Red Line): Shows an exponential growth in traversal time. This reflects the significant performance impact of JOIN operations in RDBMS systems, especially as the number of relationships increases. In large and complex datasets, such as the one described, the cost of these operations grows rapidly, leading to much slower performance compared to graph databases.</p> </li> </ul> <p>This chart is a conceptual representation to highlight the potential performance differences in handling large-scale graph data between native graph databases and traditional RDBMS systems. The actual performance can vary depending on the specific database architecture, indexing strategies, and query optimizations used. \u200b</p>"},{"location":"topic-lists/","title":"Graph Algorithms Topics","text":"<ol> <li>Basic Graph Theory Concepts: Vertex, Edge, Degree, Directed/Undirected Graphs, Weighted Graphs, etc.</li> <li>Graph Algorithms: Dijkstra's, Bellman-Ford, A*, BFS, DFS, Kruskal's, Prim's, Topological Sorting, etc.</li> <li>Large Graphs and Performance: Big-O Notation, Distributed Graph Processing, Graph Partitioning, Sparse/Dense Graph, Streaming Algorithms, etc.</li> <li>Graphs in Business and Analytics: Centrality Measures, Community Detection, Graph Analytics, Network Segmentation, Path Analysis, etc.</li> <li>Graphs in Fraud Detection and Healthcare: Anomaly Detection, Forensic Analysis, KYC Compliance, Money Laundering Detection, etc.</li> <li>Customer Analysis: Customer 360 View, CLV, Sentiment Analysis, Churn Prediction, Cohort Analysis, Social Listening, etc.</li> <li> <p>Machine Learning and Graphs: Graph Neural Networks (GNNs), Graph Embeddings, Temporal Graph Analysis, Node2Vec, Graph Convolutional Networks (GCNs), etc.</p> </li> <li> <p>Graph Databases and Query Languages: Terms like Neo4j, Cypher Query Language, graph indexing, and graph-based data models.</p> </li> <li>Graph Theory in Bioinformatics and Healthcare: Network pharmacology, protein-protein interaction networks, genetic networks.</li> <li>Graphs in Social Science and Epidemiology: Social influence models, diffusion networks, contact tracing graphs.</li> <li>Graph Theory in Infrastructure and Urban Planning: Transportation networks, utility networks, urban flow analysis.</li> <li>Graph Theory in Physics and Chemistry: Atomic and molecular structures, network thermodynamics, quantum graphs.</li> </ol>"},{"location":"data/","title":"Using Generative AI to Create Datasets for Graph Algorithms","text":"<p>The best way to quickly understand graph algorithms is to have high-quality datasets to help you visualize how the graph algorithms work step-by-step.</p> <p>This section demonstrates how to use generative AI to generate data sets.</p>"},{"location":"data/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Generate a table of the 20 largest metro regions in the US.\nEach row has a metro region.\nEach row has the following columns:\n\n1. Rank\n2. Name\n3. Population\n5. Latitude\n4. Longitude\n\nRound all numbers to three significant places.\n</code></pre> <p>If you are happy with the results you can issue the following prompt:</p> <pre><code>Return a downloadable JSON file of this table.\n</code></pre>"},{"location":"data/#us-cities-graph-network-demo","title":"US Cities Graph Network Demo","text":"<p>The following demo walks you through the process of creating a sample data set of the top 20 metro regions in the US.  This dataset is ideal for testing various algorithms such as search, path and traveling salesperson.</p> <p>US Cities</p>"},{"location":"data/geospatial/","title":"Geospatial","text":"<p>Link to Standardized Geospatial Graph Model with Vis.js Vis HTML/JavaScript Code</p> <p>A standardized geospatial model is crucial for large organizations due to several reasons:</p> <ol> <li> <p>Consistency and Accuracy: Standardization ensures that geographical data is consistent across different departments and applications within the organization. This consistency is key for maintaining the accuracy of the data, as it reduces the risk of discrepancies that could lead to errors in decision-making or operations.</p> </li> <li> <p>Efficient Data Integration and Sharing: Large organizations often operate across various locations and might have multiple branches or departments dealing with geospatial data. A standardized model allows for efficient integration and sharing of data across these different entities. It simplifies the process of merging data from various sources, ensuring that everyone is using the same format and interpretation.</p> </li> <li> <p>Improved Decision-Making: Standardized geospatial models provide a reliable foundation for analyses and decision-making. Organizations can better assess location-based trends, demographics, logistical routes, and resource distributions, which are crucial for strategic planning, marketing, supply chain management, and other operational decisions.</p> </li> <li> <p>Interoperability with External Systems: A standardized model enhances interoperability with external systems, such as government databases, partner organizations, or public geospatial services. This is essential for activities like compliance with legal requirements, collaborative projects, and accessing broader datasets for enhanced insights.</p> </li> <li> <p>Scalability and Future-Proofing: Standardization makes it easier to scale geospatial capabilities as the organization grows. A uniform model can more readily adapt to new regions, datasets, or technologies, making it a sustainable choice for long-term development.</p> </li> <li> <p>Cost-Effectiveness: By standardizing their geospatial data models, organizations can reduce costs associated with data conversion, error correction, and training. It streamlines processes and reduces the need for custom solutions to handle different data formats.</p> </li> <li> <p>Enhanced Data Quality Management: Standardized models facilitate better data quality management. They make it easier to implement quality control measures, ensure data completeness, and maintain the integrity of geospatial data over time.</p> </li> <li> <p>Support for Advanced Technologies: Standardization lays the groundwork for adopting advanced technologies like AI and machine learning in geospatial analysis. Consistent data models are essential for these technologies to effectively learn patterns and provide accurate predictive insights.</p> </li> </ol> <p>In summary, for large organizations, having a standardized geospatial model is key to efficient, accurate, and cost-effective handling of geographical data. It supports better decision-making, facilitates data sharing and integration, and prepares the organization for future technological advancements.</p>"},{"location":"data/geospatial/#sample-geospatial-rules","title":"Sample Geospatial Rules","text":"<p>The models you use may be based on the following rules for US addresses:</p> <ol> <li>Every Address is LOCATED_IN in a single City</li> <li>Every City is LOCATED_IN in a single State</li> <li>Every State is LOCATED_IN a single Country</li> <li>Every County is LOCATED_IN a single State</li> <li>Every Address is ASSIGNED_TO a single Zipcode</li> <li>Every City is PART_OF one or more County (a city can be in many counties)</li> <li>A Zipode is ASSIGNED_TO a single City</li> <li>A Zipcode is ASSIGNED_TO a single County</li> </ol> <p>From these rules, we can infer many other rules such as each County is LOCATED_IN a single Country.</p> <p>Note that we can now add other \"regions\" such as a \"Metropolitan Region\" which is a collection of Cities.</p> <p>Prompt_tip</p> <p>When asking generative AI to create a custom script, you can include only the rules that are relevant above.  Many queries will work with rules 1 to 5 above.</p>"},{"location":"data/geospatial/#sample-geospatial-loaders","title":"Sample Geospatial Loaders","text":"<p>Once our geospatial model is fixed, we can then focus on building queries that tie people and organizations to the Address vertex.  In general, we only need to link an entity to an Address.  The rest of the relationships can be inferred.  This keeps our in-memory footprint smaller and makes queries more consistent.</p>"},{"location":"data/geospatial/#sample-rendering-with-p5js","title":"Sample Rendering with p5.js","text":"<p>Link to Geospatial Model Rendered with p5.js Edit GeoSpacial Model MicroSim</p> <p>Link to the ChatGPT Dialog</p>"},{"location":"data/geospatial/#region-names","title":"Region Names","text":"<p>In addition to names of cities, counties and states users also frequently ask for region names. These region names can be linked to our existing cities counties and states.</p> <p>Here is a sample list of Region Names.  For each of these regions, we can ask ChatGPT to create a list of States, Counties and Cities that they include.</p>"},{"location":"data/geospatial/region-names/","title":"Region Names","text":"<p>What are the most common region names in the US? I am thinking of terms like \"Bay Area\" and \"Silicon Valley\"</p> <p>Common region names in the United States often refer to geographic, cultural, economic, or historical areas that are widely recognized by both residents and people outside the region. These names can encompass cities, counties, or even larger areas and might be known for their natural features, economic activities, or cultural significance. Here are some of the most common and recognizable region names in the U.S.:</p> <ol> <li> <p>Bay Area: Refers to the San Francisco Bay Area, encompassing cities like San Francisco, Oakland, and San Jose. Known for its tech industry, especially in Silicon Valley, and diverse culture.</p> </li> <li> <p>Silicon Valley: Located within the Bay Area, it's the global center for high technology and innovation, home to many start-ups and global technology companies.</p> </li> <li> <p>Pacific Northwest (PNW): Encompasses Washington and Oregon states, known for its lush forests, mountains, and progressive cities like Seattle and Portland.</p> </li> <li> <p>New England: The northeastern region consisting of six states: Maine, Vermont, New Hampshire, Massachusetts, Rhode Island, and Connecticut. Known for its colonial history, autumn foliage, and coastal seafood.</p> </li> <li> <p>The South: A broad region covering the southeastern and south-central United States, known for its unique dialects, cuisine, and music, including states like Texas, Louisiana, Georgia, and Florida.</p> </li> <li> <p>The Midwest: Encompassing states in the north-central U.S., known for its agriculture, manufacturing, and major cities like Chicago, Detroit, and Minneapolis.</p> </li> <li> <p>The Southwest: Includes states like Arizona, New Mexico, Texas, and parts of California and Nevada. Known for its desert landscapes, Native American cultures, and Spanish influence.</p> </li> <li> <p>The Deep South: Often refers to the more culturally distinct southern states, including Alabama, Georgia, Louisiana, Mississippi, and South Carolina, known for their history, dialects, and cuisine.</p> </li> <li> <p>The Rocky Mountains (The Rockies): A major mountain range spanning states like Colorado, Wyoming, Montana, and parts of New Mexico. Known for outdoor recreation and natural beauty.</p> </li> <li> <p>The Great Plains: Spanning the central United States, known for its flatlands, agriculture, and sparse population, including states like Kansas, Nebraska, and Oklahoma.</p> </li> <li> <p>The Gulf Coast: Refers to the coastal areas in the U.S. that border the Gulf of Mexico, including parts of Texas, Louisiana, Mississippi, Alabama, and Florida. Known for its unique culture, seafood, and hurricanes.</p> </li> <li> <p>Appalachia: A region in the eastern U.S. known for the Appalachian Mountains, covering parts of states from New York to Mississippi. It's known for its natural beauty, coal mining history, and distinct cultural practices.</p> </li> <li> <p>The Tri-State Area: Often refers to the area where New York, New Jersey, and Connecticut meet, particularly around New York City, known for its high population density and economic activity.</p> </li> <li> <p>The DMV: Stands for the District of Columbia, Maryland, and Virginia, particularly the areas around Washington, D.C. Known for its political significance and diverse communities.</p> </li> <li> <p>The Rust Belt: Refers to a region in the Northeast and Midwest, including parts of Illinois, Indiana, Michigan, Ohio, Pennsylvania, and Wisconsin, known historically for its industrial manufacturing and significant economic decline in the late 20th century.</p> </li> <li> <p>The Sun Belt: Covers the southern and southwestern United States, known for its warm climate, growing economic opportunities, and significant population growth. It includes states like Arizona, California, Florida, Nevada, and Texas.</p> </li> <li> <p>The Big Island: Refers to the Island of Hawaii, the largest in the Hawaiian archipelago, known for its diverse climates, volcanic activity, and natural beauty.</p> </li> <li> <p>The Twin Cities: Refers to Minneapolis and Saint Paul in Minnesota, known for their cultural institutions, parks, and economic influence in the Midwest.</p> </li> <li> <p>Wine Country: Primarily refers to regions in California, such as Napa Valley and Sonoma County, known for their wine production, beautiful landscapes, and tourism.</p> </li> <li> <p>Tornado Alley: A colloquial term for the area in the central United States where tornadoes are most frequent, including parts of Texas, Oklahoma, Kansas, Nebraska, and South Dakota.</p> </li> <li> <p>The Emerald Coast: Located on the Florida Panhandle, known for its white sandy beaches and emerald green waters, popular among tourists and locals alike.</p> </li> <li> <p>The Research Triangle: In North Carolina, named for the triangle formed by North Carolina State University, Duke University, and the University of North Carolina at Chapel Hill. Known for its high concentration of technological companies and research institutions.</p> </li> <li> <p>The High Plains: Covering parts of the Midwest and the West, including regions of Colorado, Kansas, Montana, Nebraska, New Mexico, Oklahoma, Texas, and Wyoming. Known for its flat terrain and as a significant part of the Great Plains.</p> </li> <li> <p>The Gold Coast: Refers to several areas in the U.S. known for affluence and high-end living, most notably the stretch along the Atlantic coast in South Florida, including cities like Palm Beach, Boca Raton, and Miami.</p> </li> <li> <p>The Lowcountry: Located along the coast of South Carolina and into southeastern Georgia, known for its unique culture, history, cuisine, and marshy landscapes.</p> </li> <li> <p>Silicon Hills: Refers to the area around Austin, Texas, known for its technology and startup scene, echoing California's Silicon Valley.</p> </li> <li> <p>The Inland Empire: Located in Southern California, encompassing Riverside and San Bernardino counties, known for its logistics, manufacturing sectors, and suburban growth.</p> </li> <li> <p>The Outer Banks: A string of barrier islands off the coast of North Carolina, known for their natural beauty, and historical sites, and as a popular vacation destination.</p> </li> <li> <p>The Panhandle: Refers to several U.S. states' narrow, panhandle-shaped regions, but most commonly associated with the northern part of Florida, known for its beaches and conservative values.</p> </li> <li> <p>The Four Corners: The only point in the United States shared by four states: Arizona, Colorado, New Mexico, and Utah, known for its Native American heritage and national monuments.</p> </li> <li> <p>The Badlands: Located in South Dakota, known for its rugged terrain, striking landscapes, and significant fossil beds within the Badlands National Park.</p> </li> <li> <p>The Central Valley: A large, fertile valley in California, known for being one of the most productive agricultural regions in the world, producing a significant portion of the nation's fruits, vegetables, and nuts.</p> </li> <li> <p>The Hill Country: Located in central Texas, known for its rolling hills, spring-fed rivers, and a strong German cultural heritage reflected in its towns and festivals.</p> </li> <li> <p>The Space Coast: Located on the east coast of Florida, around Cape Canaveral, known for its aerospace industry and as the site of the Kennedy Space Center.</p> </li> <li> <p>The Cascades: A major mountain range of the western United States, extending from southern British Columbia through Washington and Oregon to Northern California, known for its breathtaking landscapes and volcanic peaks.</p> </li> <li> <p>The Ozarks: A geographically and culturally significant area covering parts of Missouri, Arkansas, Oklahoma, and Kansas, known for its beautiful landscapes, mountains, lakes, and rivers, offering plentiful outdoor recreation opportunities.</p> </li> <li> <p>The Great Lakes Region: Encompassing states bordering the Great Lakes --- Michigan, Ohio, New York, Pennsylvania, Wisconsin, Illinois, Indiana, and Minnesota. Known for its industrial history, natural beauty, and as a vital water source.</p> </li> <li> <p>The Finger Lakes: A region in central New York State known for its series of long, narrow lakes, and as a premier wine-producing area with numerous wineries and vineyards.</p> </li> <li> <p>The Piedmont: A plateau region located in the eastern United States, running between New Jersey and Alabama. It's known for its rolling hills and as a transition area between the Atlantic coastal plain and the Appalachian Mountains.</p> </li> <li> <p>The Black Hills: Located in southwestern South Dakota and extending into Wyoming, known for Mount Rushmore, the historic town of Deadwood, and as sacred land to the Lakota Sioux.</p> </li> <li> <p>The Mississippi Delta: Not to be confused with the river delta, it's a region in the northwest part of Mississippi known for its rich soil, agricultural output, and as the birthplace of the blues music genre.</p> </li> <li> <p>Napa Valley: Located in California, it's one of the world's premier wine regions, known for its vineyards, wine tours, and tasting rooms.</p> </li> <li> <p>The Smoky Mountains: Part of the Appalachian Mountains, straddling the border between North Carolina and Tennessee. Known for the Great Smoky Mountains National Park, it's renowned for its diverse flora and fauna and the beauty of its ancient mountains.</p> </li> <li> <p>The Jersey Shore: The coastal region of New Jersey, known for its many boardwalks, amusement parks, and beaches, and as a popular summer destination.</p> </li> <li> <p>Silicon Beach: Refers to the coastal region of Los Angeles known for its tech startup ecosystem, stretching from Santa Monica to Venice and Playa Vista.</p> </li> <li> <p>The Redwood Coast: Located in northern California, known for its towering redwood trees, part of the Redwood National and State Parks, offering spectacular natural beauty and outdoor activities.</p> </li> <li> <p>Chesapeake Bay: The nation's largest estuary, located in Maryland and Virginia. Known for its fishing, boating, and unique ecosystem, as well as the Chesapeake Bay Bridge.</p> </li> <li> <p>The Mojave Desert: Spanning across California, Nevada, Utah, and Arizona, known for its iconic Joshua trees, the Mojave National Preserve, and Death Valley, the hottest place on Earth.</p> </li> <li> <p>The Aleutian Islands: An archipelago extending west from the Alaska Peninsula, known for its rugged beauty, wildlife, and as a significant area for the fishing industry.</p> </li> <li> <p>The Texas Hill Country: Central Texas region known for its rolling hills, spring-fed rivers, and as a significant area for wineries, outdoor recreation, and German cultural heritage.</p> </li> </ol> <p>These regions highlight the geographical and cultural diversity found throughout the United States, each contributing to the country's rich mosaic of landscapes and communities.</p>"},{"location":"data/json/","title":"Generating a JSON Data File","text":"<p>In this section, we will demonstrate how we can use generative AI to generate a JSON data file and then use that JSON file to load graph data.</p> <p>Run the JSON file reader MicroSim Edit MicroSim</p>"},{"location":"data/json/#sample-prompt","title":"Sample prompt","text":"<pre><code>Create a p5.js sketch that demonstrates loading a\nlist of vertices and edges from a JSON file.\nThe sketch uses a canvas of 400x400.\nCreate a sample JSON file that has a list of\nthe top largest metro areas in the US.\nPosition each city at a reasonable location\non the canvas and connect each city to three\nother cities with edges.\n</code></pre>"},{"location":"data/json/#sample-json-data","title":"Sample JSON Data","text":"<p>You can click on the \"Right Arrow\" icon in the p5.js editor to show the list of files in the p5.js application. It will also allow you to edit the JSON file.</p> <p></p> <pre><code>{\n  \"cities\": [\n    { \"name\": \"New York\", \"x\": 350, \"y\": 100 },\n    { \"name\": \"Los Angeles\", \"x\": 100, \"y\": 350 },\n    { \"name\": \"Chicago\", \"x\": 200, \"y\": 150 },\n    { \"name\": \"Houston\", \"x\": 150, \"y\": 250 },\n    { \"name\": \"Phoenix\", \"x\": 80, \"y\": 120 }\n    // Add more cities as needed\n  ],\n  \"edges\": [\n    { \"from\": \"New York\", \"to\": \"Los Angeles\" },\n    { \"from\": \"New York\", \"to\": \"Chicago\" },\n    { \"from\": \"Los Angeles\", \"to\": \"Houston\" },\n    { \"from\": \"Chicago\", \"to\": \"Phoenix\" }\n    // Add more edges as needed\n  ]\n}\n</code></pre> <p>Warning</p> <p>Always check the exact syntax when generative AI systems generate sample data.  They tend to add a trailing common to a list of items.  This is a syntax error and the JSON loader will not give you a clue where the error is.  Use a JSON syntax validator whenever possible.</p>"},{"location":"data/json/#sample-p5js-sketch","title":"Sample p5.js Sketch","text":"<pre><code>// demo of loading graph data from a JSON file\nlet graphData;\n\nfunction preload() {\n  graphData = loadJSON('cities.json'); // Make sure to replace with your actual JSON file name\n}\n\nfunction setup() {\n  createCanvas(400, 400);\n  noLoop();\n}\n\nfunction draw() {\n  background(255);\n\n  // Check if the data is loaded\n  if (graphData) {\n    // Draw the cities\n    fill(0);\n    graphData.cities.forEach(city =&gt; {\n      fill('blue');\n      circle(city.x, city.y, 20);\n      fill('black');\n      text(city.name, city.x + 12, city.y + 4);\n    });\n\n    // Draw the edges\n    stroke('black');\n    strokeWeight(3);\n    graphData.edges.forEach(edge =&gt; {\n      let fromCity = graphData.cities.find(city =&gt; city.name === edge.from);\n      let toCity = graphData.cities.find(city =&gt; city.name === edge.to);\n      line(fromCity.x, fromCity.y, toCity.x, toCity.y);\n    });\n  } else {\n    fill('black');\n    text(\"Loading data...\", 10, height / 2);\n  }\n}\n</code></pre> <p>Note that the following line:</p> <pre><code>graphData = loadJSON('cities.json');\n</code></pre> <p>Needs to be customized for your application.  In general, we will create applications that load test data from a file called <code>graph.json</code>.</p> <p>That JSON file has two components: nodes and edges. The nodes and edges each contain an array of objects. We will use the following format:</p> <pre><code>{\n  \"nodes\": [\n    { \"name\": \"Node 1\", \"x\": 100, \"y\": 100 },\n    { \"name\": \"Node 2\", \"x\": 200, \"y\": 200 },\n    { \"name\": \"Node 3\", \"x\": 100, \"y\": 300 }\n  ],\n  \"edges\": [\n    { \"from\": \"Node 1\", \"to\": \"Node 2\", \"weight\": 10 },\n    { \"from\": \"Node 2\", \"to\": \"Node 3\", \"weight\": 20 },\n    { \"from\": \"Node 3\", \"to\": \"Node 1\", \"weight\": 30 }\n  ]\n}\n</code></pre>"},{"location":"data/json-std/","title":"JSON Graph Standard","text":""},{"location":"data/json-std/#node-standards","title":"Node Standards","text":"<p>An array of <code>nodes</code></p> <ol> <li>id - unique integer</li> <li>name - label</li> <li>x and y (if needed)</li> </ol>"},{"location":"data/json-std/#edges","title":"Edges","text":"<ol> <li>source - integer reference to a node id</li> <li>target - integer reference to a node id</li> <li>weight - integer of the weight</li> </ol> <pre><code>{\n  \"nodes\": [\n    { \"id\": 1, \"name\": \"Node 1\", \"x\": 100, \"y\": 100 },\n    { \"id\": 1, \"name\": \"Node 2\", \"x\": 200, \"y\": 200 },\n    { \"id\": 1, \"name\": \"Node 3\", \"x\": 100, \"y\": 300 }\n  ],\n  \"edges\": [\n    { \"source\": 1, \"target\": 2, \"weight\": 10 },\n    { \"source\": 2, \"target\": 3, \"weight\": 20 },\n    { \"source\": 3, \"target\": 1, \"weight\": 30 }\n  ]\n}\n</code></pre> <p>https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/data_network.json</p>"},{"location":"data/skos/","title":"SKOS","text":"<p>SKOS Demo</p> <p>SKOS 2</p>"},{"location":"data/us-cities/","title":"Generating Data for US Cities","text":"<p>Understanding graph algorithms such as the traveling salesperson algorithm requires we create a realistic graph that represents geo-locations.  But manually typing the names of cities and their longitude and latitude is a slow and painful process.  But generative AI can help us. It is very good at generating realistic-looking synthetic data.</p> <p>In this example, we will generate a small geospatial dataset we will use in this course for demonstrating graph algorithms.  We chose a dataset that we know is referenced frequently on the web: large US cities.</p>"},{"location":"data/us-cities/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a table of the top 20 metro areas in the US.  Add one row in the table for each metro area. Create the following columns:\n\n1. Name of the largest city in the metro area\n2. Population\n3. Longitude\n4. Latitude\n</code></pre> <p>You will note that we didn't really need seven digits of precision, but we can ask ChatGPT to reduce the precision later.</p>"},{"location":"data/us-cities/#sample-table-generate-by-chatgpt","title":"Sample Table Generate by ChatGPT","text":"Rank Metropolitan Area Population Longitude Latitude 1 New York-Newark-Jersey City 19,216,182 -74.0060\u00b0 40.7128\u00b0 2 Los Angeles-Long Beach-Anaheim 13,214,799 -118.2437\u00b0 34.0522\u00b0 3 Chicago-Naperville-Elgin 9,458,539 -87.6298\u00b0 41.8781\u00b0 4 Dallas-Fort Worth-Arlington 7,573,136 -96.7970\u00b0 32.7767\u00b0 5 Houston-The Woodlands-Sugar Land 7,122,240 -95.3698\u00b0 29.7604\u00b0 6 Washington-Arlington-Alexandria 6,280,487 -77.0369\u00b0 38.9072\u00b0 7 Miami-Fort Lauderdale-Pompano Beach 6,166,488 -80.1918\u00b0 25.7617\u00b0 8 Philadelphia-Camden-Wilmington 6,102,434 -75.1652\u00b0 39.9526\u00b0 9 Atlanta-Sandy Springs-Alpharetta 6,018,744 -84.3863\u00b0 33.7490\u00b0 10 Phoenix-Mesa-Chandler 4,948,203 -112.0740\u00b0 33.4484\u00b0 11 Boston-Cambridge-Newton 4,873,019 -71.0589\u00b0 42.3601\u00b0 12 San Francisco-Oakland-Berkeley 4,731,803 -122.4194\u00b0 37.7749\u00b0 13 Riverside-San Bernardino-Ontario 4,650,631 -117.3755\u00b0 34.1083\u00b0 14 Detroit-Warren-Dearborn 4,326,442 -83.0458\u00b0 42.3314\u00b0 15 Seattle-Tacoma-Bellevue 3,979,845 -122.3321\u00b0 47.6062\u00b0 16 Minneapolis-St. Paul-Bloomington 3,640,043 -93.2650\u00b0 44.9778\u00b0 17 San Diego-Chula Vista-Carlsbad 3,338,330 -117.1611\u00b0 32.7157\u00b0 18 Tampa-St. Petersburg-Clearwater 3,194,831 -82.5415\u00b0 27.9506\u00b0 19 Denver-Aurora-Lakewood 2,963,821 -104.9903\u00b0 39.7392\u00b0 20 St. Louis 2,803,707 -90.1994\u00b0 38.6270\u00b0 <p>We also can ask ChatGPT to reformat this table as a JSON file for download.  This is the type of file format we will use in our other demos.</p> <p>Caution</p> <p>ChatGPT frequently will add an extra comma to the end of a record set.  This will cause a load error.  We suggest you view the JSON file in a tool that checks syntax or use a JSON syntax checker.</p> <p>Run the US Cities Map MicroSim Edit</p> <p>ChatGPT Dialog</p>"},{"location":"data/us-cities/#example-of-reading-json-file","title":"Example of Reading JSON File","text":"<p>Demo of JSON Read MicroSim Edit MicroSim</p>"},{"location":"lessons/","title":"Graph Algorithms Lessons","text":"<p>This section of the website has a list of lessons that are used in building your graph courses.</p> <p>We begin with a lesson that introduces basic graph terminology and then proceed through different algorithms such as search, path-finding, centrality, influence ranking, matching, clustering and community detection.</p>"},{"location":"lessons/#graph-algorithms-by-type","title":"Graph Algorithms By Type","text":"<ol> <li> <p>Search Algorithms: These algorithms explore graphs, either for general exploration or to find a particular node.</p> <ul> <li>Depth-First Search (DFS)</li> <li>Breadth-First Search (BFS)</li> </ul> </li> <li> <p>Pathfinding Algorithms: Focused on finding the shortest path or paths between nodes in a graph.</p> <ul> <li>Dijkstra's Algorithm</li> <li>A* Search Algorithm</li> <li>Bellman-Ford Algorithm</li> </ul> </li> <li> <p>Centrality Measures: These algorithms help in identifying the most important vertices within a graph.</p> <ul> <li>Degree Centrality</li> <li>Betweenness Centrality</li> <li>Eigenvector Centrality</li> <li>Closeness Centrality</li> </ul> </li> <li> <p>Influence Ranking Algorithms: Useful in networks to rank nodes based on their influence.</p> <ul> <li>PageRank</li> <li>HITS Algorithm (Hyperlink-Induced Topic Search)</li> <li>Katz Centrality</li> </ul> </li> <li> <p>Matching Algorithms: Aimed at solving matching problems in bipartite graphs or networks.</p> <ul> <li>Stable Marriage Problem (Gale-Shapley Algorithm)</li> <li>Hungarian Algorithm for Assignment Problems</li> <li>Maximum Bipartite Matching</li> </ul> </li> <li> <p>Entity Resolution Algorithms: These algorithms identify and merge data that correspond to the same real-world entity.</p> <ul> <li>Levenshtein Distance (for string matching)</li> <li>Jaro-Winkler Distance</li> <li>Record Linkage Techniques</li> </ul> </li> <li> <p>Graph Clustering and Community Detection: Focused on partitioning graphs into clusters or communities, often used in social network analysis.</p> <ul> <li>K-means Clustering (applied to graph data)</li> <li>Louvain Method for Community Detection</li> <li>Girvan-Newman Algorithm</li> </ul> </li> </ol> <p>Each of these categories encompasses a set of algorithms tailored to specific types of problems and analysis within graph theory. It's important to note that some algorithms might fall into more than one category depending on their application and interpretation.</p>"},{"location":"lessons/01-graph-terminology/","title":"Graph Terminology","text":"<p>In this course, we will be covering graph algorithms.  Before we dive into these algorithms we need to define some terms so we use them consistently in this course.</p>"},{"location":"lessons/01-graph-terminology/#what-is-a-graph","title":"What is a Graph?","text":"<p>A graph is a collection of nodes and edges. The nodes usually represent nouns in our world (People, Places and Things) and the edges represent relationships between these things.</p> <p>In our graph model, both nodes and edges can have properties associated with them.  This is called a labeled property graph model or LPG.</p> <p>The image above is a simple directional typed graph. Each node has a type (User, Order, Product, Location, ProductType) and each edge has a direction.  In the LPG model edges have types, but for simplicity, the edge types are not shown in this diagram.</p>"},{"location":"lessons/01-graph-terminology/#the-lpg-model","title":"The LPG Model","text":"<p>The term \"Labeled Property Graph Model\" (LPG) refers to a specific type of graph database model that is primarily used for storing and managing complex networks of data. This model is characterized by the following key features:</p> <ol> <li> <p>Vertices (Nodes): These are the fundamental entities in the graph. Each vertex represents an object, such as a person, place, or thing. Vertices can have labels that denote their types or roles in the graph.</p> </li> <li> <p>Edges (Relationships): Edges are the connections between vertices. They represent the relationships between entities. Like vertices, edges can also have labels that describe the nature or type of the relationship.</p> </li> <li> <p>Properties: Both vertices and edges can have properties, which are key-value pairs that store additional information about the entities or relationships. For example, a vertex representing a person might have properties like name, age, and email.</p> </li> <li> <p>Direction: The edges in a labeled property graph are directed. This means they have a start vertex and an end vertex, indicating the direction of the relationship.</p> </li> <li> <p>Multiplicity: The model allows for multiple relationships of the same or different types between a pair of vertices, providing a rich structure for representing complex networks.</p> </li> </ol> <p>The Labeled Property Graph Model is widely used in various applications such as social networks, recommendation systems, and fraud detection because of its flexibility and the rich, semi-structured nature of the data it can represent. It is particularly adept at handling interconnected data and complex queries involving deep relationships.</p>"},{"location":"lessons/01-graph-terminology/#vertex-or-node","title":"Vertex or Node","text":"<p>A vertex (plural: vertices) is a fundamental data structure used in graph theory to represent an abstract concept of a point or a location within a graph. In simpler terms, a vertex is a node or a dot in the graph. Each vertex can have properties like a name, a value, or a color, but at its core, it serves as a basic entity that can be connected to other vertices.</p> <p>In this course, we will represent vertices graphically with a circle.  The circles will frequently have a label on them to indicate their type or their name.</p>"},{"location":"lessons/01-graph-terminology/#usage-of-vertices-in-graphs","title":"Usage of Vertices in Graphs:","text":"<ol> <li> <p>Representation: Vertices are used to represent entities or objects. For example, in a social network graph, each vertex could represent a person; in a city map graph, each vertex could represent an intersection.</p> </li> <li> <p>Connections and Relationships: Vertices are connected by edges. These edges represent the relationships or pathways between the vertices. For instance, in a road network graph, edges would represent roads connecting intersections (vertices).</p> </li> <li> <p>Problem Solving: In algorithmic graph theory, vertices are crucial in formulating and solving problems like pathfinding, network flow, or matching problems. Algorithms are designed to manipulate and traverse these vertices to find solutions.</p> </li> <li> <p>Network Analysis: Graphs are extensively used in network analysis, where vertices play a role in representing elements in networks such as computer, biological, or social networks. Analysis might focus on the relationships between these vertices, their centrality, or clustering within the graph.</p> </li> <li> <p>Data Structuring: In computer science, graphs are used to structure data. Vertices in these graphs can represent data points, and the connections (edges) can represent the relationship or interaction between these data points.</p> </li> <li> <p>Visual Representation: Vertices, along with edges, provide a visual way to represent complex systems or networks, making it easier to understand and analyze their structure and properties.</p> </li> </ol> <p>In summary, vertices are essential in graph theory for representing abstract or real-world entities and their interconnections in a wide array of applications ranging from social network analysis to algorithmic problem-solving.</p>"},{"location":"lessons/01-graph-terminology/#edge-relationship-or-link","title":"Edge, Relationship or Link","text":"<p>Edges are the way that we connect things in our graph. In this course, every edge may have its own properties. For example, if a graph represents cities, the edges might contain a property such as \"distance in miles\" between each city pair.</p> <p>We use the convention that relationships each have a type and this type is labeled with an all uppercase name.</p>"},{"location":"lessons/01-graph-terminology/#properties","title":"Properties","text":"<p>Both nodes and edges have a list of properties associated with them.  These properties usually have a type such as a string, a decimal number or a date.</p>"},{"location":"lessons/01-graph-terminology/#directionality","title":"Directionality","text":"<p>Edges may or may not have directionality in our graphs. A distance edge between two cities may not have directionality, but a dependency graph which-says that task B depends on A finishing will have a direction.  We use arrows to indicate direction.</p>"},{"location":"lessons/02-javascript-graph-libs/","title":"JavaScript Graph Libraries","text":"<p>JavaScript libraries for drawing graph networks are essential tools for visualizing complex data structures, relationships, and networked systems. Several libraries stand out due to their features, performance, and ease of use. Here are some of the most popular ones, along with their main strengths and weaknesses:</p> <p>What are the best JavaScript libraries for animating graph algorithms? Let's ask ChatGPT!</p>"},{"location":"lessons/02-javascript-graph-libs/#sample-prompt","title":"Sample Prompt","text":"<pre><code>I am looking for a lightweight JavaScript library for drawing\nnetwork graphs. What are the most popular easy-to-use\nlibraries in this area?\n</code></pre>"},{"location":"lessons/02-javascript-graph-libs/#chatgpt-response","title":"ChatGPT Response","text":"<p>For drawing network graphs in JavaScript, there are several popular and lightweight libraries you can consider. Each of these libraries has its own set of features and strengths, making them suitable for various use cases. Here are some of the most widely used ones:</p> <ol> <li> <p>D3.js: This is one of the most powerful and flexible libraries for creating complex, interactive data visualizations in web browsers. It's not exclusively for network graphs, but it's highly customizable and can create almost any type of data visualization.</p> </li> <li> <p>Cytoscape.js: It's specifically designed for graph-based visualizations and network analysis. It's feature-rich, supporting various graph layouts, styles, and user interactions.</p> </li> <li> <p>Sigma.js: This library is optimized for displaying large network graphs. It's easy to use and can render thousands of nodes smoothly. Sigma.js focuses on the rendering part and is great for interactive network visualizations.</p> </li> <li> <p>Vis.js: Another easy-to-use library for dynamic, browser-based visualization. It's designed to handle large amounts of dynamic data and has simple and flexible APIs for network graphs.</p> </li> <li> <p>Force.js: A smaller, more lightweight option focused on force-directed graph layouts. It's a good choice if you need something simple and aren't looking for a full suite of features.</p> </li> </ol> <p>Each of these libraries has its own strengths, so the best choice depends on your specific requirements, such as the size and complexity of the network graph, the level of interactivity needed, and your personal comfort with the library's API and documentation.</p> <p>But wait.  Will we be able to allow students to add controls to step through the rendering?  Can they work with our other MicroSims? Once again, we can check with ChatGPT.</p>"},{"location":"lessons/02-javascript-graph-libs/#integration-challenges-with-p5js","title":"Integration Challenges with P5.js","text":"<pre><code>You Will any of these libraries work with p5.js?\n</code></pre> <p>Integrating network graph libraries with p5.js depends on the specific requirements of your project and the compatibility of the libraries. p5.js is mainly a canvas drawing library, focusing on creative coding and making coding accessible for artists, designers, educators, and beginners. While p5.js doesn't natively support network graph visualizations, it can be used in conjunction with other JavaScript libraries that do.</p> <p>Among the libraries mentioned earlier:</p> <ol> <li> <p>D3.js: It can be used alongside p5.js, but integration might require careful management, as both libraries are designed to control the entire drawing canvas. D3.js has its own methods for DOM manipulation and drawing, which might conflict with p5.js. However, D3.js's data handling and mathematical functions can be very useful in conjunction with p5.js's drawing capabilities.</p> </li> <li> <p>Cytoscape.js, Sigma.js, Vis.js, and Force.js: These libraries are also primarily canvas-based and might have similar integration challenges as D3.js when used with p5.js. The main issue would be managing the canvas and DOM elements, as both p5.js and these libraries will attempt to control aspects of the page.</p> </li> </ol> <p>For integration:</p> <ul> <li> <p>Separate Canvases: One approach is to use separate canvases for p5.js and the graph library. This way, each library can control its own canvas without interfering with the other.</p> </li> <li> <p>Data Sharing: You can use p5.js for certain parts of your project (like interactive elements or custom visualizations) and the network graph library for graph-related functionality. You would pass data between the two as needed.</p> </li> <li> <p>Custom Integration: For a more seamless integration, you might need to write custom code to handle the interactions between p5.js and the network graph library, ensuring they don't conflict in their rendering or event handling.</p> </li> </ul> <p>In summary, while direct integration of p5.js with these network graph libraries isn't straightforward due to overlapping functionalities, it's certainly possible with some custom coding and careful management of the canvas and DOM elements. The approach would largely depend on the specific requirements of your project and your comfort level with both libraries.</p>"},{"location":"lessons/02-javascript-graph-libs/#findings","title":"Findings","text":"<p>This is a classic case of \"who owns the drawing canvas?\". For doing simple graph drawings, the standard network graph libraries may work fine. But for most of our detailed simulations, we may need fine-grain control of the canvas and the animation process.  Tools like p5.js are ideal for controlling animations.  p5.js allows detailed control of canvas setup, drawing and framerate.  Because p5.js is very popular, generative AI has ample sample programs in its training dataset.</p>"},{"location":"lessons/02-javascript-graph-libs/#listing-of-pros-and-cons","title":"Listing of Pros and Cons","text":""},{"location":"lessons/02-javascript-graph-libs/#prompt-for-pros-and-cons","title":"Prompt for Pros and Cons","text":"<pre><code>What are the most popular JavaScript libraries for drawing graph networks?  For each library, describe their main strengths and weaknesses.\n</code></pre>"},{"location":"lessons/02-javascript-graph-libs/#d3js","title":"D3.js","text":"<p>Strengths:</p> <ul> <li>Versatility: D3.js is incredibly flexible, allowing for the creation of virtually any type of data visualization, including complex graph networks.</li> <li>Control: It offers detailed control over the final appearance and interactivity of the visualization.</li> <li>Community and Resources: It has a large community, extensive documentation, and numerous examples available.</li> </ul> <p>Weaknesses:</p> <ul> <li>Complexity: The flexibility and control come at the cost of a steep learning curve. It can be overkill for simple visualizations.</li> <li>Performance: For very large datasets or extremely complex visualizations, performance can be an issue.</li> </ul>"},{"location":"lessons/02-javascript-graph-libs/#sigmajs","title":"Sigma.js","text":"<p>Strengths:</p> <ul> <li>Optimized for Graphs: Sigma.js is specifically designed for drawing graph networks, making it a go-to choice for these types of visualizations.</li> <li>Performance: It is optimized for handling large datasets smoothly.</li> <li>Extensible: Sigma.js has a plugin architecture, allowing for the addition of custom features and behaviors.</li> </ul> <p>Weaknesses:</p> <ul> <li>Limited to Graphs: Unlike D3.js, Sigma.js is specialized for graph visualizations, which limits its versatility.</li> <li>Documentation: While there is good documentation, it may not be as extensive or as easy to find as D3.js's resources.</li> </ul>"},{"location":"lessons/02-javascript-graph-libs/#cytoscapejs","title":"Cytoscape.js","text":"<p>Strengths:</p> <ul> <li>Rich Feature Set: Cytoscape.js offers a comprehensive set of features for graph analysis and visualization, including layout algorithms, style customization, and interaction capabilities.</li> <li>Integration: It can easily integrate with web applications and has support for exporting and importing in various formats.</li> <li>Performance: It performs well with large networks and offers efficient rendering and layout algorithms.</li> </ul> <p>Weaknesses:</p> <ul> <li>Complexity for Beginners: The wealth of features and options can be daunting for new users.</li> <li>Learning Resources: While there is documentation, beginners may find it challenging to get started without extensive examples.</li> </ul>"},{"location":"lessons/02-javascript-graph-libs/#visjs","title":"Vis.js","text":"<p>Strengths:</p> <ul> <li>Ease of Use: Vis.js is known for its simplicity and ease of use, making it accessible for beginners.</li> <li>Interactivity: It supports interactive visualizations with events and properties that can be customized.</li> <li>Comprehensive: Despite its simplicity, it offers a broad range of visualization types beyond just graphs.</li> </ul> <p>Weaknesses:</p> <ul> <li>Development Status: The core library development has slowed down, which might be a concern for long-term projects.</li> <li>Performance: While it handles medium-sized datasets well, it may struggle with very large or complex networks.</li> </ul>"},{"location":"lessons/02-javascript-graph-libs/#threejs","title":"Three.js","text":"<p>While not specifically a graph drawing library, Three.js is worth mentioning for its ability to create 3D graph visualizations.</p> <p>Strengths:</p> <ul> <li>3D Visualizations: Allows for the creation of stunning 3D visualizations, including graph networks in a 3D space.</li> <li>Community and Resources: Has a large community and extensive examples and documentation.</li> </ul> <p>Weaknesses:</p> <ul> <li>Indirect Application: Since it's not specifically designed for graphs, creating graph visualizations requires more groundwork.</li> <li>Complexity: Like D3.js, there's a steep learning curve due to its flexibility and depth.</li> </ul> <p>Each of these libraries has its niche, with the choice depending on specific project needs, the complexity of the dataset, and the desired level of customization and interactivity.</p>"},{"location":"lessons/03-deterministic-vs-ml/","title":"Deterministic Algorithms vs. Machine Learning Models","text":"<p>Deterministic Algorithm</p> <p>Definition: A deterministic algorithm is a type of algorithm that, given a particular input, will always produce the same output with a predictable computation process. In deterministic algorithms, each step and decision is specifically defined and does not involve any randomness or probability. The outcome and the state of the system at each stage of the algorithm are entirely predictable based on the input.</p> <p>Example: A common example of a deterministic algorithm is the binary search algorithm. In this algorithm, if you're searching for a specific value within a sorted list, the algorithm divides the list into halves repeatedly to determine whether the target value lies in the left or the right half. This process is repeated until the value is found or the list cannot be subdivided further. The binary search algorithm will always follow the same steps and produce the same result for the same input list and target value.</p> <p>Contrast with Deep Neural Network:</p> <ul> <li>Predictability: Unlike deterministic algorithms, deep neural networks (DNNs) are not always predictable. DNNs, especially those involving randomness in initialization or training, can produce different outputs even with the same input.</li> <li>Decision Process: In deterministic algorithms, the decision-making process is explicit and follows predefined rules. In contrast, DNNs make decisions based on learned patterns from data, and the exact decision process can be opaque (often referred to as the \"black box\" issue).</li> <li>Adaptability: DNNs can adapt and improve their performance as they are exposed to more data, learning from the data's patterns and complexities. Deterministic algorithms do not have this adaptive capability; they perform consistently regardless of the amount or type of data processed.</li> <li>Complexity and Data Handling: DNNs are typically used for more complex tasks that involve large amounts of data and require the ability to identify patterns and make predictions, such as image and speech recognition. Deterministic algorithms are often used for more straightforward, rule-based tasks.</li> </ul> <p>In summary, while deterministic algorithms are predictable and follow a clear set of rules, deep neural networks are adaptive, capable of learning from data, and often used for more complex pattern recognition tasks, albeit with less predictability and transparency in their decision-making processes.</p>"},{"location":"lessons/04-temporal-graphs/","title":"Temporal Graph Algorithms","text":"<p>Recent developments in temporal graph machine learning have focused on extending the capabilities of Graph Neural Networks (GNNs) to dynamic graphs. Longa (2023) provides a comprehensive overview of the current state-of-the-art, categorizing existing approaches and identifying open challenges. Rossi (2020) introduces Temporal Graph Networks (TGNs), a framework for deep learning on dynamic graphs, which outperforms previous models and is more computationally efficient. Gurevin (2022) proposes a real-time graph learning pipeline that handles updates on a graph in real-time, addressing the challenge of dynamic graph changes. These advancements collectively contribute to the field's progress in handling dynamic graph data.</p>"},{"location":"lessons/04-temporal-graphs/#graph-neural-networks-for-temporal-graphs-state-of-the-art-open-challenges-and-opportunities","title":"Graph Neural Networks for temporal graphs: State of the art, open challenges, and opportunities","text":"<p>Arxiv.org</p> <p>Graph Neural Networks (GNNs) have become the leading paradigm for learning on (static) graph-structured data. However, many real-world systems are dynamic in nature, since the graph and node/edge attributes change over time. In recent years, GNN-based models for temporal graphs have emerged as a promising area of research to extend the capabilities of GNNs. In this work, we provide the first comprehensive overview of the current state-of-the-art of temporal GNN, introducing a rigorous formalization of learning settings and tasks and a novel taxonomy categorizing existing approaches in terms of how the temporal aspect is represented and processed. We conclude the survey with a discussion of the most relevant open challenges for the field, from both research and application perspectives.</p>"},{"location":"lessons/05-model-viewer/","title":"Model Viewer","text":"<p>How would you create a JavaScript application that views a graph LPG data model using a specific library such as the sigma.js library?  This is a complex task that goes beyond the  capabilities of today's large-language models.</p> <p>Here is a sample prompt that decomposes the problem into sections:</p>"},{"location":"lessons/05-model-viewer/#prompt","title":"Prompt","text":"<pre><code>I would like to create a read-only graph network viewer using the sigma.js library.\nThe viewer must be able to do the following:\n\n1. Given a JSON file of vertices and edges,\ndisplay a network graph using a force-directed layout.\n2. The viewer must display the names of the vertices\nand edges.\n3. When the user clicks on a vertex or edge, the properties\nof that vertex or edge must be displayed in an inspector window.\n\nHow would you go about structuring this project?  Break it down\ninto JavaScript functions.  Show your reasoning step-by-step.\n</code></pre>"},{"location":"lessons/05-model-viewer/#summary-of-response","title":"Summary of Response","text":"<ol> <li>Setup the HTML (load libraries and display regions)<ol> <li>Make the application 800 wide and 600 high</li> <li>Draw the graph network in the left 400</li> <li>Draw the inspector in the right 400</li> </ol> </li> <li>Load and Parson JSON data</li> <li>Initialize the Graph</li> <li>Apply the Force-directed graph algorithm</li> <li>Display Names and Labels</li> <li>Handle Interactivity</li> </ol>"},{"location":"lessons/05-model-viewer/#full-response","title":"Full Response","text":"<p>Creating a read-only graph network viewer with the sigma.js library involves several steps, from parsing the JSON data to visualizing the graph and handling user interactions. Here's a structured approach to developing this project, broken down into JavaScript functions and components:</p>"},{"location":"lessons/05-model-viewer/#step-1-setting-up-the-project-environment","title":"Step 1: Setting Up the Project Environment","text":"<p>First, ensure you have a basic HTML and JavaScript project setup, including sigma.js. You can include sigma.js via a CDN or install it via npm/yarn if you're using a build system like webpack or Parcel.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Graph Network Viewer&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"graph-container\" style=\"width: 800px; height: 600px;\"&gt;&lt;/div&gt;\n    &lt;div id=\"inspector\" style=\"width: 400px; height: 600px; overflow: auto;\"&gt;&lt;/div&gt;\n\n    &lt;!-- Include sigma.js --&gt;\n    &lt;script src=\"path_to_sigma/sigma.min.js\"&gt;&lt;/script&gt;\n    &lt;!-- Your script --&gt;\n    &lt;script src=\"your_script.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"lessons/05-model-viewer/#step-2-loading-and-parsing-json-data","title":"Step 2: Loading and Parsing JSON Data","text":"<p>Create a function to load and parse the JSON file. This file should contain your vertices (nodes) and edges with their properties, including names.</p> <pre><code>function loadGraphData(filePath) {\n    return fetch(filePath)\n        .then(response =&gt; response.json())\n        .then(data =&gt; {\n            return data; // Assuming data is in the format { nodes: [...], edges: [...] }\n        });\n}\n</code></pre>"},{"location":"lessons/05-model-viewer/#step-3-initializing-the-graph","title":"Step 3: Initializing the Graph","text":"<p>Using sigma.js, initialize the graph. You'll need a function that takes the parsed JSON data and adds the nodes and edges to the sigma instance.</p> <pre><code>function initializeGraph(graphData) {\n    const container = document.getElementById('graph-container');\n    const sigmaInstance = new sigma({\n        graph: graphData,\n        container: container,\n        settings: {\n            defaultNodeLabelColor: '#fff',\n            edgeLabelSize: 'proportional',\n            // Add more settings to customize the appearance\n        }\n    });\n\n    sigmaInstance.refresh();\n    return sigmaInstance;\n}\n</code></pre>"},{"location":"lessons/05-model-viewer/#4-applying-force-directed-layout","title":"4. Applying Force-Directed Layout","text":"<p>Sigma.js supports various layouts, including force-directed ones. Depending on the version or plugins you're using, the way to apply a layout might differ. Here, let's assume you have a force-directed layout plugin or functionality available.</p> <pre><code>function applyForceDirectedLayout(sigmaInstance) {\n    // This is highly dependent on the specific sigma.js version or plugins used.\n    // Check the documentation for applying a force-directed layout.\n    // Example (pseudocode):\n    // const forceLayout = new sigma.layouts.forceAtlas2.configure(sigmaInstance, options);\n    // sigma.layouts.startForceAtlas2();\n}\n</code></pre>"},{"location":"lessons/05-model-viewer/#5-displaying-names","title":"5. Displaying Names","text":"<p>To display the names of vertices and edges, ensure your JSON data includes these as properties, and configure sigma.js to display them. This might involve setting the right <code>settings</code> on sigma instance initialization or using a custom rendering function.</p>"},{"location":"lessons/05-model-viewer/#6-handling-clicks-and-displaying-properties","title":"6. Handling Clicks and Displaying Properties","text":"<p>Add event listeners to sigma instances for clicks on nodes and edges. Then, display the properties in the inspector window.</p> <pre><code>javascriptCopy code\n`function setupInteractivity(sigmaInstance) {\n    sigmaInstance.bind('clickNode', function(e) {\n        const node = e.data.node;\n        displayPropertiesInInspector(node);\n    });\n\n    sigmaInstance.bind('clickEdge', function(e) {\n        const edge = e.data.edge;\n        displayPropertiesInInspector(edge);\n    });\n}\n\nfunction displayPropertiesInInspector(element) {\n    const inspector = document.getElementById('inspector');\n    inspector.innerHTML = ''; // Clear previous content\n    Object.keys(element).forEach(key =&gt; {\n        const value = element[key];\n        const div = document.createElement('div');\n        div.textContent = `${key}: ${value}`;\n        inspector.appendChild(div);\n    });\n}\n`\n</code></pre>"},{"location":"lessons/05-model-viewer/#7-bringing-it-all-together","title":"7. Bringing It All Together","text":"<p>Finally, use these functions to load the graph data, initialize the graph with sigma.js, apply the layout, and set up interactivity.</p> <pre><code>javascriptCopy code\n`loadGraphData('path_to_your_json_file.json').then(graphData =&gt; {\n    const sigmaInstance = initializeGraph(graphData);\n    applyForceDirectedLayout(sigmaInstance); // If applicable\n    setupInteractivity(sigmaInstance);\n});\n`\n</code></pre>"},{"location":"lessons/05-model-viewer/#conclusion","title":"Conclusion","text":"<p>This structured approach covers loading and parsing JSON data, initializing the graph with sigma.js, applying a force-directed layout, and handling user interactions. It's important to adapt the pseudocode to your specific version of sigma.js and its available features or plugins. Always refer to the latest sigma.js documentation for detailed guidance on its API and best practices.</p>"},{"location":"lessons/06-data-vis/","title":"Data Visualization","text":"<p>Graph modeling Graph algorithms Graph visualization Graph discovery</p>"},{"location":"lessons/06-data-vis/#data-visualization-graph","title":"Data Visualization Graph","text":"<p>Steps to Repeat:</p> <ol> <li>Go to the Sigma JS Org site or the Sigma Demo</li> <li>Scroll down to the Data Visualization demo</li> <li>Click the full-screen icon in the left side of the viewer </li> <li>On the right, open the \"Clusters\" menu and select Uncheck all on the domians in the right inspector </li> <li>Check only the subset that you would like to discover</li> </ol>"},{"location":"lessons/07-cytoscape/","title":"Cytoscape","text":"<p>Cytoscape is both a JavaScript library and a desktop application for manipulation of graph networks.</p> <p>Demo of Cytoscape - we used GPT-4 to create a sample graph of 20 nodes that are each connected to 2 or 3 other nodes.</p>"},{"location":"lessons/10-rules/","title":"Executing Business Rules In Graph Databases","text":"<p>Graph databases can be highly effective for executing business rules due to their structure and capabilities. Here's how they can be used in this context:</p> <ol> <li> <p>Modeling Complex Relationships: Graph databases excel at handling complex, interrelated data. They can represent intricate business rules that involve multiple entities and their relationships, making it easier to understand and enforce these rules.</p> </li> <li> <p>Flexibility in Rule Definition: Business rules often involve relationships between different entities (like customers, products, and transactions). Graph databases allow for a flexible definition of these rules because they naturally accommodate complex relationships without requiring extensive joins like in relational databases.</p> </li> <li> <p>Efficient Query Performance: When business rules require traversing relationships (like finding all customers who bought a particular set of products and then recommending similar products), graph databases can perform these tasks more efficiently than traditional databases due to their structure.</p> </li> <li> <p>Real-time Insights and Decision Making: Graph databases can provide real-time insights, which is crucial for executing business rules that depend on the current state of data, such as fraud detection or real-time recommendations.</p> </li> <li> <p>Scalability: As the complexity and volume of data grow, graph databases can scale more effectively than traditional databases for certain types of queries, especially those involving deep relationships.</p> </li> <li> <p>Pattern Recognition and Fraud Detection: Business rules often include detecting unusual patterns, which could indicate fraud or other anomalies. Graph databases can efficiently identify these patterns due to their ability to quickly traverse connected data.</p> </li> <li> <p>Data Governance and Compliance: By mapping the relationships and dependencies between various data points, graph databases can help organizations better adhere to business rules and regulations, ensuring compliance.</p> </li> <li> <p>Personalization and Recommendation Engines: For rules that involve personalizing content or recommendations to users, graph databases can dynamically adjust to changes in user behavior or preferences, providing more accurate and timely recommendations.</p> </li> <li> <p>Impact Analysis: When a business rule changes, understanding its impact on various parts of the organization is crucial. Graph databases can help in quickly identifying all affected entities and relationships.</p> </li> <li> <p>Integration with Other Systems: Graph databases can integrate with other systems like Business Intelligence (BI) tools or Machine Learning models, enhancing the capability to execute complex business rules.</p> </li> </ol> <p>By leveraging these capabilities, organizations can implement and enforce complex business rules more effectively, leading to better decision-making, enhanced customer experiences, and improved operational efficiency.</p>"},{"location":"lessons/10-rules/#legacy-rdbmsrules-engines-approaches","title":"Legacy RDBMS/Rules Engines Approaches","text":"<p>Today, many older systems use RDBMS systems that hold organization data.  They also use external services to execute business rules.</p> <p>What is the performance impact of extracting data from a legacy RDBMS and then moving that data to a rules engine running on a remote server and then returning the results to an application?</p> <p>Extracting data from a legacy Relational Database Management System (RDBMS) and moving it to a rules engine on a remote server, then returning the results to an application, involves several steps, each of which can impact performance. Here are the key factors to consider:</p> <ol> <li> <p>Data Extraction Latency: The time it takes to extract data from the legacy RDBMS can be significant, especially if the database is large, not well-indexed, or the queries are complex. This process can be slower if the RDBMS is outdated or not optimized for performance.</p> </li> <li> <p>Network Latency: Transferring data over a network to a remote server introduces network latency. The impact depends on the bandwidth, the distance between the servers, and the network's current load. This can be a significant factor, especially for large volumes of data or in cases where the network is congested or unreliable.</p> </li> <li> <p>Serialization and Deserialization Overhead: Data often needs to be serialized into a format suitable for network transfer and then deserialized back into a format the rules engine can process. This adds computational overhead and can affect performance, particularly for complex or large data structures.</p> </li> <li> <p>Processing Time in the Rules Engine: The complexity of the rules and the efficiency of the rules engine will impact how long it takes to process the data. More complex business logic or a less efficient rules engine can lead to longer processing times.</p> </li> <li> <p>Data Integration and Transformation Costs: If the data format used by the RDBMS is different from what the rules engine requires, there may be additional overhead for data transformation and integration.</p> </li> <li> <p>Return Trip: After processing, the results must be sent back to the original application, again incurring network latency and serialization/deserialization overhead.</p> </li> <li> <p>Concurrency and Load Handling: Both the RDBMS and the rules engine have limits on how much load they can handle concurrently. If either system is overloaded, it can significantly impact performance.</p> </li> <li> <p>Resource Utilization: CPU, memory, and I/O usage on both the legacy RDBMS and the rules engine server can affect the performance. If these resources are not adequately provisioned, it can lead to bottlenecks.</p> </li> <li> <p>Security and Compliance Overhead: Ensuring data security during transfer and processing can introduce additional layers (like encryption), which can impact performance.</p> </li> <li> <p>Error Handling and Retries: In a distributed system, handling errors and retrying operations (in case of network issues or server failures) can further impact performance.</p> </li> </ol> <p>To mitigate these impacts, consider optimizing the data extraction queries, using efficient data serialization formats, ensuring adequate network bandwidth, optimizing the rules engine for performance, and appropriately scaling the hardware and software resources. Additionally, employing techniques like caching, load balancing, and asynchronous processing can help improve overall system performance.</p>"},{"location":"lessons/10-rules/#implementing-rules-as-decision-trees","title":"Implementing Rules as Decision Trees","text":"<p>How can decision trees implement fast rules within a graph database?</p> <p>Implementing fast rules within a graph database using decision trees involves leveraging the strengths of both technologies -- the efficient data relationship management of graph databases and the straightforward, hierarchical decision-making process of decision trees. Here's how this can be achieved:</p> <ol> <li> <p>Modeling Decision Trees as Graphs: Represent each decision tree as a graph structure within the graph database. Nodes in the graph can represent decision points or outcomes, and edges can represent the flow from one decision to the next based on certain criteria.</p> </li> <li> <p>Rule Encoding in Nodes: Store the business rules or criteria at each decision point in the decision tree within the nodes of the graph. These rules can be simple comparisons (like greater than, less than, equal to) or more complex logic.</p> </li> <li> <p>Traversal for Decision Making: Utilize graph traversal algorithms to navigate through the decision tree graph. Starting from the root node, move through the graph based on the outcomes of the rules at each node until you reach a leaf node, which represents the final decision or outcome.</p> </li> <li> <p>Optimizing Graph Structure: Design the decision tree graph in a way that frequently accessed or critical decision paths are optimized for faster traversal. This might involve ordering nodes or creating indexes on certain properties.</p> </li> <li> <p>Caching Frequently Accessed Paths: Implement caching mechanisms for paths in the decision tree that are accessed frequently. This reduces the need to traverse the graph for common decisions, speeding up the rule execution process.</p> </li> <li> <p>Incremental Updates for Real-Time Decision Making: Instead of rebuilding the entire decision tree for every change, make incremental updates to the graph structure as rules change. This approach is more efficient and enables real-time updates to decision logic.</p> </li> <li> <p>Parallel Processing for Complex Trees: If the decision tree is complex, consider parallelizing the traversal process. Graph databases can naturally support parallel processing, allowing different branches of the tree to be evaluated simultaneously.</p> </li> <li> <p>Leveraging Graph Database Query Languages: Use the graph database's query language (like Cypher for Neo4j, Gremlin for Apache TinkerPop-enabled databases) to efficiently implement and query the decision trees.</p> </li> <li> <p>Scalability Considerations: Ensure that the graph database can scale to handle the size and complexity of the decision trees, especially if dealing with a large number of rules or high query volumes.</p> </li> <li> <p>Integrating with External Systems: If rules require data from external systems, consider how this data will be integrated. This might involve periodic syncing or real-time data feeds into the graph database.</p> </li> </ol> <p>By implementing decision trees within a graph database in this manner, businesses can achieve fast, efficient, and dynamic rule processing, which is particularly beneficial for applications that require complex decision-making based on interrelated data.</p>"},{"location":"lessons/20-entity-resolution/","title":"Entity Resolution","text":"<p>Entity resolution is the task of deciding whether two entity descriptions refer to the same real-world entity.</p> <p>According to Wikipedia, Entity Resolution or \"Record Linkage\" is the task of finding records in a data set that refer to the same entity across different data sources (e.g., data files, books, websites, and databases).</p> <p>Entity Resolution is necessary when joining different data sets based on entities that may or may not share a common identifier (e.g., database key, URI, National identification number), which may be due to differences in record shape, storage location, or curator style or preference. A data set that has undergone RL-oriented reconciliation may be referred to as being cross-linked.</p>"},{"location":"lessons/20-entity-resolution/#use-of-machine-learning-to-perform-entity-resolution","title":"Use of Machine Learning to Perform Entity Resolution","text":"<p>In the past, deterministic rules and graph algorithms were used to perform entity resolution.  Since 2020, machine learning and large-language models such as GPT-4 have been used to find the best matches.</p> <p>The site code with papers has an entity resolution leaderboard that tracks the leading machine-learning implementations of these services.</p>"},{"location":"lessons/20-entity-resolution/#vendors","title":"Vendors","text":"<ol> <li>IBM Quality Stage</li> <li>LiveRamp</li> <li>Signal</li> <li>Tapad</li> <li>Amperity</li> <li>Senzing</li> <li>Zeta Global</li> <li>SAS Dataflux</li> <li>FICO</li> <li>Throtle</li> <li>Infutor</li> <li>Merkle</li> <li>Criteo</li> <li>Acxiom</li> <li>Data Ladder</li> <li>Neustar</li> </ol>"},{"location":"lessons/20-entity-resolution/#references","title":"References","text":"<ul> <li>Wikipedia Entity Resolution</li> <li>Entity Matching using Large Language Models</li> </ul>"},{"location":"lessons/30-spectral-graph-theory/","title":"Spectral Graph Theory","text":"<p>Spectral Graph Theory is a branch of mathematics that studies the relationship between the structure of a graph and the properties of its eigenvalues and Eigenvectors. In this theory, the primary focus is on understanding how the spectrum (the set of eigenvalues) of matrices associated with a graph---such as the adjacency matrix, Laplacian matrix, or normalized Laplacian---relates to the graph's structural properties. These matrices encode information about the graph's connections, and their eigenvalues can reveal insights into various graph characteristics.</p>"},{"location":"lessons/30-spectral-graph-theory/#key-concepts-in-spectral-graph-theory","title":"Key Concepts in Spectral Graph Theory","text":"<ol> <li> <p>Graph Matrices:</p> <ul> <li>Adjacency Matrix: Captures which nodes are connected by edges.</li> <li>Laplacian Matrix: Encodes information about connectivity and degree (number of edges) of nodes.</li> <li>Normalized Laplacian: A variation of the Laplacian used in certain applications, especially for regularizing differences in node degrees.</li> <li> <p>Eigenvalues and Eigenvectors:</p> </li> <li> <p>Eigenvalues: These values give insights into the structure and properties of the graph. For instance, the smallest eigenvalue of the Laplacian matrix (usually zero) and its associated eigenvector can tell us if the graph is connected or has multiple components.</p> </li> <li>Eigenvectors: The vectors associated with the eigenvalues help in understanding the clusters or communities in a graph, as well as paths, cycles, and more.</li> <li> <p>Applications:</p> </li> <li> <p>Graph Partitioning: Identifying clusters or communities within a graph.</p> </li> <li>Graph Connectivity: Determining how well connected the graph is; e.g., through Cheeger's inequality, which relates the graph's connectivity to its spectral gap (difference between the smallest non-zero eigenvalue and zero).</li> <li>Random Walks and Diffusion Processes: Analyzing how information, energy, or entities move through the network, which is essential in fields like network science and physics.</li> <li>Machine Learning and Graph Neural Networks: Using spectral properties to embed graphs or design algorithms that utilize graph structure in tasks like node classification, clustering, and semi-supervised learning.</li> </ul> </li> </ol>"},{"location":"lessons/30-spectral-graph-theory/#why-spectral-graph-theory-is-important","title":"Why Spectral Graph Theory is Important","text":"<p>Spectral graph theory provides a toolkit for understanding complex networks, from social networks to biological systems. By analyzing eigenvalues and eigenvectors, researchers and engineers can design algorithms that uncover hidden patterns, enhance clustering, optimize connectivity, and more.</p>"},{"location":"lessons/30-spectral-graph-theory/#eigenvector-of-a-graph","title":"Eigenvector of a Graph","text":"<p>In the context of graph theory, an eigenvector of a graph refers to an eigenvector of a matrix representation of the graph, such as the adjacency matrix or Laplacian matrix. Eigenvectors of a graph capture important structural information and often reveal patterns in how nodes are connected.</p>"},{"location":"lessons/30-spectral-graph-theory/#formal-definition","title":"Formal Definition","text":"<p>For a graph represented by a matrix MMM, an eigenvector v\\mathbf{v}v is a non-zero vector that satisfies the equation:</p> \\[ Mv\\=\u03bbvM \\\\mathbf{v} = \\\\lambda \\\\mathbf{v}Mv\\=\u03bbv \\] <p>where:</p> <ul> <li>MMM is the matrix associated with the graph (like the adjacency matrix or Laplacian matrix),</li> <li>v\\mathbf{v}v is the eigenvector,</li> <li>\u03bb\\lambda\u03bb is the corresponding eigenvalue.</li> </ul>"},{"location":"lessons/30-spectral-graph-theory/#interpreting-eigenvectors-of-graphs","title":"Interpreting Eigenvectors of Graphs","text":"<ol> <li> <p>Adjacency Matrix Eigenvectors:</p> <ul> <li>For an undirected graph with adjacency matrix AAA, eigenvectors of AAA help in identifying clusters or communities within the graph.</li> <li>Large eigenvalues and their corresponding eigenvectors often relate to dense subgraphs or clusters.</li> <li> <p>Laplacian Matrix Eigenvectors:</p> </li> <li> <p>Eigenvectors of the Laplacian matrix LLL provide insight into the graph's connectivity.</p> </li> <li>The Fiedler vector (the eigenvector corresponding to the smallest non-zero eigenvalue of LLL) is particularly useful for partitioning the graph into clusters or communities, as it indicates the natural division points within the graph.</li> <li> <p>Applications in Spectral Clustering and Partitioning:</p> </li> <li> <p>Eigenvectors are often used in spectral clustering, where nodes of the graph are grouped based on the values in certain eigenvectors.</p> </li> <li>In partitioning algorithms, eigenvectors help separate the graph into components or subgraphs that minimize edge cuts or maximize internal cohesion.</li> </ul> </li> </ol>"},{"location":"lessons/30-spectral-graph-theory/#why-eigenvectors-are-useful-in-graphs","title":"Why Eigenvectors are Useful in Graphs","text":"<p>Eigenvectors help to simplify the complex structure of graphs by mapping nodes into a space that reflects their connectivity patterns. This mapping allows for clustering, visualization, and analysis of properties like community structure, network robustness, and pathways, which are critical in applications across physics, computer science, and machine learning.</p>"},{"location":"lessons/list-of-algorithms/","title":"Graph Algorithms","text":"<p>Here are the algorithms we will cover in a 14-week college-level course on graph algorithms.</p>"},{"location":"lessons/list-of-algorithms/#graph-search-algorithms","title":"Graph Search Algorithms","text":"<p>Graph search algorithms are fundamental in computer science and have a wide range of applications across various fields. Here's why graph search, specifically Breadth-First Search (BFS) and Depth-First Search (DFS), is important:</p>"},{"location":"lessons/list-of-algorithms/#versatility-and-applicability","title":"Versatility and Applicability","text":"<p>Graphs are a ubiquitous data structure in computer science, used to model networks, social relationships, geographical maps, and more. Graph search algorithms are essential tools for exploring and processing these structures.</p>"},{"location":"lessons/list-of-algorithms/#foundation-for-other-algorithms","title":"Foundation for Other Algorithms","text":"<p>Many complex algorithms and problems in computer science build upon the principles of BFS and DFS. For instance, algorithms for finding connected components, checking for cycle presence, or solving shortest path problems often start with a graph search.</p>"},{"location":"lessons/list-of-algorithms/#complexity-and-efficiency","title":"Complexity and Efficiency","text":"<p>Both BFS and DFS have relatively simple implementations and efficient runtimes, making them suitable for a wide range of real-world applications where computational resources may be limited.</p>"},{"location":"lessons/list-of-algorithms/#breath-first-search-bfs","title":"Breath-first Search (BFS)","text":"<p>BFS is particularly useful for finding the shortest path on unweighted graphs. This makes it crucial in scenarios where the path with the least number of edges is required, such as in networking (finding the shortest route in a network), social networking (finding degrees of separation between people), and in problem-solving (like puzzles and games).</p> <p>BFS is also used in level-order traversal of trees, a special case of graphs, which is important in many applications including hierarchical data processing.</p>"},{"location":"lessons/list-of-algorithms/#depth-first-search-dfs","title":"Depth-first search (DFS)","text":"<p>DFS is beneficial when exploring as far as possible along each branch before backtracking, making it suitable for scenarios like puzzle-solving (e.g., mazes), pathfinding in games, and in the analysis of network nodes.</p> <p>DFS is easier to implement recursively, especially when the depth of the graph is unknown or the data structure is naturally recursive (like trees).</p> <p>It's also used in topological sorting, finding connected components in a graph, and in algorithms for solving maze and path-finding problems.</p>"},{"location":"lessons/list-of-algorithms/#different-use-cases-for-bfs-and-dfs","title":"Different Use-Cases for BFS and DFS","text":"<p>The choice between BFS and DFS often depends on the specific requirements of the problem. For example, BFS is more suitable in finding the shortest path, while DFS can be more efficient in scenarios where complete traversal of a path is needed before backtracking.</p>"},{"location":"lessons/list-of-algorithms/#theoretical-importance","title":"Theoretical Importance","text":"<p>Understanding BFS and DFS is crucial for grasping fundamental concepts in computer science such as graph theory, complexity theory, and algorithm design. These algorithms provide a clear example of how different approaches to a problem (exploring breadth-first vs. depth-first) can lead to different solutions and efficiencies.</p> <p>In summary, BFS and DFS are critical not only because of their direct applications but also because they lay the groundwork for understanding more complex algorithms and problem-solving strategies in computer science. Their study offers insight into how different approaches can be employed to navigate and process graph structures, each with its unique advantages depending on the application context.</p>"},{"location":"lessons/list-of-algorithms/#path-finding","title":"Path Finding","text":"<p>Pathfinding algorithms in graph theory are designed to find the shortest or most efficient path between two points in a graph. These algorithms are fundamental in various real-world applications:</p>"},{"location":"lessons/list-of-algorithms/#navigation-and-mapping","title":"Navigation and Mapping","text":"<p>In GPS and mapping services, algorithms like Dijkstra's and A* are used to find the shortest or fastest route between locations. This application is critical in driving directions, logistics, and route optimization for delivery services.</p>"},{"location":"lessons/list-of-algorithms/#telecommunications","title":"Telecommunications","text":"<p>Path-finding algorithms help in designing efficient routing of data in communication networks. They optimize the paths that data packets take across the network to minimize latency and maximize throughput.</p>"},{"location":"lessons/list-of-algorithms/#robotics","title":"Robotics","text":"<p>In robotics, these algorithms are used for navigation and obstacle avoidance. Robots, including autonomous vehicles, use pathfinding to move from one point to another while avoiding obstacles.</p>"},{"location":"lessons/list-of-algorithms/#game-development","title":"Game Development","text":"<p>In video games, pathfinding algorithms enable characters to navigate through the game world. Algorithms like A* are popular for their efficiency and ability to handle complex, dynamic environments.</p>"},{"location":"lessons/list-of-algorithms/#network-analysis","title":"Network Analysis","text":"<p>Pathfinding is used in analyzing social networks, identifying influential nodes, or finding the shortest communication paths between individuals in a network.</p>"},{"location":"lessons/list-of-algorithms/#urban-planning-and-transportation","title":"Urban Planning and Transportation","text":"<p>Pathfinding algorithms assist in optimizing traffic flow, designing public transportation networks, and planning urban layouts.</p>"},{"location":"lessons/list-of-algorithms/#biological-and-chemical-research","title":"Biological and Chemical Research","text":"<p>In bioinformatics, these algorithms help in understanding protein folding pathways, and genetic networks, and in the mapping of neural connections.</p>"},{"location":"lessons/list-of-algorithms/#supply-chain-and-logistics","title":"Supply Chain and Logistics","text":"<p>Optimizing routes for transportation of goods, reducing costs, and improving delivery times.</p> <p>Each of these applications leverages the fundamental principle of finding an optimal path in a graph, highlighting the wide-reaching impact and importance of pathfinding algorithms in both the digital and physical worlds.</p>"},{"location":"lessons/list-of-algorithms/#pagerank","title":"PageRank","text":"<p>Could the patent on a single really be worth 350 million dollars?  Yes it can!  When Larry Page was a student at Stanford he created the PageRank algorithm for predicting how high a page should be ranked in a search result.  The patent, which was owned by Stanford was licensed to Google for stock.  When Google went public the stock was valued at $350 million!</p>"},{"location":"lessons/list-of-algorithms/#minimum-spanning-tree-mst-algorithms","title":"Minimum Spanning Tree (MST) Algorithms","text":"<p>Algorithms like Kruskal's and Prim's are essential in understanding how to connect all nodes in a graph with the minimum total weight. This concept is crucial in network design, such as in telecommunications, where minimizing the cost of laying out cables is important.</p>"},{"location":"lessons/list-of-algorithms/#topological-sorting","title":"Topological Sorting","text":"<p>This algorithm is vital for understanding dependencies. It's used in scenarios like task scheduling and course prerequisite planning. It helps students understand how to sequence activities in the presence of dependencies.</p>"},{"location":"lessons/list-of-algorithms/#strongly-connected-components-scc","title":"Strongly Connected Components (SCC)","text":"<p>Algorithms like Kosaraju's or Tarjan's SCC algorithms are crucial in understanding the connectivity in directed graphs. They have applications in social network analysis, web crawling, and more.</p>"},{"location":"lessons/list-of-algorithms/#network-flow-and-max-flow-algorithms","title":"Network Flow and Max Flow Algorithms","text":"<p>Algorithms like Ford-Fulkerson and Edmonds-Karp are fundamental in understanding flow through a network. These are highly applicable in areas such as resource allocation, transportation networks, and even in solving bipartite matching problems.</p>"},{"location":"lessons/list-of-algorithms/#dijkstras-algorithm-for-shortest-paths","title":"Dijkstra's Algorithm for Shortest Paths**:","text":"<p>While you've mentioned shortest path algorithms, Dijkstra's algorithm specifically is a cornerstone in graph theory, essential for understanding weighted graph traversal.</p>"},{"location":"lessons/list-of-algorithms/#bellman-ford-algorithm","title":"Bellman-Ford Algorithm","text":"<p>This is another shortest path algorithm that unlike Dijkstra's, can handle negative edge weights and can detect negative cycles in graphs.</p>"},{"location":"lessons/list-of-algorithms/#dynamic-programming-on-graphs","title":"Dynamic Programming on Graphs","text":"<p>Covering examples of how dynamic programming can be applied to solve complex graph problems like shortest paths, traveling salesman problem, etc.</p>"},{"location":"lessons/list-of-algorithms/#graph-coloring-and-scheduling","title":"Graph Coloring and Scheduling","text":"<p>This includes algorithms for coloring nodes in a graph, an important concept in scheduling problems, map coloring, and solving Sudoku-like puzzles.</p>"},{"location":"lessons/list-of-algorithms/#advanced-topics-in-graph-theory","title":"Advanced Topics in Graph Theory","text":"<p>Depending on the pace of the course and the interest of the students, you might delve into more advanced or specialized topics like Eulerian and Hamiltonian Paths, Graph Isomorphism, and Spectral Graph Theory.</p> <p>Including these topics will provide a comprehensive understanding of the breadth and depth of graph algorithms. They each have unique applications and illustrate different aspects of problem-solving using graph theory. This breadth will not only equip your students with the necessary theoretical knowledge but also prepare them for practical applications in various fields like computer networks, operational research, social network analysis, and more.</p>"},{"location":"lessons/lpg/","title":"Native Labeled Property Graphs","text":"<p>Native labeled property graphs are a specific type of data structure used primarily in graph databases. They are designed to efficiently store and query data that is inherently graph-like, such as social networks, recommendation systems, and other complex interconnected data.</p>"},{"location":"lessons/lpg/#what-are-native-labeled-property-graphs","title":"What are Native Labeled Property Graphs?","text":"<ul> <li> <p>Structure: These graphs are composed of nodes and edges (relationships). Each node and edge can have a label that defines its type or role. Additionally, both nodes and edges can possess a set of properties (key-value pairs) that hold relevant data.</p> </li> <li> <p>Native Storage: The term \"native\" implies that the data is stored in a way that naturally fits a graph structure. Unlike non-native graph storage, native graph databases are optimized for traversability.</p> </li> <li> <p>Traversal Using Pointers: In native labeled property graphs, nodes and edges are usually stored in such a way that they contain direct references (pointers) to adjacent nodes and edges. This makes traversing the graph (i.e., moving from one node to its connected nodes) highly efficient.</p> </li> </ul>"},{"location":"lessons/lpg/#implementation-with-pointer-traversal","title":"Implementation with Pointer Traversal","text":"<ul> <li> <p>Pointer-based Storage: Each node in the graph has pointers that directly reference its neighboring nodes or connected edges. Similarly, edges point back to the nodes they connect.</p> </li> <li> <p>Efficiency in Traversal: This direct referencing allows for fast and efficient traversal operations, as the database can quickly navigate through the graph structure without needing to perform expensive search operations.</p> </li> <li> <p>Optimization for Graph Operations: This method is particularly optimized for typical graph operations like finding shortest paths, neighbors, or specific patterns within the graph.</p> </li> </ul>"},{"location":"lessons/lpg/#comparison-to-rdbms-storage-of-graphs","title":"Comparison to RDBMS Storage of Graphs","text":"<ul> <li> <p>RDBMS Approach: In a traditional relational database management system (RDBMS), graphs are often stored in tables, with separate tables for nodes and edges. Relationships are established using foreign keys.</p> </li> <li> <p>Performance Issues: This approach can be less performant for graph operations because:</p> <ul> <li>Join Operations: Traversing the graph typically requires multiple join operations between tables, which can be computationally expensive, especially for large and complex graphs.</li> <li>Non-Native Structure: Relational databases are not inherently designed for graph-like queries, leading to inefficiencies in handling deeply connected data.</li> <li>Scalability Concerns: As the size and complexity of the graph grow, the performance of RDBMS in handling graph operations tends to degrade more rapidly compared to native graph databases.</li> </ul> </li> </ul> <p>In summary, native labeled property graphs are optimized for graph data and operations, offering significant performance benefits, especially for complex and deeply interconnected datasets. They are contrasted with RDBMS systems, which, while versatile, often struggle with the demands of graph processing due to their non-native handling of graph structures and reliance on join operations.</p>"},{"location":"library-analysis/","title":"JavaScript Library Analysis","text":""},{"location":"library-analysis/#demos","title":"Demos","text":"<ol> <li>D3 Demo</li> <li>Vis Demo</li> <li>Sigma Demo</li> <li>Cytoscape</li> </ol>"},{"location":"library-analysis/#sample-gpt-prompt","title":"Sample GPT Prompt","text":"<pre><code>You are an expert at understanding the tradeoffs of using various\nJavascript libraries to display graph algorithms and show complex\ngraph data models. There are several JavaScript libraries we are\nconsidering for generating graph network diagrams for complex\ngraph models. Features such as the ability to cluster subgraphs\nare critical. We are considering the following libraries and we\nwould like your advise on what the pros and cons of each library\nare. Here is a begging list: \n\n1. D3.js \n2. Vis.js \n3. Signma.js \n4. Cytoscape.js \n\nAre there any other libraries we should consider?\n</code></pre>"},{"location":"library-analysis/#chatgpt-o1-preview-response","title":"ChatGPT o1-preview Response","text":"<p>When considering JavaScript libraries for generating graph network diagrams,  especially for complex graph models and clustering subgraphs, here's a breakdown of the four libraries you're evaluating:</p>"},{"location":"library-analysis/#option-1-d3js","title":"Option 1: D3.js","text":""},{"location":"library-analysis/#pros-of-d3js","title":"Pros of D3.js","text":"<ul> <li>Highly customizable: D3.js is a powerful library for data visualization, giving you low-level control over how graphs are displayed.</li> <li>Extensible: It's possible to create almost any kind of graph layout with D3, including force-directed layouts.</li> <li>Large community and documentation: Due to its popularity, there's a vast amount of resources, tutorials, and examples available.</li> <li>Wide variety of layout algorithms: You can implement anything from basic bar charts to highly interactive network visualizations.</li> </ul>"},{"location":"library-analysis/#cons-of-d3js","title":"Cons of D3.js","text":"<ul> <li>Steep learning curve: Its flexibility comes at the cost of complexity; you need to write a lot of custom code for anything beyond basic layouts.</li> <li>Performance: For very large datasets (more than a few thousand nodes/edges), D3 may start to slow down, especially on interactive operations.</li> <li>Clustering: While possible, clustering is not a built-in feature and requires additional development effort to implement.</li> </ul>"},{"location":"library-analysis/#option-2-visjs","title":"Option 2: Vis.js","text":""},{"location":"library-analysis/#pros-of-visjs","title":"Pros of Vis.js","text":"<ul> <li>Easy to use: Vis.js provides higher-level APIs, making it easier to get started with graph visualizations.</li> <li>Rich interactivity: Built-in support for panning, zooming, and interactions like clicking and dragging nodes.</li> <li>Performance: Better suited for medium-sized graphs (~10,000 nodes/edges) with good built-in layouts like force-directed graphs.</li> <li>Clustering: Vis.js has native support for clustering nodes, which is a key feature you mentioned.</li> </ul>"},{"location":"library-analysis/#cons-of-visjs","title":"Cons of Vis.js","text":"<ul> <li>Less customizable: Although Vis.js is more accessible than D3, it's less flexible if you need highly customized layouts or interactions.</li> <li>Limited scalability: While it handles medium-sized graphs well, it might struggle with very large graphs in comparison to other libraries.</li> </ul>"},{"location":"library-analysis/#option-3-sigmajs","title":"Option 3: Sigma.js","text":""},{"location":"library-analysis/#pros-of-sigmajs","title":"Pros of Sigma.js","text":"<ul> <li>Built for graph visualizations: Sigma.js is specifically designed for network graphs, so it provides a more optimized experience than general-purpose libraries.</li> <li>Performance: It's optimized for large-scale graphs, with good handling of up to 100,000 nodes and edges.</li> <li>Plugins for clustering: Sigma.js has community plugins that can handle clustering and other graph-specific tasks.</li> <li>WebGL support: Sigma leverages WebGL to handle large datasets with smoother performance than libraries based on SVG/HTML5.</li> </ul>"},{"location":"library-analysis/#cons-of-sigmajs","title":"Cons of Sigma.js","text":"<ul> <li>Less general-purpose: Sigma.js focuses specifically on graph visualizations, so it might not be as versatile for other types of visualizations.</li> <li>Steeper learning curve for customization: While it's easier than D3 in some aspects, achieving complex or custom layouts can still require significant effort.</li> <li>Smaller ecosystem: Sigma.js doesn't have the same breadth of community resources and examples as D3.</li> </ul>"},{"location":"library-analysis/#option-4-cytoscapejs","title":"Option 4: Cytoscape.js","text":""},{"location":"library-analysis/#pros-of-cytoscapejs","title":"Pros of Cytoscape.js","text":"<ul> <li>Biological data modeling: Cytoscape is widely used for biological and molecular data, but it works well for any kind of complex network.</li> <li>Powerful graph algorithms: It comes with built-in support for clustering, layouts, and other graph algorithms.</li> <li>Extensibility: Cytoscape.js has many built-in layouts and plugins for specialized use cases like force-directed layouts or clustering algorithms.</li> <li>Performance: Good for medium to large graphs (up to tens of thousands of nodes), with efficient layout and rendering.</li> <li>Great API: The API is well-documented and relatively easy to use compared to libraries like D3.</li> </ul>"},{"location":"library-analysis/#cons-of-cytoscapejs","title":"Cons of Cytoscape.js","text":"<ul> <li>Performance for extremely large datasets: While it handles large graphs well, for extremely large graphs (100,000+ nodes), it may not perform as efficiently as Sigma.js.</li> <li>Less customizable than D3: While easier to use out of the box, Cytoscape.js has less flexibility than D3 when it comes to creating highly custom visualizations.</li> </ul>"},{"location":"library-analysis/#other-libraries-to-consider","title":"Other Libraries to Consider","text":""},{"location":"library-analysis/#graphology","title":"Graphology","text":"<pre><code>-   **Pros:**\n    -   A robust library that works well with graph theory algorithms and data structures, often used in combination with Sigma.js for rendering.\n    -   Extensive support for graph manipulation and graph algorithms.\n-   **Cons:**\n    -   No built-in visualization: It focuses more on graph processing and algorithms, requiring you to integrate it with other libraries like Sigma or Cytoscape for visualization.\n</code></pre>"},{"location":"library-analysis/#networkx-via-pyodide-or-a-python-js-bridge","title":"NetworkX (via Pyodide or a Python-JS bridge)**","text":"<pre><code>-   **Pros:**\n    -   Python library widely used for graph theory and network analysis. If you're already doing analytics in Python, you could consider using NetworkX and displaying visualizations in JavaScript via a Python-JS bridge.\n    -   Extensive algorithms for clustering, pathfinding, and other graph computations.\n-   **Cons:**\n    -   Requires integration with JavaScript, which can make the workflow more complex.\n</code></pre> <ol> <li> <p>Three.js</p> <ul> <li>Pros:<ul> <li>Great for 3D graph visualizations, using WebGL for high-performance rendering of large graphs in 3D space.</li> <li>Good for showcasing multi-dimensional data in a visually appealing manner.</li> </ul> </li> <li>Cons:<ul> <li>Overkill for simple 2D graph visualizations, and might be unnecessary complexity unless you specifically need 3D views.</li> </ul> </li> </ul> </li> </ol>"},{"location":"library-analysis/#recommendations","title":"Recommendations","text":"<ul> <li>For large-scale graphs with good performance and clustering: Sigma.js is a strong contender, especially with its WebGL support.</li> <li>For flexibility and control: D3.js remains unbeatable if you need fine-tuned control over every element of your visualization, though it's harder to use.</li> <li>For easy setup and clustering out-of-the-box: Vis.js is a good choice if you want something quick to implement and with built-in clustering.</li> <li>For biological data or specialized algorithms: Cytoscape.js is a great choice due to its robust clustering and graph-specific algorithms.</li> </ul> <p>The right choice depends on your project's scale, performance needs, and how much customization you want to handle.</p>"},{"location":"library-analysis/cytoscape/","title":"Cytoscape.js","text":"<p>Cytoscape.js a a JavaScript library for displaying graph networks.</p> <p></p> <p>Run the Cytosscape.js Demo HTML JavaScript App.js file</p>"},{"location":"library-analysis/cytoscape/#prompt","title":"Prompt","text":"<pre><code>Create a cytoscape.js application that draws a force-directed graph layout.\nHave the application generate 20 vertices\nand make each vertex be connected to either two or three other vertices.\n</code></pre>"},{"location":"library-analysis/cytoscape/#gtp-4-response","title":"GTP-4 Response","text":"<p>Creating a force-directed graph with Cytoscape.js involves a few steps,  including setting up a basic HTML/CSS/JavaScript environment,  initializing Cytoscape with a configuration object,  defining the graph elements (nodes and edges),  and specifying a layout algorithm. Below is a simple example  application that meets your specifications.</p>"},{"location":"library-analysis/cytoscape/#1-html-boilerplate","title":"1. HTML Boilerplate","text":"<p>First, you need an HTML document to host the graph. This document includes a reference to the Cytoscape.js library.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Force-Directed Graph&lt;/title&gt;\n    &lt;style&gt;\n        #cy {\n            width: 800px;\n            height: 600px;\n            display: block;\n            border: 1px solid black;\n        }\n    &lt;/style&gt;\n    &lt;script src=\"https://unpkg.com/cytoscape@3.19.1/dist/cytoscape.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"cy\"&gt;&lt;/div&gt;\n    &lt;script src=\"app.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"library-analysis/cytoscape/#2-javascript-for-graph-appjs","title":"2. JavaScript for Graph (app.js)","text":"<p>You'll need to create an <code>app.js</code> file with the JavaScript code to generate the graph.  This code initializes Cytoscape with a specified container and  configuration, generates 20 vertices (nodes), and  randomly connects each node to two or three others.</p> <pre><code>document.addEventListener('DOMContentLoaded', function() {\n    let cy = cytoscape({\n        container: document.getElementById('cy'),\n        elements: generateGraphElements(20),\n        style: [\n            {\n                selector: 'node',\n                style: {\n                    'background-color': '#666',\n                    'label': 'data(id)'\n                }\n            },\n            {\n                selector: 'edge',\n                style: {\n                    'width': 3,\n                    'line-color': '#ccc',\n                    'curve-style': 'bezier'\n                }\n            }\n        ],\n        layout: {\n            name: 'cose',\n            idealEdgeLength: 100,\n            nodeOverlap: 20,\n            refresh: 20,\n            fit: true,\n            padding: 30,\n            randomize: false,\n            componentSpacing: 100,\n            nodeRepulsion: 400000,\n            edgeElasticity: 100,\n            nestingFactor: 5,\n            gravity: 80,\n            numIter: 1000,\n            initialTemp: 200,\n            coolingFactor: 0.95,\n            minTemp: 1.0\n        }\n    });\n});\n\nfunction generateGraphElements(vertexCount) {\n    let elements = [];\n    for (let i = 0; i &lt; vertexCount; i++) {\n        elements.push({ data: { id: 'n' + i } });\n    }\n\n    for (let i = 0; i &lt; vertexCount; i++) {\n        let edgeCount = Math.random() &gt; 0.5 ? 2 : 3; // Randomly 2 or 3 edges\n        let connected = new Set();\n        while(connected.size &lt; edgeCount) {\n            let targetIndex = Math.floor(Math.random() * vertexCount);\n            if(targetIndex !== i &amp;&amp; !connected.has(targetIndex)) {\n                elements.push({ data: { source: 'n' + i, target: 'n' + targetIndex } });\n                connected.add(targetIndex);\n            }\n        }\n    }\n\n    return elements;\n}\n</code></pre>"},{"location":"library-analysis/cytoscape/#how-it-works","title":"How It Works","text":"<ul> <li>The HTML file sets up a webpage with a <code>&lt;div&gt;</code> element where the graph will be rendered.</li> <li>The CSS styles define the size of the graph's container and some basic styles for the nodes and edges.</li> <li>The JavaScript (<code>app.js</code>) uses Cytoscape.js to create a graph inside the specified container. It defines a <code>generateGraphElements</code> function to dynamically create nodes and edges. Each node is connected to either two or three other nodes randomly.</li> <li>The graph layout is set to use Cytoscape's <code>cose</code> layout, a force-directed layout algorithm, which positions the nodes in an aesthetically pleasing manner based on their connections.</li> </ul>"},{"location":"library-analysis/cytoscape/#version-2","title":"Version 2","text":"<p>What if we want the label to display within the vertex circle? In Cytoscape this can be done by just changing a few lines of the style element.  This shows that the library has a clear separation of the UI and the back-end model.</p> <p>Run the Cytoscape.js V2 Demo</p>"},{"location":"library-analysis/cytoscape/#prompt_1","title":"Prompt","text":"<p><pre><code>That worked perfectly.  Thank you!\nHow would I modify the program to place the names of \neach node inside the circle of the vertex?\n</code></pre>  ### Response</p> <p>To modify the program so that the names of each node appear inside the circle of the vertex, you need to adjust the <code>style</code> configuration for the nodes in the Cytoscape.js initialization object. Specifically, you will modify the <code>label</code> property within the node style definition to display the node's id (or any other identifier you have assigned to the <code>data</code> of each node). This will place the label inside the node by default.</p> <p>Here is how you can adjust the <code>style</code> section of your Cytoscape.js configuration:</p> <pre><code>style: [\n    {\n        selector: 'node',\n        style: {\n            'background-color': '#666',\n            'label': 'data(id)', // This line configures the label to be the node id\n            'text-valign': 'center', // Vertically center the text inside the node\n            'text-halign': 'center', // Horizontally center the text inside the node\n            'color': '#fff', // Set the text color to white for better visibility\n            'font-size': '10px' // Adjust the font size as needed\n        }\n    },\n    {\n        selector: 'edge',\n        style: {\n            'width': 3,\n            'line-color': '#ccc',\n            'curve-style': 'bezier'\n        }\n    }\n],\n</code></pre> <p>In this modified style configuration, the <code>text-valign</code> and <code>text-halign</code> properties ensure that the text is centered both vertically and horizontally within the node. The <code>color</code> property changes the text color, and <code>font-size</code> can be adjusted to fit the text within the nodes comfortably.</p> <p>Remember, the <code>label</code> property is set to <code>'data(id)'</code>, which means it will display the <code>id</code> of each node. If you're using a different identifier or if you want to display another piece of data, you'll need to adjust this to match the data attribute you wish to display (e.g., <code>'data(name)'</code> if each node's data includes a <code>name</code> attribute).</p> <p>Integrating this style configuration into your Cytoscape.js setup will result in the node names (or ids) being displayed inside the circles of each vertex, enhancing the readability and informational value of the graph.</p>"},{"location":"library-analysis/d3/","title":"D3 Graph Test","text":"<p>Run the 20 Vertex D3 Demo</p> <p>D3 is a general-purpose charting library with a nice set of tools for drawing graph networks.  D3 generates SVG so if you know SVG it is easy to modify.  Because D3 is popular there are many example programs that GPT was trained on and GPT does a good job of generating high-quality D3.js code.</p>"},{"location":"library-analysis/d3/#prompt-1","title":"Prompt 1","text":"<pre><code>Create a d3.js program that displays a network graph\nof 20 vertices that are randomly placed on a 500x500 canvas.  \nMake each node connected to the three nearest nodes.\n</code></pre>"},{"location":"library-analysis/d3/#response-1","title":"Response 1","text":"<p>Creating a D3.js program to display a network graph as described involves several steps. First, you'll need to generate 20 vertices with random positions on a 500x500 canvas. Then, for each vertex, you must find the three nearest vertices and draw lines (edges) to connect them. Here's a basic outline of the code you would write:</p> <ol> <li>Set Up the Environment: Include D3.js in your HTML file.</li> <li>Create Vertices: Generate 20 vertices with random x and y coordinates within the 500x500 canvas.</li> <li>Calculate Nearest Neighbors: For each vertex, calculate the distance to every other vertex and identify the three nearest ones.</li> <li>Draw the Graph: Use D3.js to draw the vertices and the edges connecting each vertex to its three nearest neighbors.</li> </ol> <p>Here's a simplified version of the code you might use:</p> <p>This code sets up a simple D3.js environment, generates random vertices, computes the nearest neighbors, and then uses D3.js to draw the nodes and edges on an SVG canvas. Note that this is a basic implementation and may need optimizations or enhancements based on your specific requirements.</p>"},{"location":"library-analysis/d3/#prompt-force-directed-graph","title":"Prompt Force Directed Graph","text":"<pre><code>OK, that is perfect.  Now can you do the same graph, but use a force-directed graph to adjust the \nspacing of the nodes on the canvas with D3?\n</code></pre> <p>Certainly! To create a force-directed graph using D3.js, you'll modify the previous setup to include D3's force simulation. The force simulation will automatically adjust the positions of the nodes based on the forces you define, such as link forces, charge forces, and centering forces.</p> <p>Here's an updated version of the code to use a force-directed layout:</p> <p>This code introduces a few new concepts:</p> <ol> <li> <p>Force Simulation: We create a D3 force simulation that affects the nodes and links. The forces applied are link force (to keep linked nodes at a certain distance), charge force (to repel nodes from each other), and a centering force (to keep the graph centered in the SVG element).</p> </li> <li> <p>Ticked Function: The simulation runs continuously and updates the positions of nodes and links. The <code>ticked</code> function is called at each tick of the simulation to update the positions of the nodes and links.</p> </li> <li> <p>Drag Behavior: Nodes are made draggable to interact with the graph. The functions <code>dragstarted</code>, <code>dragged</code>, and <code>dragended</code> handle the drag events and update the simulation accordingly.</p> </li> </ol> <p>This code creates an interactive force-directed graph where the nodes are connected to their three nearest neighbors. You can further tweak the parameters of the force simulation to achieve the desired behavior and appearance.</p> <p>Run the D3 Force Demo</p>"},{"location":"library-analysis/d3/#forces-with-sliders","title":"Forces with Sliders","text":"<p>Forces with Sliders Demo</p>"},{"location":"library-analysis/sigma/","title":"Sigma JavaScript","text":"<p>Link to Demo</p>"},{"location":"library-analysis/sigma/#prompt","title":"Prompt","text":"<pre><code>Create a Sigma.js web application that draws a graph network of 20 nodes. \nDraw the network graph on an 800x600 pixel canvas.\nMake each node connected to 2 or 3 other nodes.\nDraw the nodes as blue circles with white text labels.\nDraw the labels for each node within the vertex circle.\n</code></pre>"},{"location":"library-analysis/sigma/#response","title":"Response","text":"<p>Creating a Sigma.js web application to draw a graph network with the specified requirements involves a few steps, including setting up the HTML file, incorporating Sigma.js, and defining the graph data and presentation. Here's a step-by-step guide to achieve this:</p> <ol> <li> <p>HTML File Setup: First, create an HTML file for your web application. This file will include the Sigma.js library and define the canvas where your network graph will be rendered.</p> </li> <li> <p>Sigma.js Integration: Sigma.js can be included in your project either by downloading the library and including it locally or by linking to a CDN (Content Delivery Network). For simplicity, we'll use a CDN.</p> </li> <li> <p>Defining the Graph Data: You'll need to define your nodes and edges. Each node should be connected to 2 or 3 other nodes as per your requirement.</p> </li> <li> <p>Styling Nodes and Labels: Sigma.js allows customizing the appearance of nodes and labels. You'll set the nodes to be blue circles with white text labels.</p> </li> <li> <p>Drawing the Graph: Finally, you'll initialize Sigma.js with your graph data on the specified canvas.</p> </li> </ol> <p>Here is a complete example that you can use as a template:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Network Graph with Sigma.js&lt;/title&gt;\n    &lt;style&gt;\n        #graph-container {\n            width: 800px;\n            height: 600px;\n        }\n    &lt;/style&gt;\n    &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/sigma.js/1.2.1/sigma.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"graph-container\"&gt;&lt;/div&gt;\n    &lt;script&gt;\n        // Initialize sigma:\n        var s = new sigma({\n            renderer: {\n                container: document.getElementById('graph-container'),\n                type: 'canvas'\n            },\n            settings: {\n                defaultNodeColor: '#0000FF',\n                defaultLabelColor: '#FFFFFF',\n                labelThreshold: 0,\n                defaultLabelSize: 14,\n                edgeColor: 'default',\n                defaultEdgeColor: '#ccc'\n            }\n        });\n\n        // Generate nodes and edges:\n        var i, N = 20, E = 30;\n        var g = {\n            nodes: [],\n            edges: []\n        };\n\n        // Add nodes:\n        for (i = 0; i &lt; N; i++) {\n            g.nodes.push({\n                id: 'n' + i,\n                label: 'Node ' + i,\n                x: Math.random(),\n                y: Math.random(),\n                size: 1,\n                color: '#0000FF'\n            });\n        }\n\n        // Add edges:\n        for (i = 0; i &lt; E; i++) {\n            g.edges.push({\n                id: 'e' + i,\n                source: 'n' + (Math.floor(Math.random() * N)),\n                target: 'n' + (Math.floor(Math.random() * N)),\n                size: 1,\n                color: '#ccc'\n            });\n        }\n\n        // Load the graph in sigma:\n        s.graph.read(g);\n\n        // Refresh to display:\n        s.refresh();\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>This code snippet creates a Sigma.js instance targeting a <code>div</code> with an id of <code>graph-container</code>. It randomly generates 20 nodes and connects them with edges, ensuring each node is connected to 2 or 3 other nodes. The nodes are styled as blue circles with white text labels. Adjust the <code>size</code> in the node object to change the node size, and modify the <code>defaultLabelSize</code> in <code>settings</code> for label size adjustments.</p> <p>Please note, this example generates a random graph. To control the exact connectivity (2 or 3 other nodes for each node), you would need to implement a more sophisticated algorithm for generating your nodes and edges.</p> <p>ChatGPT can make mistakes. Consider checking important information.</p>"},{"location":"library-analysis/sigma/#version-2","title":"Version 2","text":"<p>To ensure the labels of the nodes appear directly within the blue vertex circles in Sigma.js, you can adjust the rendering settings and the node size to accommodate the text. Sigma.js automatically positions labels in the center of nodes by default. However, visibility and readability might depend on the node size and the length of the text.</p> <p>Here are some adjustments and tips to ensure labels fit well inside the nodes:</p> <ol> <li> <p>Increase Node Size: Make sure the node size is large enough to contain the text. Sigma.js uses the <code>size</code> attribute of a node to determine its radius. Increase this value to provide more space for the label.</p> </li> <li> <p>Adjust Label Size: If the labels are too large to fit inside the nodes even after adjusting the node size, you can reduce the label size. Use the <code>defaultLabelSize</code> setting for global adjustments or the <code>labelSize</code> attribute on individual nodes for specific adjustments.</p> </li> <li> <p>Shorten Labels: If the labels are too long to fit even with size adjustments, consider using shorter labels or abbreviations.</p> </li> <li> <p>Custom Node Rendering (Advanced): For advanced customization, such as multi-line labels or specific label positioning, you might need to use custom node rendering. This involves writing a custom rendering function that draws the nodes and labels according to your specifications. Sigma.js provides the ability to extend or override the default rendering process, but this requires a good understanding of the library's rendering engine.</p> </li> </ol>"},{"location":"library-analysis/sigma/#examples","title":"Examples","text":"<p>A high-quality graph of data visualization concepts from Wikipedia:  Note the extensive use of icons.</p>"},{"location":"library-analysis/sigma/#references","title":"References","text":"<p>Sigma Homepage</p>"},{"location":"library-analysis/vis/","title":"Demonstration of the vis.js Graph Library","text":"<p>Vis.js examples</p>"},{"location":"library-analysis/vis/#random-layout-prompt","title":"Random Layout Prompt","text":"<pre><code>Please create a vis.js program that displays a network graph of 20 vertices\nthat are randomly placed on a 500x500 canvas.  Have each node\nbe connected to the three nearest nodes.\n</code></pre>"},{"location":"library-analysis/vis/#random-layout-response","title":"Random Layout Response","text":"<p>To create a program using vis.js that displays a network graph of 20 vertices randomly placed on a 500x500 canvas, with each node connected to the three nearest nodes, you will need to follow these steps:</p> <ol> <li> <p>Include vis.js Library: First, make sure to include the vis.js library in your HTML file. You can do this by adding a script tag linking to the vis.js CDN.</p> </li> <li> <p>HTML Structure: Set up a basic HTML structure with a div element where the graph will be rendered.</p> </li> <li> <p>JavaScript Code:</p> <ul> <li>Create Nodes: Generate 20 random nodes, each with a unique id and random x, y coordinates within the 500x500 canvas.</li> <li>Calculate Distances and Create Edges: For each node, calculate the distance to every other node, then connect it to the three nearest nodes.</li> <li>Vis.js Network: Use the vis.js Network module to render the graph.</li> <li>Styling (Optional): Add some CSS to style the canvas or control the appearance of the nodes and edges.</li> </ul> </li> </ol> <p>Here's an example implementation:</p> <p>Run the vis.js Demo</p> <p>This code creates a simple network graph using vis.js, with 20 nodes randomly placed on a 500x500 canvas. Each node is connected to its three nearest neighbors. The graph is static and does not use physics for layout since the positions are fixed and pre-determined.</p>"},{"location":"library-analysis/vis/#force-directed-graph","title":"Force Directed Graph","text":"<p> { width=\"400px\"}</p>"},{"location":"library-analysis/vis/#prompt","title":"Prompt","text":"<pre><code>Can you now create the same graph using\na force directed layout algorithm to space the nodes apart?\n</code></pre> <p>Certainly! To create a network graph using a force-directed layout, you'll modify the JavaScript part of your previous code. In a force-directed layout, nodes are spaced apart naturally based on the physics simulation provided by the vis.js library.</p> <p>You won't need to manually set the <code>x</code> and <code>y</code> coordinates for each node. Instead, you'll let the physics engine handle the positioning. I'll remove the <code>fixed</code> and <code>physics</code> properties from the node creation, and also adjust the options to enable and fine-tune the physics simulation.</p> <p>Here's the updated JavaScript code:</p> <p>Run the vis.js Force Directed Graph Demo</p> <p>In this code:</p> <ul> <li>The <code>nodes</code> array no longer includes specific coordinates for each node. The force-directed layout will determine the positions.</li> <li>The <code>physics</code> options are set to use the <code>barnesHut</code> solver, which is effective for force-directed layouts. The parameters like <code>gravitationalConstant</code>, <code>centralGravity</code>, <code>springLength</code>, etc., are adjusted to control the spacing and the strength of forces in the layout.</li> <li>The <code>stabilizationIterationsDone</code> event listener is added to get the updated positions of the nodes once the network is stabilized.</li> </ul> <p>This setup will create a network graph where nodes are automatically positioned in a visually appealing, spaced-out manner according to the physics simulation.</p>"},{"location":"library-analysis/vis/#vis-force-sliders","title":"Vis Force Sliders","text":""},{"location":"library-analysis/vis/#prompt_1","title":"Prompt","text":"<p>```linenums=\"\" Perfect!  Can you now create a new version with 3 input sliders below the drawing canvas that adjusts the following three parameters:</p> <p>gravitationalConstant centralGravity springLength ```</p> <p>Vis Force Sliders</p>"},{"location":"library-analysis/vis/#breath-first-search-demo","title":"Breath First Search Demo","text":"<p>BFS Demo</p>"},{"location":"sims/","title":"Graph Algorithm MicroSims","text":"<p>A MicroSim is a small program that simulates one of the concepts we are teaching in this course.  We use the powerful p5.js system for doing many of our simulations.</p>"},{"location":"sims/bfs/","title":"Breath First Graph Search","text":"<p>Run Breath First Graph Search MicroSim Note you must click on the Next Button twice to get to level 1 search.</p>"},{"location":"sims/bfs/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Generate a simulation of breadth-first-search on a graph.  \nPlace a green vertex at the center of a network of 20 \nvertices that are placed on the canvas.  \nConnect each vertex to the 2 or 3 closest vertices \nusing edges. For each step in the search, \ncolor the next vertex red.  \nRepeat until all vertices have been visited.\n</code></pre> <p>Link to Transcript</p>"},{"location":"sims/bfs/bfs-vis/","title":"BFS with Vis.js","text":""},{"location":"sims/bfs/bfs-vis/#prompt","title":"Prompt","text":"<pre><code>Generate a simulation of breadth-first-search on a graph. \nFor this simulation, use a canvas that is 800 wide and 600 high. The background is aliceblue.\nThere are three buttons at the bottom of the canvas labeled Next, Previous, Solve and Reset.\nOn start or reset, generate 30 nodes and place them at random location on the 800x600 canvas with a border of 30.\nDraw each of the nodes a circle of size 20. \nConnect each node with and edge to the 2 or 3 closest nodes using edges. \nFor each step in the search, color the next vertex red, orange, yellow, green, blue, purple, pink and then gray.\nRepeat until all vertices have been visited.\nWhen all nodes have been visited display Status: Search Complete in {step} steps.\n</code></pre> <p>Interactive Demo</p>"},{"location":"sims/clustering/","title":"Clustering in Graph Visualization","text":"<p>Network diagrams can quickly get vary complicated.  As the number of vertices gets larger, the network becomes more difficult to view and see key relationships.  We need ways to quickly collapse a group of nodes into a single symbol to reduce complexity.  The primary tool we used to do this is called a graph node cluster.</p>"},{"location":"sims/clustering/#what-is-a-cluster","title":"What is a Cluster?","text":"<p>In graph theory, a cluster in is a composite node that encapsulates a group of related nodes and their connections, formed based on specific criteria, to simplify and enhance the visualization of network diagrams. It serves as an interactive element that can be expanded or collapsed, allowing users to explore the network at different levels of detail while reducing visual complexity.</p>"},{"location":"sims/clustering/#why-use-clusters","title":"Why Use Clusters?","text":"<ul> <li> <p>Representation of Grouped Nodes: A cluster acts as a higher-level abstraction, encapsulating several nodes (and their edges) into one composite node. This helps in visualizing the network at different levels of detail.</p> </li> <li> <p>Formation Criteria: Clusters are formed based on specific conditions or attributes of the nodes, such as shared properties (e.g., a common <code>domain</code> attribute), connectivity patterns, or spatial proximity.</p> </li> <li> <p>Interactivity: Clusters are interactive elements in the network graph. Users can expand (open) a cluster to reveal the individual nodes it contains or collapse them back into a single cluster node. This dynamic interaction allows for exploration of the network at varying granularities.</p> </li> <li> <p>Visual Simplification: By clustering nodes, the network diagram becomes less cluttered, making it easier to understand the overall structure and relationships without being overwhelmed by too many individual elements.</p> </li> <li> <p>Simplifies Complex Networks: Clustering reduces the number of visible nodes and edges, making large and complex networks more manageable and understandable.</p> </li> <li> <p>Improves Performance: By displaying fewer elements, rendering performance is enhanced, leading to smoother interactions, especially with large datasets.</p> </li> <li> <p>Enhances User Experience: Interactive clustering allows users to focus on areas of interest within the network, drilling down into clusters for detailed information or zooming out for an overview.</p> </li> <li> <p>Facilitates Data Analysis: Grouping related nodes helps in identifying patterns, relationships, and hierarchical structures within the network data.</p> </li> </ul>"},{"location":"sims/clustering/#example-domain-clusters","title":"Example: Domain Clusters","text":"<p>In the following example, we will show how different sections of a large graph data model can be grouped into clusters.  We call each grouping of related vertex types a domain.</p> <p>When we build large complex data models, we would ideally like is to be able to group the nodes into domains of similar items.  For example, Location, Address, City, State and Country might all be in the geospatial domain.  Content that is converted into Documents, DocumentSections, DocumentChunks, Entities and Concepts are part of the lexical domain.</p> <ul> <li> <p>Clustering by Attribute (<code>domain</code>): Nodes that share the same <code>domain</code> attribute are merged into a cluster. For instance, all nodes with <code>domain: 'A'</code> are grouped into a cluster labeled 'Cluster A'.</p> </li> <li> <p>Cluster Node Properties: The appearance of the cluster node can be customized (e.g., shape, size, color, label placement) to distinguish it from regular nodes and to convey meaningful information about the grouped nodes.</p> </li> <li> <p>Re-collapsing Clusters: The code allows for clusters to be re-collapsed by double-clicking on any node that was part of an expanded cluster, enhancing the interactive exploration of the network.</p> </li> </ul>"},{"location":"sims/clustering/#lab-1-working-interactive-clustering-examples-with-visjs","title":"Lab 1: Working Interactive Clustering Examples with vis.js","text":"<p>This next section assumes you know about the way that graphs are represented in JSON in the vis.js library.  See out Intro to Vis.js</p> <p>Here is an example of a flattened view of a small graph:</p> <p></p> <p>Note that there are vertices grouped by three letters: \"A\", \"B\" and \"C\". In this lesson we will show you how to group communities of nodes together under a single icon called a cluster. This allows you to quickly focus in on the key nodes in a graph you are concerned with without having the rest of the graph get in the way.</p> <p>In our example, each domain will have a label property so that the software can quickly identify what nodes to cluster together or un-cluster to show internal detail.</p> <p>Here is a high-level clustered view of the above graph network using circles as the grouping icon:</p> <p></p> <p>Here is a demonstration of opening a clustered node:</p> <p>Simple Interactive Clustering Example 1 (expand only)</p> <p>Note that you can drag the cluster around and double click on a cluster to expand the nodes within that cluster.  This first example does not have any way to re-collapse a cluster other than refreshing the entire page.</p> <p>Tip</p> <p>When generating graph vertex-type network diagrams with vis.js, prefer the '''circle''' shape over the '''dot''' shape so the text appears inside the vertex, not under the vertex.</p>"},{"location":"sims/clustering/#lab2-adding-a-domain-property-to-each-vertex","title":"Lab2: Adding a Domain Property to Each Vertex","text":"<p>In the following examples, we will assign each node to a specific domain using the <code>domain</code> property. The values in the example are \"A\", \"B\", and \"C\" however you can use any string for the domain value.</p> <pre><code>var nodes = new vis.DataSet([\n    { id: 1, label: 'Node 1A', domain: 'A' },\n    { id: 2, label: 'Node 2A', domain: 'A' },\n    { id: 3, label: 'Node 3A', domain: 'A' },\n\n    { id: 4, label: 'Node 4B', domain: 'B' },\n    { id: 5, label: 'Node 5B', domain: 'B' },\n    { id: 6, label: 'Node 6B', domain: 'B' },\n\n    { id: 7, label: 'Node 7C', domain: 'C' },\n    { id: 8, label: 'Node 8C', domain: 'C' },\n    { id: 9, label: 'Node 9C', domain: 'C' }\n  ]);\n</code></pre>"},{"location":"sims/clustering/#cluster-drawing-properties","title":"Cluster Drawing Properties","text":"<p>Our first step is to learn how to render a cluster.  We do this by adding a <code>clusterNodeProperies</code> JSON data structure to our program.  Here is an example that uses the <code>square</code> shape for the clusters.</p> <p></p> <pre><code>clusterNodeProperties: {\n    id: 'cluster:' + domain,\n    label: 'Cluster ' + domain,\n    shape: 'square', // Change shape to square\n    size: 40,        // Increase size\n    color: {\n        border: 'orange',      // Set border color (e.g., orange)\n        background: '#FFE5B4'   // Set background color (e.g., light orange)\n    },\n    font: { color: 'black' } // Set font color to black for readability\n}\n</code></pre> <p>Note that we are contacting the string \"cluster\" to the domain to create the cluster <code>id</code> and we are using <code>\"Cluster\" + domain</code> for the label.</p> <p>Clustering Example 2</p>"},{"location":"sims/clustering/#lab-3-individual-cluster-colors","title":"Lab 3: Individual Cluster Colors","text":"<p>One of the key things we can do to each domain is to color the domain icons with different colors.  Each domain can have a different color for the boarder and the background of the icon.</p> <p>To do this we will need to create a list of the domains and then use this list to assign the color:</p> <pre><code>var domainColors = {\n      'A': { border: '#FF0000', background: '#FFCCCC' }, // Red\n      'B': { border: '#00FF00', background: '#CCFFCC' }, // Green\n      'C': { border: '#0000FF', background: '#CCCCFF' }  // Blue\n    };\n</code></pre> <pre><code>clusterNodeProperties: {\n   color: domainColors[domain]\n}\n</code></pre> <p></p> <pre><code>function clusterByDomain() {\n  // Get unique domains from nodes\n  var allNodes = nodes.get();\n  var domains = [...new Set(allNodes.map(node =&gt; node.domain))];\n\n  domains.forEach(function(domain) {\n    // Define colors based on domain\n    var domainColors = {\n      'A': { border: '#FF0000', background: '#FFCCCC' }, // Red\n      'B': { border: '#00FF00', background: '#CCFFCC' }, // Green\n      'C': { border: '#0000FF', background: '#CCCCFF' }  // Blue\n    };\n\n    var clusterOptionsByData = {\n      joinCondition: function(childNode) {\n        return childNode.domain === domain;\n      },\n      clusterNodeProperties: {\n        id: 'cluster:' + domain,\n        label: 'Cluster ' + domain,\n        shape: 'square',\n        size: 40,\n        color: domainColors[domain],\n        font: { color: '#000000' }\n      }\n    };\n    network.cluster(clusterOptionsByData);\n  });\n}\n</code></pre> <p>Example 3: Colored Cluster Icons</p>"},{"location":"sims/clustering/#lab-4-repositioning-text","title":"Lab 4: Repositioning Text","text":"<p>Next, we want the text to be positioned in the center of the cluster icon. It would be nice to have a \"centerLabel\" property, but vis.js does not support this.  Instead we must move the vertical positioning up by setting negative distance based on the square size.  For a square of size 40, we need to move up -55.  For a square if size 50 we need to move up -65.</p> <p><pre><code>clusterNodeProperties: {\n  font: {\n    vadjust: -55,      // Adjust label position upwards\n  }\n}\n</code></pre> </p> <p>Example 4: Repositioning the Label Within the Square Cluster</p>"},{"location":"sims/clustering/#lab-5-recollapse","title":"Lab 5: Recollapse","text":"<p>Although we can now double click on each cluster to expand it, we might change our mind and want the cluster to be collapsed again into a single structure.  This allows uses to successively browse through each domain in succession, opening and closing each domain.</p> <p>To do this, we will need to add an event handler that will close the domain if any of the nodes within that domain get a double click.  Here is sample code to collapse a domain.</p>"},{"location":"sims/clustering/#event-handler-for-double-click-events","title":"Event Handler for Double-Click Events","text":"<pre><code>// Event handler for all double-click events on nodes\nnetwork.on(\"doubleClick\", function (params) {\n    if (params.nodes.length === 1) {\n      // get the node we clicked on\n      var nodeId = params.nodes[0];\n      if (network.isCluster(nodeId) === true) {\n        // Open the cluster\n        network.openCluster(nodeId);\n      } else {\n        // Check if the node belongs to any cluster\n        for (var clusterId in clusters) {\n          if (clusters[clusterId].includes(nodeId)) {\n            // Re-cluster the nodes\n            recluster(clusterId);\n            break;\n          }\n        }\n      }\n    }\n});\n</code></pre> <p>The event handler checks if you clicked on a note that is in a cluster. If the node is in a cluster and if is, it calls the <code>recluster()</code> function using the <code>clusterID</code> as a parameter.  Here is that recluster function.</p>"},{"location":"sims/clustering/#the-recluster-function","title":"The Recluster Function","text":"<p>This function gets called when you double-click on any node that is in a cluster.  It extracts the domain name from the input clusterID and then uses that domain to recluster the diagram using cluster properties.</p> <pre><code>// Function to re-cluster nodes into the cluster with the given clusterId\nfunction recluster(clusterId) {\n    var domain = clusterId.split(':')[1];  // Extract domain from clusterId\n\n    var clusterOptionsByData = {\n      joinCondition: function(childNode) {\n        return childNode.domain === domain &amp;&amp; childNode.id !== clusterId;\n      },\n      processProperties: function(clusterOptions, childNodes, childEdges) {\n        // Update the mapping of cluster to its nodes\n        clusters[clusterId] = childNodes.map(function(node) { return node.id; });\n\n        // Set cluster properties\n        clusterOptions.id = clusterId;\n        clusterOptions.label = '&lt;b&gt;Cluster ' + domain + '&lt;/b&gt;';\n        clusterOptions.shape = 'square';\n        clusterOptions.size = 50;\n        clusterOptions.color = {\n          border: 'orange',      // Orange border\n          background: '#FFE5B4'   // Light orange background\n        };\n        clusterOptions.font = {\n          color: '#000000',\n          size: 16,\n          vadjust: -35,\n          align: 'horizontal',\n          multi: true\n        };\n        return clusterOptions;\n      },\n      clusterNodeProperties: {\n        allowSingleNodeCluster: false\n      }\n    };\n    network.cluster(clusterOptionsByData);\n}\n</code></pre> <p>Example 5: Recollapseing the Cluster</p>"},{"location":"sims/clustering/#lab-6-integrating-recollapse","title":"Lab 6: Integrating Recollapse","text":"<p>Example 6 (work in progress)</p>"},{"location":"sims/data-element-match/","title":"Data Element Matcher","text":"<p>Run the Data Element Match Demo</p>"},{"location":"sims/data-element-match/#about-this-microsim","title":"About this MicroSim","text":""},{"location":"sims/degree/","title":"Degree MicroSim","text":"<p>Link to Demo Edit MicroSim</p> <p>The figure above is a simple graph that has nodes represented by dark blue circles.</p> <p>Next to each vertex is the \"degree\" of each node. There are three numbers:</p> <ol> <li> <p>Incoming The number of directed edges that are entering the node.</p> </li> <li> <p>Outgoing The number of directed edges that are leaving the node or pointing at other nodes.</p> </li> </ol> <p>3: Total The sum of the incoming and outgoing edges.</p> <p>Many graph databases don't perform well when a graph has a large number of incoming or outgoing edges.  For example, if you have a node for  Gender (Female, Male or Unknown) then every Person in the graph (billions?) would have an incoming HAS_GENDER edge.  Although this can work quickly to narrow down a population to only female or male people, it can also slow down your system if it was not designed to scale.</p> <p>In graph theory and network analysis, a vertex (or node) with a high number of incoming edges is often referred to as a \"hub\". This term is especially common in the context of scale-free networks, where some nodes act as highly connected hubs.</p> <p>Another term that might be used, depending on the context, is \"sink\". This is particularly used in directed graphs where edges have a direction. In such cases, a sink is a vertex with a high number of incoming edges and few or no outgoing edges.</p> <p>The importance of these nodes can vary depending on the specific application or the type of network being analyzed. For instance, in social network analysis, such nodes might represent influential individuals or organizations, whereas in web graph analysis, they might represent popular web pages with many incoming links.</p>"},{"location":"sims/degree/#celebrity-nodes-high-in-degree-in-social-networks","title":"Celebrity Nodes: High In-Degree In Social Networks","text":"<p>In Twitter and other social media contexts, a person with a large number of followers is often referred to as an \"influencer\". This term is used because such individuals have the potential to influence their many followers through their posts, opinions, and endorsements.</p> <p>Another common term is \"Twitter celebrity\" or \"social media celebrity\", used for individuals who have gained a significant following due to their fame on these platforms. This can include celebrities from other fields who have carried their fame over to social media, as well as people who have become famous primarily through their online presence.</p> <p>In the context of network analysis, these individuals might be referred to as \"nodes with high degree centrality\", indicating that they have a high number of connections (followers in this case) within the network.</p>"},{"location":"sims/degree-v2/","title":"Degree V2","text":"<p>Run the Degree V2 MicroSim</p> <p>Edit the Degree V2 MicroSim</p>"},{"location":"sims/degree-v2/#prompt","title":"Prompt","text":"<pre><code>Create a p5.js sketch on a 500x600 canvas.\nThis sketch demonstrates how the degree of a network graph changes based on the number of connections between vertices of the graph.\nThe drawing region is 500x500.\nThe control region is the bottom 100 below the drawing region.\nSet a global variable of canvasWidth to be 500.\nSet a global variable of drawingHeight to be 500.\nSet a global variable of controlRegionHeight to be 100.\nSet a global variable of leftMargin to be 100.\nUse the leftMargin to place the label and values of the sliders in the control region.\nAt the beginning of each draw, draw the background of the drawing region in aliceblue.\nDraw the background of the control region white.\nCreate a function that draws N small circles around the edge of a large circle.\nN is a parameter of the function.\nCreate another function that draws the network between the edges circles with the degree from the degreeSlider.\nThe small circles are spaced evenly around the edge of the large circle.\nThe small circles have a maximum radius of 20.\nThe large circle has a radius of 230.\nAdd a slider called nSlider that changes the number of small circles on the edge of the large circle.\nThe range of nSlider is from 4 to 20 with a default value of 10.\nAdd a second slider called degreeSlider that changes the number of edges between each small circle and other small circles.\nThe degreeSlider ranges from 1 to N.\nDraw lines from each small circle to others based on the degree slider.\nDraw the label and values in the leftMargin of the controls.\nMake the size of the sliders be the canvasWidth less the leftMargin.\n</code></pre>"},{"location":"sims/degree-v2/#sample-code","title":"Sample Code","text":"<pre><code>// Network Graph Degree Demo\nlet canvasWidth = 450;\nlet drawingHeight = 450;\nlet xCenter = canvasWidth / 2;\nlet yCenter = drawingHeight / 2;\nlet controlRegionHeight = 60;\nlet nSlider, degreeSlider;\nlet leftMargin = 100;\n\nfunction setup() {\n  createCanvas(canvasWidth, drawingHeight + controlRegionHeight);\n  textSize(16);\n\n  // slider to control the number of vertices on the edge of the circle\n  nSlider = createSlider(4, 20, 10, 1).position(leftMargin, canvasWidth + 10);\n  nSlider.size(canvasWidth-leftMargin);\n\n  // slider to control the degree of connections\n  degreeSlider = createSlider(1, 10, 4, 1).position(leftMargin, canvasWidth + 30);\n  degreeSlider.size(canvasWidth-leftMargin);\n}\n\nfunction draw() {\n  fill('aliceblue');\n  rect(0,0,canvasWidth, drawingHeight);\n  fill('white');\n  rect(0,drawingHeight,canvasWidth, controlRegionHeight);\n\n  // get the updates from any changes in the slider values\n  numberNodes = nSlider.value();\n  degreeValue = degreeSlider.value();\n\n  // what we want is the degree to be less than the number of nodes\n  if (degreeValue &gt; numberNodes) {\n    degreeValue = numberNodes;\n    // update the degree\n    degreeSlider.value(numberNodes); \n  }\n\n  drawNetwork(xCenter, yCenter, 200, numberNodes);\n  drawLines(xCenter, yCenter, 200, numberNodes, degreeValue);\n  // degreeSlider.attribute('max', nSlider.value()); // Ensure degreeSlider max does not exceed nSlider value\n\n  // Draw labels and values\n  noStroke();\n  text('Nodes: ' + numberNodes, 10, drawingHeight + 20);\n  text('Degree: ' + (degreeValue*2), 10, drawingHeight + 40);\n\n}\n\nfunction drawNetwork(x, y, largeCircleRadius, n) {\n  let angle = TWO_PI / n;\n  stroke(0);\n  fill(255);\n  // ellipse(x, y, largeCircleRadius * 2, largeCircleRadius * 2); // Draw large circle\n  for (let i = 0; i &lt; n; i++) {\n    let xOff = cos(angle * i) * largeCircleRadius;\n    let yOff = sin(angle * i) * largeCircleRadius;\n    fill(100);\n    circle(x + xOff, y + yOff, 20); // Draw small circles\n  }\n}\n\n// note that degree is half what we see on the canvas\nfunction drawLines(x, y, largeCircleRadius, n, degree) {\n  let angle = TWO_PI / n;\n  for (let i = 0; i &lt; n; i++) {\n    for (let j = 1; j &lt;= degree; j++) {\n      let iAngle = angle * i;\n      let jAngle = angle * ((i + j) % n); // Wrap around the circle\n      let x1 = cos(iAngle) * largeCircleRadius + x;\n      let y1 = sin(iAngle) * largeCircleRadius + y;\n      let x2 = cos(jAngle) * largeCircleRadius + x;\n      let y2 = sin(jAngle) * largeCircleRadius + y;\n      stroke(0, 102, 153);\n      line(x1, y1, x2, y2); // Draw line between vertices\n    }\n  }\n}\n</code></pre> <p>Note</p> <p>There is a bug in the code that tries to make sure that the degree is always less than the number of nodes.</p> <p>Random Node Distribution Example</p>"},{"location":"sims/force/","title":"Force Directed Graph Layout","text":"<p>Force Directed Graph on the MicroSims Site</p>"},{"location":"sims/force/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a simulation of a force-directed graph placement algorithm.\nGenerate a single file p5.js sketch on a 500x400 canvas.\nSet global variables for the width and height of the canvas.\nThe algorithm will move the position of vertices of a connected\n   based on a force-directed graph placement mode.\nFor the initial state,  place 20 vertices on random locations on a 500x400 canvas. \nMake the vertices be rendered by a circle with a radius of 10.\nConnect each vertex to 3 other vertices using bidirectional links.\nAdd a controls to incrementally step through the algorithm.\nAdd buttons for a single Step, 10 Steps, 100 Steps and 1,000 Steps at the bottom of canvas.\nDisplay the number of steps, and the total movement of the verticies in\neach step.\n</code></pre>"},{"location":"sims/force/#references","title":"References","text":"<p>Karsten Schmidt</p>"},{"location":"sims/learning-graph/","title":"Learning Graph MicroSimulation","text":"<p>This MicroSim has several prompts.  Each prompt output is used as an input to the next prompt.</p>"},{"location":"sims/learning-graph/#course-description","title":"Course Description","text":"<p>We use Bloom's taxonomy to create a course description that begins with foundational concepts and progresses to hands-on activities to generate new content.</p> <p>Course Description</p>"},{"location":"sims/learning-graph/#enumerating-concepts","title":"Enumerating Concepts","text":"<p>We use the course description to generate a flat list of around 150 core concepts used in this course.</p> <p>Enumerating Concepts</p>"},{"location":"sims/learning-graph/#concept-dependencies","title":"Concept Dependencies","text":"<p>Once we have a list of our core concepts, we ask a LLM to help create a dependency graph.</p> <p>Concept Dependencies</p>"},{"location":"sims/learning-graph/#concept-taxonomies","title":"Concept Taxonomies","text":"<p>We then try to categorize these concepts into a taxonomy that is used to color the network graph learning map.</p> <p>Concept Taxonomies</p>"},{"location":"sims/learning-graph/#view-legend","title":"View Legend","text":"<p>Once we have a taxonomy, we need to convert that list into an HTML table that can be used as a legend that appears on the left sidebar.  This version has a way to collapse the sidebar.</p> <p>View Legend</p>"},{"location":"sims/learning-graph/#view-graph","title":"View Graph","text":"<p>Finally, we put it all together in a graph viewer. This version reads a JSON file that has some group names added.  It also attempts to put the foundation elements to the left and some advanced topics on the right.</p> <p>View Graph</p>"},{"location":"sims/learning-graph/00-course-description/","title":"Generating A Course Description Based on Blooms Taxonomy of Learning","text":""},{"location":"sims/learning-graph/00-course-description/#prompt","title":"Prompt","text":"<pre><code>Based on the Bloom Taxonomy updated in 2001, Please suggest improvements \nto this following course description:\n\n# Graph Algorithms Course Description\n\n**Course Title:** Learning Graph Algorithms with AI\n\n## Course Description\n\nThis 10-week course is designed\nfor college students that desire to understand the\nhow graph algorithms are used to solve business\nproblems.  This course is unique in that assumes\nthat all students have full access to generative AI\ntools to generate the code and the visualizations\nof these algorithms in action.\n\n## Prerequisites\n\nAll students should have basic familiarity with data structures\nand databases.  Students should have access to a web browser\nand a software development environment that can execute\nPython code.  Familiarity with JavaScript and Python is\nhelpful but not required for this course.\n\n## Course Objectives\n\nAfter this course students will be able to:\n\n* Describe graph data structures and their components such as nodes, edges and properties.\n* Describe both the RDF and LPT data models and their strengths and weaknesses.\n* Be familiar with different types of graphs such as directed and undirected graphs, dependency graphs, acyclic graphs, concept graphs, taxonomies and ontologies.\n* Be familiar with basic graph algorithms and algorithm categories such as depth-first search, pathfinding, clustering, page rank, similarity and centrality.\n* Be able to create generative AI prompts to create sample\ngraph data and graph algorithms.\n* Understand how browser-based libraries such as D3.js and vis.js are used to view graphs within a web browser.\n* Be able to match a problem with an appropriate representation and graph algorithm.\n* Be able to write and modify graph algorithms with the assistance of generative AI tools\n</code></pre>"},{"location":"sims/learning-graph/00-course-description/#chatgpt-o1-preview-results","title":"ChatGPT o1-preview Results","text":"<p>Here are some suggestions to improve the course description, aligning it with Bloom\u2019s updated taxonomy, which emphasizes higher-order thinking and more precise learning objectives.</p> <p>Graph Algorithms Course Description</p> <p>Course Title: Learning Graph Algorithms with AI</p>"},{"location":"sims/learning-graph/00-course-description/#course-description","title":"Course Description","text":"<p>This 10-week course is designed for college students eager to learn how graph algorithms can be applied to solve real-world business problems. A distinctive feature of this course is its integration of generative AI tools, enabling students to generate code, create visualizations, and experiment with algorithms in real time.</p>"},{"location":"sims/learning-graph/00-course-description/#prerequisites","title":"Prerequisites","text":"<p>Students should have a foundational understanding of data structures and databases. Access to a web browser and a software development environment capable of running Python code is required. While familiarity with Python and JavaScript is beneficial, it is not mandatory.</p>"},{"location":"sims/learning-graph/00-course-description/#course-objectives","title":"Course Objectives","text":"<p>By the end of this course, students will be able to:</p> <pre><code>1.  **Remember:** Define key graph components (nodes, edges, properties) and basic graph types (e.g., directed, undirected, acyclic, concept graphs).\n2.  **Understand:** Explain and compare the RDF and LPG data models, discussing their relative strengths and weaknesses.\n3.  **Apply:** Use generative AI tools to generate graph data and algorithms for real-world business scenarios.\n4.  **Analyze:** Distinguish between various types of graph algorithms (e.g., depth-first search, clustering, page rank, similarity, centrality), and identify their use cases.\n5.  **Evaluate:** Assess the suitability of different graph algorithms for specific business problems and justify algorithm choices.\n6.  **Create:** Develop and refine custom graph algorithms using browser-based libraries like D3.js and vis.js, incorporating generative AI for assistance.\n</code></pre>"},{"location":"sims/learning-graph/00-course-description/#additional-skills","title":"Additional Skills:","text":"<ul> <li>Utilize generative AI prompts to accelerate learning and enhance algorithm creation.</li> <li>Visualize complex graphs in web environments for better comprehension and presentation.</li> </ul> <p>These adjustments focus on a clear progression through Bloom\u2019s taxonomy: from basic knowledge and comprehension to higher-order skills like evaluation and creation. Each objective clearly states the desired outcome and the action verb to match the taxonomy level.</p>"},{"location":"sims/learning-graph/01-enumerating-concepts/","title":"Enumerating Concepts","text":"<p>Our second step is to generate a list of the Concepts covered in this course.</p>"},{"location":"sims/learning-graph/01-enumerating-concepts/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Please create a fully connected dependency graph\nfor learning the concepts in a college-level Graph Algorithms course.\nIn this step, for each Concept on this list below, create a new\nlist of other concepts on which it depends.  If a concept\ndepends on a specific concept that is not listed,\nthen we will need to add it as a new concept.\nThis will help us determine the teaching order of the Concepts.\n\nReturn the new list as a CSV file using the following format:\n\n1. The first column in the CSV file is a numeric concept\nID you assigned in the list above.\n2. The second column is the concept name.\n3. The third column is a pipe-delimited list of the Concept IDs that the concept depends upon.\n\nCheck your results to make sure that all concepts are connected to at least one other concept.\n\nFoundation Concepts are concepts that have no dependant concepts in this set.  They have an empty third column.\n</code></pre>"},{"location":"sims/learning-graph/01-enumerating-concepts/#chatgpt-response","title":"ChatGPT Response","text":"<p>Here is a numbered list of 150 core concepts for my course on graph algorithms, presented in the order they should be taught, from foundational to advanced:</p> <pre><code>1.  Graph Definition\n2.  Nodes\n3.  Edges\n4.  Directed Graph (Digraph)\n5.  Undirected Graph\n6.  Weighted Graphs\n7.  Unweighted Graphs\n8.  Cyclic Graphs\n9.  Acyclic Graphs (DAG)\n10. Graph Density\n11. Degree of a Node\n12. In-degree\n13. Out-degree\n14. Path\n15. Walk\n16. Cycle\n17. Connected Graph\n18. Disconnected Graph\n19. Subgraph\n20. Bipartite Graph\n21. Complete Graph\n22. Multigraph\n23. Graph Isomorphism\n24. Self-loop\n25. Adjacent Nodes\n26. Incident Edges\n27. Graph Adjacency Matrix\n28. Graph Adjacency List\n29. Graph Incidence Matrix\n30. Graph Traversal\n31. Depth-First Search (DFS)\n32. Breadth-First Search (BFS)\n33. Stack (DFS)\n34. Queue (BFS)\n35. Backtracking\n36. Recursion (DFS)\n37. Shortest Path Problem\n38. Dijkstra\u2019s Algorithm\n39. Bellman-Ford Algorithm\n40. A* Search Algorithm\n41. Floyd-Warshall Algorithm\n42. All-Pairs Shortest Path (APSP)\n43. Single-Source Shortest Path (SSSP)\n44. Negative Weight Cycles\n45. Minimum Spanning Tree (MST)\n46. Kruskal\u2019s Algorithm\n47. Prim\u2019s Algorithm\n48. Union-Find Algorithm\n49. Cycle Detection (MST)\n50. Cut-Vertices\n51. Bridges (Edge Cut)\n52. Eulerian Path\n53. Eulerian Circuit\n54. Hamiltonian Path\n55. Hamiltonian Cycle\n56. Traveling Salesman Problem (TSP)\n57. Approximation Algorithms (TSP)\n58. Heuristics (TSP)\n59. Graph Coloring\n60. Chromatic Number\n61. Greedy Coloring Algorithm\n62. Clique\n63. Maximum Clique Problem\n64. Independent Set\n65. Maximal Independent Set\n66. Dominating Set\n67. Vertex Cover\n68. Minimum Vertex Cover\n69. Planar Graphs\n70. Graph Embedding\n71. Kuratowski\u2019s Theorem\n72. Graph Minor Theorem\n73. Graph Duality\n74. Planarity Testing\n75. Face of a Graph (Planar)\n76. Topological Sorting\n77. DAG Applications\n78. Strongly Connected Components (SCC)\n79. Tarjan\u2019s Algorithm (SCC)\n80. Kosaraju\u2019s Algorithm (SCC)\n81. Articulation Points\n82. Bridge Finding Algorithm\n83. Graph Matching\n84. Bipartite Matching\n85. Hopcroft-Karp Algorithm\n86. Stable Matching Problem\n87. Gale-Shapley Algorithm\n88. Network Flow\n89. Max Flow Problem\n90. Ford-Fulkerson Algorithm\n91. Edmonds-Karp Algorithm\n92. Min-Cut Max-Flow Theorem\n93. Push-Relabel Algorithm\n94. Dinic\u2019s Algorithm\n95. Capacity Scaling Algorithm\n96. Circulation Problem\n97. Multi-Commodity Flow\n98. Cut-Set\n99. Cut-Set Theorem\n100.    Flow Decomposition\n101.    Flow Networks\n102.    Graph Partitioning\n103.    Graph Clustering\n104.    k-Cuts Problem\n105.    Modularity (Clustering)\n106.    Spectral Clustering\n107.    Girvan-Newman Algorithm\n108.    Louvain Method (Clustering)\n109.    Random Walk\n110.    Markov Chains (Graphs)\n111.    Pagerank Algorithm\n112.    HITS Algorithm\n113.    Centrality Measures\n114.    Degree Centrality\n115.    Betweenness Centrality\n116.    Closeness Centrality\n117.    Eigenvector Centrality\n118.    Katz Centrality\n119.    Graph Laplacian\n120.    Spectral Graph Theory\n121.    Cheeger\u2019s Inequality\n122.    Expander Graphs\n123.    Graph Diameter\n124.    Graph Radius\n125.    Eccentricity\n126.    Graph Girth\n127.    Percolation Theory\n128.    Small-World Networks\n129.    Scale-Free Networks\n130.    Graph Randomization\n131.    Erd\u0151s\u2013R\u00e9nyi Model\n132.    Barab\u00e1si\u2013Albert Model\n133.    Watts-Strogatz Model\n134.    Community Detection\n135.    Block Models\n136.    Stochastic Block Model\n137.    Label Propagation Algorithm\n138.    Belief Propagation\n139.    Graph Neural Networks (GNN)\n140.    Node Embeddings\n141.    DeepWalk Algorithm\n142.    Node2Vec Algorithm\n143.    GraphSAGE\n144.    GCN (Graph Convolutional Network)\n145.    GAT (Graph Attention Network)\n146.    Graph Recurrent Neural Networks\n147.    Link Prediction\n148.    Graph Anomaly Detection\n149.    Knowledge Graphs\n150.    RDF vs LPG Models\n</code></pre> <p>This list progresses from basic graph theory concepts to more advanced topics like machine learning on graphs, ensuring that each concept builds on previous ones.</p>"},{"location":"sims/learning-graph/02-concept-dependencies/","title":"Concept Dependencies","text":""},{"location":"sims/learning-graph/02-concept-dependencies/#graph-algorithm-concept-dependencies","title":"Graph Algorithm Concept Dependencies","text":"<p>After we have a list of about 150 concepts, we need to understand what concepts depend on other concepts. This helps us with the course order and generating custom learning paths for students with specific learning objectives.</p>"},{"location":"sims/learning-graph/02-concept-dependencies/#sample-dependencies-prompt","title":"Sample Dependencies Prompt","text":"<pre><code>Our next step is to create a fully connected dependency graph\nfor learning these Concepts.\nIn this step, for each Concept on this list, create a new\nlist of other concepts on which it depends.  If a concept\ndepends on a specific concept that is not listed,\nthen we will need to add it as a new concept.\nThis will help us determine the teaching order of the Concepts.\n\nReturn the new list as a CSV file using the following format:\n\n1. The first column in the CSV file is a numeric concept\nID you assigned in the list above.\n2. The second column is the concept name.\n3. The third column is a pipe-delimited list of the Concept IDs that the concept depends upon.\n\nCheck your results to make sure that all concepts are connected to at least one other concept.\n\nFoundation Concepts are concepts that have no dependant concepts in this set.  They have an empty third column.\n</code></pre> <pre><code>import csv\n\n# List of concepts and their dependencies\nconcepts = [\n    (1, \"Graph Definition\", []),\n    (2, \"Nodes\", [1]),\n    (3, \"Edges\", [1]),\n    (4, \"Directed Graph (Digraph)\", [2, 3]),\n    (5, \"Undirected Graph\", [2, 3]),\n    (6, \"Weighted Graphs\", [2, 3]),\n    (7, \"Unweighted Graphs\", [2, 3]),\n    (8, \"Cyclic Graphs\", [2, 3, 4, 5]),\n    (9, \"Acyclic Graphs (DAG)\", [2, 3, 4, 5]),\n    (10, \"Graph Density\", [2, 3]),\n    (11, \"Degree of a Node\", [2]),\n    (12, \"In-degree\", [4, 11]),\n    (13, \"Out-degree\", [4, 11]),\n    (14, \"Path\", [2, 3]),\n    (15, \"Walk\", [2, 3]),\n    (16, \"Cycle\", [2, 3, 8]),\n    (17, \"Connected Graph\", [2, 3]),\n    (18, \"Disconnected Graph\", [2, 3, 17]),\n    (19, \"Subgraph\", [1]),\n    (20, \"Bipartite Graph\", [2, 3]),\n    (21, \"Complete Graph\", [2, 3]),\n    (22, \"Multigraph\", [2, 3]),\n    (23, \"Graph Isomorphism\", [1]),\n    (24, \"Self-loop\", [2, 3]),\n    (25, \"Adjacent Nodes\", [2]),\n    (26, \"Incident Edges\", [3]),\n    (27, \"Graph Adjacency Matrix\", [2, 3]),\n    (28, \"Graph Adjacency List\", [2, 3]),\n    (29, \"Graph Incidence Matrix\", [2, 3]),\n    (30, \"Graph Traversal\", [2, 3]),\n    (31, \"Depth-First Search (DFS)\", [2, 3, 30]),\n    (32, \"Breadth-First Search (BFS)\", [2, 3, 30]),\n    (33, \"Stack (DFS)\", [31]),\n    (34, \"Queue (BFS)\", [32]),\n    (35, \"Backtracking\", [31]),\n    (36, \"Recursion (DFS)\", [31]),\n    (37, \"Shortest Path Problem\", [2, 3, 30]),\n    (38, \"Dijkstra\u2019s Algorithm\", [2, 3, 37]),\n    (39, \"Bellman-Ford Algorithm\", [2, 3, 37]),\n    (40, \"A* Search Algorithm\", [2, 3, 37]),\n    (41, \"Floyd-Warshall Algorithm\", [37]),\n    (42, \"All-Pairs Shortest Path (APSP)\", [37]),\n    (43, \"Single-Source Shortest Path (SSSP)\", [37]),\n    (44, \"Negative Weight Cycles\", [2, 3, 37]),\n    (45, \"Minimum Spanning Tree (MST)\", [2, 3, 30]),\n    (46, \"Kruskal\u2019s Algorithm\", [45]),\n    (47, \"Prim\u2019s Algorithm\", [45]),\n    (48, \"Union-Find Algorithm\", [2, 45]),\n    (49, \"Cycle Detection (MST)\", [45]),\n    (50, \"Cut-Vertices\", [2, 3, 30]),\n    (51, \"Bridges (Edge Cut)\", [2, 3, 30]),\n    (52, \"Eulerian Path\", [2, 3, 14]),\n    (53, \"Eulerian Circuit\", [2, 3, 14]),\n    (54, \"Hamiltonian Path\", [2, 3, 14]),\n    (55, \"Hamiltonian Cycle\", [2, 3, 14]),\n    (56, \"Traveling Salesman Problem (TSP)\", [2, 3, 54]),\n    (57, \"Approximation Algorithms (TSP)\", [56]),\n    (58, \"Heuristics (TSP)\", [56]),\n    (59, \"Graph Coloring\", [2, 3]),\n    (60, \"Chromatic Number\", [59]),\n    (61, \"Greedy Coloring Algorithm\", [59]),\n    (62, \"Clique\", [2, 3]),\n    (63, \"Maximum Clique Problem\", [62]),\n    (64, \"Independent Set\", [2, 3]),\n    (65, \"Maximal Independent Set\", [64]),\n    (66, \"Dominating Set\", [2, 3]),\n    (67, \"Vertex Cover\", [2, 3]),\n    (68, \"Minimum Vertex Cover\", [67]),\n    (69, \"Planar Graphs\", [2, 3]),\n    (70, \"Graph Embedding\", [69]),\n    (71, \"Kuratowski\u2019s Theorem\", [69]),\n    (72, \"Graph Minor Theorem\", [69]),\n    (73, \"Graph Duality\", [69]),\n    (74, \"Planarity Testing\", [69]),\n    (75, \"Face of a Graph (Planar)\", [69]),\n    (76, \"Topological Sorting\", [2, 3, 9]),\n    (77, \"DAG Applications\", [9]),\n    (78, \"Strongly Connected Components (SCC)\", [4]),\n    (79, \"Tarjan\u2019s Algorithm (SCC)\", [78]),\n    (80, \"Kosaraju\u2019s Algorithm (SCC)\", [78]),\n    (81, \"Articulation Points\", [2, 3]),\n    (82, \"Bridge Finding Algorithm\", [2, 3]),\n    (83, \"Graph Matching\", [2, 3]),\n    (84, \"Bipartite Matching\", [83]),\n    (85, \"Hopcroft-Karp Algorithm\", [84]),\n    (86, \"Stable Matching Problem\", [2, 3]),\n    (87, \"Gale-Shapley Algorithm\", [86]),\n    (88, \"Network Flow\", [2, 3]),\n    (89, \"Max Flow Problem\", [88]),\n    (90, \"Ford-Fulkerson Algorithm\", [89]),\n    (91, \"Edmonds-Karp Algorithm\", [90]),\n    (92, \"Min-Cut Max-Flow Theorem\", [88]),\n    (93, \"Push-Relabel Algorithm\", [88]),\n    (94, \"Dinic\u2019s Algorithm\", [88]),\n    (95, \"Capacity Scaling Algorithm\", [88]),\n    (96, \"Circulation Problem\", [88]),\n    (97, \"Multi-Commodity Flow\", [88]),\n    (98, \"Cut-Set\", [88]),\n    (99, \"Cut-Set Theorem\", [88]),\n    (100, \"Flow Decomposition\", [88]),\n    (101, \"Flow Networks\", [88]),\n    (102, \"Graph Partitioning\", [2, 3]),\n    (103, \"Graph Clustering\", [2, 3]),\n    (104, \"k-Cuts Problem\", [2, 3]),\n    (105, \"Modularity (Clustering)\", [103]),\n    (106, \"Spectral Clustering\", [103]),\n    (107, \"Girvan-Newman Algorithm\", [103]),\n    (108, \"Louvain Method (Clustering)\", [103]),\n    (109, \"Random Walk\", [2, 3]),\n    (110, \"Markov Chains (Graphs)\", [109]),\n    (111, \"Pagerank Algorithm\", [109]),\n    (112, \"HITS Algorithm\", [109]),\n    (113, \"Centrality Measures\", [2, 3]),\n    (114, \"Degree Centrality\", [113]),\n    (115, \"Betweenness Centrality\", [113]),\n    (116, \"Closeness Centrality\", [113]),\n    (117, \"Eigenvector Centrality\", [113]),\n    (118, \"Katz Centrality\", [113]),\n    (119, \"Graph Laplacian\", [2, 3]),\n    (120, \"Spectral Graph Theory\", [119]),\n    (121, \"Cheeger\u2019s Inequality\", [120]),\n    (122, \"Expander Graphs\", [120]),\n    (123, \"Graph Diameter\", [2, 3]),\n    (124, \"Graph Radius\", [2, 3]),\n    (125, \"Eccentricity\", [2, 3]),\n    (126, \"Graph Girth\", [2, 3]),\n    (127, \"Percolation Theory\", [2, 3]),\n    (128, \"Small-World Networks\", [2, 3]),\n    (129, \"Scale-Free Networks\", [2, 3]),\n    (130, \"Graph Randomization\", [2, 3]),\n    (131, \"Erd\u0151s\u2013R\u00e9nyi Model\", [130]),\n    (132, \"Barab\u00e1si\u2013Albert Model\", [129]),\n    (133, \"Watts-Strogatz Model\", [128]),\n    (134, \"Community Detection\", [2, 3]),\n    (135, \"Block Models\", [134]),\n    (136, \"Stochastic Block Model\", [135]),\n    (137, \"Label Propagation Algorithm\", [134]),\n    (138, \"Belief Propagation\", [134]),\n    (139, \"Graph Neural Networks (GNN)\", [2, 3]),\n    (140, \"Node Embeddings\", [139]),\n    (141, \"DeepWalk Algorithm\", [140]),\n    (142, \"Node2Vec Algorithm\", [140]),\n    (143, \"GraphSAGE\", [139]),\n    (144, \"GCN (Graph Convolutional Network)\", [139]),\n    (145, \"GAT (Graph Attention Network)\", [139]),\n    (146, \"Graph Recurrent Neural Networks\", [139]),\n    (147, \"Link Prediction\", [2, 3]),\n    (148, \"Graph Anomaly Detection\", [147]),\n    (149, \"Knowledge Graphs\", [2, 3]),\n    (150, \"RDF vs LPG Models\", [149])\n]\n\n# Writing the entire list to a CSV file\ncsv_file_path = \"/mnt/data/graph_algorithms_concepts_dependencies.csv\"\n\nwith open(csv_file_path, mode='w', newline='') as file:\n    writer = csv.writer(file)\n    writer.writerow([\"Concept ID\", \"Concept Name\", \"Dependencies\"])\n    for concept_id, concept_name, dependencies in concepts:\n        dependency_str = '|'.join(map(str, dependencies)) if dependencies else ''\n        writer.writerow([concept_id, concept_name, dependency_str])\n</code></pre>"},{"location":"sims/learning-graph/03-concept-taxonomies/","title":"Concept Taxonomies","text":"<p>Our next step is to take the list of concepts and add a classification code.</p>"},{"location":"sims/learning-graph/03-concept-taxonomies/#prompt","title":"Prompt","text":"<pre><code>That was very good.  Next, let's Create a taxonomy to classify\nthese concepts. For the list of concepts, can you suggest a\ntaxonomy of up to ten categories on how to classify each concept?\n\nFor example:\n\n1. Foundational Concept (graph model)\n2. Types of Graphs\n3. Graph Theory\n4. Basic Graph Algorithms\n5. Advanced Graph Algorithms\n6. Graph Machine Learning\n\nWhat would your list of these categories be?\nGive some examples of concepts within each category.\n</code></pre>"},{"location":"sims/learning-graph/03-concept-taxonomies/#response","title":"Response","text":"<p>Certainly! Based on your list of concepts for the Graph Algorithms course, here is a taxonomy of ten categories to classify them, along with examples of concepts within each category:</p>"},{"location":"sims/learning-graph/03-concept-taxonomies/#1-foundational-concepts-and-definitions","title":"1. Foundational Concepts and Definitions","text":"<p>Description: Basic definitions and elements that form the foundation of graph theory.</p> <p>Examples:</p> <ul> <li>Graph Definition</li> <li>Nodes</li> <li>Edges</li> <li>Directed Graph (Digraph)</li> <li>Undirected Graph</li> <li>Weighted Graphs</li> <li>Unweighted Graphs</li> <li>Self-loop</li> <li>Adjacent Nodes</li> <li>Incident Edges</li> <li>Degree of a Node</li> <li>In-degree</li> <li>Out-degree</li> <li>Graph Density</li> <li>Path</li> <li>Walk</li> <li>Cycle</li> <li>Subgraph</li> <li>Graph Isomorphism</li> <li>Multigraph</li> </ul>"},{"location":"sims/learning-graph/03-concept-taxonomies/#2-types-and-properties-of-graphs","title":"2. Types and Properties of Graphs","text":"<p>Description: Various classifications of graphs and their inherent properties.</p> <p>Examples:</p> <ul> <li>Cyclic Graphs</li> <li>Acyclic Graphs (DAG)</li> <li>Connected Graph</li> <li>Disconnected Graph</li> <li>Bipartite Graph</li> <li>Complete Graph</li> <li>Planar Graphs</li> <li>Graph Embedding</li> <li>Face of a Graph (Planar)</li> <li>Graph Minor Theorem</li> <li>Graph Duality</li> <li>Kuratowski\u2019s Theorem</li> <li>Planarity Testing</li> <li>Percolation Theory</li> <li>Small-World Networks</li> <li>Scale-Free Networks</li> </ul>"},{"location":"sims/learning-graph/03-concept-taxonomies/#3-graph-representations-and-data-structures","title":"3. Graph Representations and Data Structures","text":"<p>Description: Methods and data structures used to represent graphs in computational contexts.</p> <p>Examples:</p> <ul> <li>Graph Adjacency Matrix</li> <li>Graph Adjacency List</li> <li>Graph Incidence Matrix</li> <li>Graph Laplacian</li> <li>Priority Queue</li> <li>Disjoint Set Data Structure</li> <li>Union-Find Algorithm</li> <li>Graph Embedding</li> <li>Node Embeddings</li> </ul>"},{"location":"sims/learning-graph/03-concept-taxonomies/#4-basic-graph-algorithms","title":"4. Basic Graph Algorithms","text":"<p>Description: Fundamental algorithms for traversing and exploring graphs.</p> <p>Examples:</p> <ul> <li>Graph Traversal</li> <li>Depth-First Search (DFS)</li> <li>Breadth-First Search (BFS)</li> <li>Stack (DFS)</li> <li>Queue (BFS)</li> <li>Backtracking</li> <li>Recursion (DFS)</li> <li>Topological Sorting</li> <li>Cycle Detection (MST)</li> <li>Strongly Connected Components (SCC)</li> <li>Tarjan\u2019s Algorithm (SCC)</li> <li>Kosaraju\u2019s Algorithm (SCC)</li> <li>Articulation Points</li> <li>Bridge Finding Algorithm</li> <li>Cut-Vertices</li> <li>Bridges (Edge Cut)</li> </ul>"},{"location":"sims/learning-graph/03-concept-taxonomies/#5-shortest-path-and-spanning-tree-algorithms","title":"5. Shortest Path and Spanning Tree Algorithms","text":"<p>Description: Algorithms for finding the shortest paths and constructing spanning trees.</p> <p>Examples:</p> <ul> <li>Shortest Path Problem</li> <li>Dijkstra\u2019s Algorithm</li> <li>Bellman-Ford Algorithm</li> <li>A* Search Algorithm</li> <li>Floyd-Warshall Algorithm</li> <li>All-Pairs Shortest Path (APSP)</li> <li>Single-Source Shortest Path (SSSP)</li> <li>Negative Weight Cycles</li> <li>Minimum Spanning Tree (MST)</li> <li>Kruskal\u2019s Algorithm</li> <li>Prim\u2019s Algorithm</li> </ul>"},{"location":"sims/learning-graph/03-concept-taxonomies/#6-network-flow-and-matching-algorithms","title":"6. Network Flow and Matching Algorithms","text":"<p>Description: Algorithms related to network flows and matching in graphs.</p> <p>Examples:</p> <ul> <li>Network Flow</li> <li>Max Flow Problem</li> <li>Ford-Fulkerson Algorithm</li> <li>Edmonds-Karp Algorithm</li> <li>Dinic\u2019s Algorithm</li> <li>Push-Relabel Algorithm</li> <li>Capacity Scaling Algorithm</li> <li>Min-Cut Max-Flow Theorem</li> <li>Circulation Problem</li> <li>Multi-Commodity Flow</li> <li>Graph Matching</li> <li>Bipartite Matching</li> <li>Hopcroft-Karp Algorithm</li> <li>Stable Matching Problem</li> <li>Gale-Shapley Algorithm</li> </ul>"},{"location":"sims/learning-graph/03-concept-taxonomies/#7-advanced-graph-algorithms-and-problems","title":"7. Advanced Graph Algorithms and Problems","text":"<p>Description: Complex algorithms and computationally intensive graph problems.</p> <p>Examples:</p> <ul> <li>Eulerian Path</li> <li>Eulerian Circuit</li> <li>Hamiltonian Path</li> <li>Hamiltonian Cycle</li> <li>Traveling Salesman Problem (TSP)</li> <li>Approximation Algorithms (TSP)</li> <li>Heuristics (TSP)</li> <li>Graph Coloring</li> <li>Chromatic Number</li> <li>Greedy Coloring Algorithm</li> <li>Clique</li> <li>Maximum Clique Problem</li> <li>Independent Set</li> <li>Maximal Independent Set</li> <li>Dominating Set</li> <li>Vertex Cover</li> <li>Minimum Vertex Cover</li> </ul>"},{"location":"sims/learning-graph/03-concept-taxonomies/#8-graph-measures-and-centrality-metrics","title":"8. Graph Measures and Centrality Metrics","text":"<p>Description: Quantitative measures to assess properties of graphs and importance of nodes.</p> <p>Examples:</p> <ul> <li>Centrality Measures</li> <li>Degree Centrality</li> <li>Betweenness Centrality</li> <li>Closeness Centrality</li> <li>Eigenvector Centrality</li> <li>Katz Centrality</li> <li>Graph Diameter</li> <li>Graph Radius</li> <li>Eccentricity</li> <li>Graph Girth</li> </ul>"},{"location":"sims/learning-graph/03-concept-taxonomies/#9-spectral-graph-theory-and-clustering","title":"9. Spectral Graph Theory and Clustering","text":"<p>Description: Study of graph properties through eigenvalues and eigenvectors; methods for grouping similar nodes.</p> <p>Examples:</p> <ul> <li>Spectral Graph Theory</li> <li>Graph Laplacian</li> <li>Cheeger\u2019s Inequality</li> <li>Expander Graphs</li> <li>Graph Partitioning</li> <li>Graph Clustering</li> <li>k-Cuts Problem</li> <li>Modularity (Clustering)</li> <li>Spectral Clustering</li> <li>Girvan-Newman Algorithm</li> <li>Louvain Method (Clustering)</li> <li>Random Walk</li> <li>Markov Chains (Graphs)</li> <li>Pagerank Algorithm</li> <li>HITS Algorithm</li> </ul>"},{"location":"sims/learning-graph/03-concept-taxonomies/#10-graph-machine-learning-and-network-models","title":"10. Graph Machine Learning and Network Models","text":"<p>Description: Application of machine learning techniques to graphs and study of network structures.</p> <p>Examples:</p> <ul> <li>Graph Neural Networks (GNN)</li> <li>DeepWalk Algorithm</li> <li>Node2Vec Algorithm</li> <li>GraphSAGE</li> <li>GCN (Graph Convolutional Network)</li> <li>GAT (Graph Attention Network)</li> <li>Graph Recurrent Neural Networks</li> <li>Link Prediction</li> <li>Graph Anomaly Detection</li> <li>Knowledge Graphs</li> <li>RDF vs LPG Models</li> <li>Probabilistic Graph Models</li> <li>Belief Propagation</li> <li>Label Propagation Algorithm</li> <li>Small-World Networks</li> <li>Scale-Free Networks</li> <li>Graph Randomization</li> <li>Erd\u0151s\u2013R\u00e9nyi Model</li> <li>Barab\u00e1si\u2013Albert Model</li> <li>Watts-Strogatz Model</li> <li>Percolation Theory</li> </ul> <p>Notes:</p> <ul> <li>Foundational Concepts and Definitions serve as the building blocks for understanding more complex topics in graph theory and algorithms.</li> <li>Types and Properties of Graphs help in recognizing and categorizing different kinds of graphs, which is crucial for selecting appropriate algorithms.</li> <li>Graph Representations and Data Structures are essential for implementing graph algorithms efficiently.</li> <li>Basic Graph Algorithms provide fundamental techniques for exploring and analyzing graphs.</li> <li>Shortest Path and Spanning Tree Algorithms are critical for optimization problems in networks.</li> <li>Network Flow and Matching Algorithms address problems related to resource allocation and pairing in graphs.</li> <li>Advanced Graph Algorithms and Problems cover computationally challenging topics often encountered in research and advanced applications.</li> <li>Graph Measures and Centrality Metrics allow for the analysis of node importance and network connectivity.</li> <li>Spectral Graph Theory and Clustering utilize mathematical properties to understand graph structures and identify communities.</li> <li>Graph Machine Learning and Network Models represent cutting-edge areas where machine learning intersects with graph theory, enabling advanced data analysis and applications.</li> </ul> <p>This taxonomy provides a structured way to approach the teaching and learning of graph algorithms, ensuring that foundational concepts are established before progressing to more advanced topics. It also highlights the interconnections between different areas, facilitating a comprehensive understanding of the subject.</p>"},{"location":"sims/learning-graph/03-concept-taxonomies/#add-taxonomyids-to-csv","title":"Add TaxonomyIDs to CSV","text":"<pre><code>Perfect.  We will call this our taxonomy and the number will be the ConceptID.  Now for each row in the CSV file above that enumerate the concepts and their dependencies, please add the primary taxonomy ID as a new column to the CSV file.  Return the CSV information as a single file that can be downloaded.\n</code></pre> <p>ChatGPT o1-preview Thought for 43 seconds</p> <p>Here is the updated CSV file with the primary taxonomy ID added as a new column:</p> <pre><code>ConceptID,ConceptName,Dependencies,TaxonomyID\n1,Graph Definition,,1\n2,Nodes,1,1\n3,Edges,1,1\n4,Directed Graph (Digraph),1|3,1\n5,Undirected Graph,1|3,1\n6,Weighted Graphs,1|3,1\n7,Unweighted Graphs,1|3,1\n8,Cyclic Graphs,1|16,2\n9,Acyclic Graphs (DAG),1|16,2\n10,Graph Density,1|2|3,1\n11,Degree of a Node,1|2|3,1\n12,In-degree,4|11,1\n13,Out-degree,4|11,1\n14,Path,1|2|3,1\n15,Walk,1|2|3,1\n16,Cycle,14,1\n17,Connected Graph,14,2\n18,Disconnected Graph,17,2\n19,Subgraph,1|2|3,1\n20,Bipartite Graph,1|2|3,2\n21,Complete Graph,1|2|3,2\n22,Multigraph,1|3,1\n23,Graph Isomorphism,1|2|3|19,1\n24,Self-loop,3,1\n25,Adjacent Nodes,2|3,1\n26,Incident Edges,2|3|11,1\n27,Graph Adjacency Matrix,2|3|25,3\n28,Graph Adjacency List,2|3|25,3\n29,Graph Incidence Matrix,2|3|26,3\n30,Graph Traversal,1|2|3|14,4\n31,Depth-First Search (DFS),30|33|36,4\n32,Breadth-First Search (BFS),30|34,4\n33,Stack (DFS),,3\n34,Queue (BFS),,3\n35,Backtracking,31|36,4\n36,Recursion (DFS),,4\n37,Shortest Path Problem,14,5\n38,Dijkstra\u2019s Algorithm,37|6|151,5\n39,Bellman-Ford Algorithm,37|6,5\n40,A* Search Algorithm,37|6|58,5\n41,Floyd-Warshall Algorithm,42|6,5\n42,All-Pairs Shortest Path (APSP),37,5\n43,Single-Source Shortest Path (SSSP),37,5\n44,Negative Weight Cycles,6|16,5\n45,Minimum Spanning Tree (MST),3|6|17,5\n46,Kruskal\u2019s Algorithm,45|48,5\n47,Prim\u2019s Algorithm,45,5\n48,Union-Find Algorithm,152,3\n49,Cycle Detection (MST),16|45,4\n50,Cut-Vertices,31|17,4\n51,Bridges (Edge Cut),31|17,4\n52,Eulerian Path,1|11|14,7\n53,Eulerian Circuit,52,7\n54,Hamiltonian Path,14|16,7\n55,Hamiltonian Cycle,54,7\n56,Traveling Salesman Problem (TSP),55|6,7\n57,Approximation Algorithms (TSP),56|58,7\n58,Heuristics (TSP),,7\n59,Graph Coloring,2|3,7\n60,Chromatic Number,59,7\n61,Greedy Coloring Algorithm,59,7\n62,Clique,2|3|21,7\n63,Maximum Clique Problem,62,7\n64,Independent Set,2|3|62,7\n65,Maximal Independent Set,64,7\n66,Dominating Set,2|3|64,7\n67,Vertex Cover,2|3|64,7\n68,Minimum Vertex Cover,67,7\n69,Planar Graphs,1,2\n70,Graph Embedding,1|69,2\n71,Kuratowski\u2019s Theorem,69,2\n72,Graph Minor Theorem,1|69,2\n73,Graph Duality,69,2\n74,Planarity Testing,69|71,2\n75,Face of a Graph (Planar),69|70,2\n76,Topological Sorting,9,4\n77,DAG Applications,9|76,4\n78,Strongly Connected Components (SCC),4|14|31,4\n79,Tarjan\u2019s Algorithm (SCC),78|31,4\n80,Kosaraju\u2019s Algorithm (SCC),78|31,4\n81,Articulation Points,31|17,4\n82,Bridge Finding Algorithm,51|31,4\n83,Graph Matching,2|3|20,6\n84,Bipartite Matching,83|20,6\n85,Hopcroft-Karp Algorithm,84,6\n86,Stable Matching Problem,83,6\n87,Gale-Shapley Algorithm,86,6\n88,Network Flow,1|3|6,6\n89,Max Flow Problem,88,6\n90,Ford-Fulkerson Algorithm,89,6\n91,Edmonds-Karp Algorithm,90,6\n92,Min-Cut Max-Flow Theorem,89|98,6\n93,Push-Relabel Algorithm,89,6\n94,Dinic\u2019s Algorithm,89,6\n95,Capacity Scaling Algorithm,89,6\n96,Circulation Problem,88,6\n97,Multi-Commodity Flow,88,6\n98,Cut-Set,3|14,4\n99,Cut-Set Theorem,98,4\n100,Flow Decomposition,88|14,6\n101,Flow Networks,88,6\n102,Graph Partitioning,1|98|103,9\n103,Graph Clustering,102,9\n104,k-Cuts Problem,98|102,9\n105,Modularity (Clustering),103,9\n106,Spectral Clustering,103|119|120,9\n107,Girvan-Newman Algorithm,103|115,9\n108,Louvain Method (Clustering),103,9\n109,Random Walk,1|14,9\n110,Markov Chains (Graphs),109|1,9\n111,Pagerank Algorithm,110|109,9\n112,HITS Algorithm,110|109,9\n113,Centrality Measures,1|2|3|14,8\n114,Degree Centrality,113|11,8\n115,Betweenness Centrality,113|14,8\n116,Closeness Centrality,113|14,8\n117,Eigenvector Centrality,113|27|120,8\n118,Katz Centrality,117|113,8\n119,Graph Laplacian,27|11,9\n120,Spectral Graph Theory,119|27,9\n121,Cheeger\u2019s Inequality,120,9\n122,Expander Graphs,120|121,9\n123,Graph Diameter,14|2|3,8\n124,Graph Radius,123|125,8\n125,Eccentricity,14|2,8\n126,Graph Girth,16|1,8\n127,Percolation Theory,1|130,10\n128,Small-World Networks,130|133,10\n129,Scale-Free Networks,130|132,10\n130,Graph Randomization,1,10\n131,Erd\u0151s\u2013R\u00e9nyi Model,130,10\n132,Barab\u00e1si\u2013Albert Model,130,10\n133,Watts-Strogatz Model,130,10\n134,Community Detection,103|102,9\n135,Block Models,134,9\n136,Stochastic Block Model,135|130,9\n137,Label Propagation Algorithm,134|1,10\n138,Belief Propagation,1|153,10\n139,Graph Neural Networks (GNN),154|1,10\n140,Node Embeddings,1|155,10\n141,DeepWalk Algorithm,140|109,10\n142,Node2Vec Algorithm,140|109,10\n143,GraphSAGE,140|139,10\n144,GCN (Graph Convolutional Network),139|119,10\n145,GAT (Graph Attention Network),139|156,10\n146,Graph Recurrent Neural Networks,139|157,10\n147,Link Prediction,1|140|155,10\n148,Graph Anomaly Detection,1|155|140,10\n149,Knowledge Graphs,1,10\n150,RDF vs LPG Models,149,10\n151,Priority Queue,,3\n152,Disjoint Set Data Structure,,3\n153,Probabilistic Graph Models,1|158,10\n154,Neural Networks,155,10\n155,Machine Learning,159,10\n156,Attention Mechanism,154,10\n157,Recurrent Neural Networks,154,10\n158,Probability Theory,,1\n159,Data Science,,1\n</code></pre> <p>Instructions for Downloading:</p> <p>You can download the CSV content by copying it into a text editor and saving it with a .csv extension.</p> <p>Taxonomy Categories:</p> <p>Here is a reminder of the taxonomy categories and their corresponding IDs:</p> <ol> <li>Foundational Concepts and Definitions</li> <li>Types and Properties of Graphs</li> <li>Graph Representations and Data Structures</li> <li>Basic Graph Algorithms</li> <li>Shortest Path and Spanning Tree Algorithms</li> <li>Network Flow and Matching Algorithms</li> <li>Advanced Graph Algorithms and Problems</li> <li>Graph Measures and Centrality Metrics</li> <li>Spectral Graph Theory and Clustering</li> <li>Graph Machine Learning and Network Models</li> </ol> <p>Notes:</p> <ul> <li>The TaxonomyID column indicates the primary category each concept belongs to, based on the taxonomy.</li> <li>All concepts have been assigned to one of the ten taxonomy categories.</li> <li>Dependencies remain the same as in the previous CSV file.</li> </ul>"},{"location":"sims/learning-graph/03-concept-taxonomies/#legend-prompt","title":"Legend Prompt","text":"<pre><code>Convert this taxonomy list into an HTML table with the the following format:\n\n&lt;table&gt;\n            &lt;tr&gt;\n                &lt;td&gt;Foundational Concepts and Definitions&lt;/td&gt;\n                &lt;td style=\"background-color: red; color: white;\"&gt;Red&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;Level 1&lt;/td&gt;\n                &lt;td style=\"background-color: orange;\"&gt;Orange&lt;/td&gt;\n            &lt;/tr&gt;\n</code></pre>"},{"location":"sims/learning-graph/03-concept-taxonomies/#response_1","title":"Response","text":"<pre><code>&lt;table&gt;\n    &lt;tr&gt;\n        &lt;td&gt;Foundational Concepts and Definitions&lt;/td&gt;\n        &lt;td style=\"background-color: red; color: white;\"&gt;Red&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;Types and Properties of Graphs&lt;/td&gt;\n        &lt;td style=\"background-color: orange;\"&gt;Orange&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;Graph Representations and Data Structures&lt;/td&gt;\n        &lt;td style=\"background-color: yellow;\"&gt;Yellow&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;Basic Graph Algorithms&lt;/td&gt;\n        &lt;td style=\"background-color: green; color: white;\"&gt;Green&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;Shortest Path and Spanning Tree Algorithms&lt;/td&gt;\n        &lt;td style=\"background-color: blue; color: white;\"&gt;Blue&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;Network Flow and Matching Algorithms&lt;/td&gt;\n        &lt;td style=\"background-color: purple; color: white;\"&gt;Purple&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;Advanced Graph Algorithms and Problems&lt;/td&gt;\n        &lt;td style=\"background-color: pink; color: black;\"&gt;Pink&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;Graph Measures and Centrality Metrics&lt;/td&gt;\n        &lt;td style=\"background-color: lightgray;\"&gt;Light Gray&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;Spectral Graph Theory and Clustering&lt;/td&gt;\n        &lt;td style=\"background-color: brown; color: white;\"&gt;Brown&lt;/td&gt;\n    &lt;/tr&gt;\n    &lt;tr&gt;\n        &lt;td&gt;Graph Machine Learning and Network Models&lt;/td&gt;\n        &lt;td style=\"background-color: teal; color: white;\"&gt;Teal&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre>"},{"location":"sims/learning-graph/04-visualizing-concepts/","title":"Visualizing Concepts","text":"<p>We will use vis.js to visualize this learning graph.</p> <p>First we need to convert the CSV file into JSON.  ChatGPT can generate this conversion for us.</p>"},{"location":"sims/learning-graph/04-visualizing-concepts/#prompt","title":"Prompt","text":"<pre><code># first line must be\n# ID,ConceptName,Dependencies,TaxonomyID\nimport csv\nimport json\n\ndef csv_to_visjs_json(csv_filename, json_filename):\n    nodes = []\n    edges = []\n    categories = {}\n\n    # Read the CSV file\n    with open(csv_filename, 'r', newline='', encoding='utf-8') as csvfile:\n        reader = csv.DictReader(csvfile)\n\n        for row in reader:\n            # Extract node information\n            try:\n                concept_id = int(row['ID'])\n            except ValueError:\n                print(f\"Invalid ID '{row['ID']}' skipped.\")\n                continue  # Skip rows with invalid ID\n\n            concept_name = row['ConceptName'].strip()\n            if not concept_name:\n                print(f\"Empty Concept Name for ID {concept_id} skipped.\")\n                continue  # Skip nodes without a name\n\n            try:\n                category_id = int(row['TaxonomyID'])\n            except ValueError:\n                print(f\"Invalid TaxonomyID '{row['TaxonomyID']}' for ID {concept_id} skipped.\")\n                continue  # Skip rows with invalid Category ID\n\n            # Create node object\n            node = {\n                'id': concept_id,\n                'label': concept_name,\n                'group': category_id\n            }\n            nodes.append(node)\n\n            # Process Dependencies to create edges\n            dependency_list = row['Dependencies']\n            if dependency_list:\n                dependencies = dependency_list.split('|')\n                for dep in dependencies:\n                    dep = dep.strip()\n                    if dep:\n                        try:\n                            dep_id = int(dep)\n                            edge = {\n                                'from': concept_id,\n                                'to': dep_id\n                            }\n                            edges.append(edge)\n                        except ValueError:\n                            print(f\"Invalid DependencyID '{dep}' for ID {concept_id} skipped.\")\n                            continue  # Skip invalid DependencyIDs\n\n    # If not using separate groups, omit the 'groups' key\n    data = {\n        'nodes': nodes,\n        'edges': edges\n    }\n\n    # Write the JSON output\n    with open(json_filename, 'w', encoding='utf-8') as jsonfile:\n        json.dump(data, jsonfile, indent=4)\n\n    print(f\"Successfully converted '{csv_filename}' to '{json_filename}'.\")\n\nif __name__ == \"__main__\":\n    # Define input and output file names\n    input_csv = 'graph-algorithms.csv'\n    output_json = 'graph-algorithm.json'\n\n    # Convert CSV to JSON\n    csv_to_visjs_json(input_csv, output_json)\n</code></pre>"},{"location":"sims/legends/","title":"Legends","text":"<p>Legend Version 1</p> <p>Legend Version 2</p> <p>vis.js Example</p>"},{"location":"sims/legends/#process","title":"Process","text":"<ol> <li>Define the x and y location of the upper left corner of the legend</li> <li>Define the spacing between the legend rows (e.g. step=70)</li> <li>Push nodes into the graph for the legend.  Each node must have the following attributes<ol> <li>id (integer)</li> <li>label (string)</li> <li>group (string)</li> <li>value (integer)</li> <li>fixed: true (boolean)</li> <li>physics: false (boolean)</li> </ol> </li> </ol>"},{"location":"sims/legends/#setting-up-fixed-nodes","title":"Setting up Fixed Nodes","text":"<pre><code>// legend \n        var mynetwork = document.getElementById(\"mynetwork\");\n        var x = -mynetwork.clientWidth / 2 + 50;\n        var y = -mynetwork.clientHeight / 2 + 50;\n        var step = 70;\n        nodes.push({\n          id: 1000,\n          x: x,\n          y: y,\n          label: \"Internet\",\n          group: \"internet\",\n          value: 1,\n          fixed: true,\n          physics: false,\n        });\n        nodes.push({\n          id: 1001,\n          x: x,\n          y: y + step,\n          label: \"Switch\",\n          group: \"switch\",\n          value: 1,\n          fixed: true,\n          physics: false,\n        });\n        nodes.push({\n          id: 1002,\n          x: x,\n          y: y + 2 * step,\n          label: \"Server\",\n          group: \"server\",\n          value: 1,\n          fixed: true,\n          physics: false,\n        });\n        nodes.push({\n          id: 1003,\n          x: x,\n          y: y + 3 * step,\n          label: \"Computer\",\n          group: \"desktop\",\n          value: 1,\n          fixed: true,\n          physics: false,\n        });\n        nodes.push({\n          id: 1004,\n          x: x,\n          y: y + 4 * step,\n          label: \"Smartphone\",\n          group: \"mobile\",\n          value: 1,\n          fixed: true,\n          physics: false,\n        });\n</code></pre>"},{"location":"sims/legends/#full-example","title":"Full Example","text":"<p>```js</p> <pre><code>  var nodes = null;\n  var edges = null;\n  var network = null;\n\n  var LENGTH_MAIN = 350,\n    LENGTH_SERVER = 150,\n    LENGTH_SUB = 50,\n    WIDTH_SCALE = 2,\n    GREEN = \"green\",\n    RED = \"#C5000B\",\n    ORANGE = \"orange\",\n    //GRAY = '#666666',\n    GRAY = \"gray\",\n    BLACK = \"#2B1B17\";\n\n  // Called when the Visualization API is loaded.\n  function draw() {\n    // Create a data table with nodes.\n    nodes = [];\n\n    // Create a data table with links.\n    edges = [];\n\n    nodes.push({ id: 1, label: \"192.168.0.1\", group: \"switch\", value: 10 });\n    nodes.push({ id: 2, label: \"192.168.0.2\", group: \"switch\", value: 8 });\n    nodes.push({ id: 3, label: \"192.168.0.3\", group: \"switch\", value: 6 });\n    edges.push({\n      from: 1,\n      to: 2,\n      length: LENGTH_MAIN,\n      width: WIDTH_SCALE * 6,\n      label: \"0.71 mbps\",\n    });\n    edges.push({\n      from: 1,\n      to: 3,\n      length: LENGTH_MAIN,\n      width: WIDTH_SCALE * 4,\n      label: \"0.55 mbps\",\n    });\n\n    // group around 2\n    for (var i = 100; i &lt;= 104; i++) {\n      var value = 1;\n      var width = WIDTH_SCALE * 2;\n      var color = GRAY;\n      var label = null;\n\n      if (i === 103) {\n        value = 5;\n        width = 3;\n      }\n      if (i === 102) {\n        color = RED;\n        label = \"error\";\n      }\n\n      nodes.push({\n        id: i,\n        label: \"192.168.0.\" + i,\n        group: \"desktop\",\n        value: value,\n      });\n      edges.push({\n        from: 2,\n        to: i,\n        length: LENGTH_SUB,\n        color: color,\n        fontColor: color,\n        width: width,\n        label: label,\n      });\n    }\n    nodes.push({\n      id: 201,\n      label: \"192.168.0.201\",\n      group: \"desktop\",\n      value: 1,\n    });\n    edges.push({\n      from: 2,\n      to: 201,\n      length: LENGTH_SUB,\n      color: GRAY,\n      width: WIDTH_SCALE,\n    });\n\n    // group around 3\n    nodes.push({\n      id: 202,\n      label: \"192.168.0.202\",\n      group: \"desktop\",\n      value: 4,\n    });\n    edges.push({\n      from: 3,\n      to: 202,\n      length: LENGTH_SUB,\n      color: GRAY,\n      width: WIDTH_SCALE * 2,\n    });\n    for (var i = 230; i &lt;= 231; i++) {\n      nodes.push({\n        id: i,\n        label: \"192.168.0.\" + i,\n        group: \"mobile\",\n        value: 2,\n      });\n      edges.push({\n        from: 3,\n        to: i,\n        length: LENGTH_SUB,\n        color: GRAY,\n        fontColor: GRAY,\n        width: WIDTH_SCALE,\n      });\n    }\n\n    // group around 1\n    nodes.push({\n      id: 10,\n      label: \"192.168.0.10\",\n      group: \"server\",\n      value: 10,\n    });\n    edges.push({\n      from: 1,\n      to: 10,\n      length: LENGTH_SERVER,\n      color: GRAY,\n      width: WIDTH_SCALE * 6,\n      label: \"0.92 mbps\",\n    });\n    nodes.push({\n      id: 11,\n      label: \"192.168.0.11\",\n      group: \"server\",\n      value: 7,\n    });\n    edges.push({\n      from: 1,\n      to: 11,\n      length: LENGTH_SERVER,\n      color: GRAY,\n      width: WIDTH_SCALE * 3,\n      label: \"0.68 mbps\",\n    });\n    nodes.push({\n      id: 12,\n      label: \"192.168.0.12\",\n      group: \"server\",\n      value: 3,\n    });\n    edges.push({\n      from: 1,\n      to: 12,\n      length: LENGTH_SERVER,\n      color: GRAY,\n      width: WIDTH_SCALE,\n      label: \"0.3 mbps\",\n    });\n\n    nodes.push({\n      id: 204,\n      label: \"Internet\",\n      group: \"internet\",\n      value: 10,\n    });\n    edges.push({\n      from: 1,\n      to: 204,\n      length: 200,\n      width: WIDTH_SCALE * 3,\n      label: \"0.63 mbps\",\n    });\n\n    // legend\n    var mynetwork = document.getElementById(\"mynetwork\");\n    var x = -mynetwork.clientWidth / 2 + 50;\n    var y = -mynetwork.clientHeight / 2 + 50;\n    var step = 70;\n    nodes.push({\n      id: 1000,\n      x: x,\n      y: y,\n      label: \"Internet\",\n      group: \"internet\",\n      value: 1,\n      fixed: true,\n      physics: false,\n    });\n    nodes.push({\n      id: 1001,\n      x: x,\n      y: y + step,\n      label: \"Switch\",\n      group: \"switch\",\n      value: 1,\n      fixed: true,\n      physics: false,\n    });\n    nodes.push({\n      id: 1002,\n      x: x,\n      y: y + 2 * step,\n      label: \"Server\",\n      group: \"server\",\n      value: 1,\n      fixed: true,\n      physics: false,\n    });\n    nodes.push({\n      id: 1003,\n      x: x,\n      y: y + 3 * step,\n      label: \"Computer\",\n      group: \"desktop\",\n      value: 1,\n      fixed: true,\n      physics: false,\n    });\n    nodes.push({\n      id: 1004,\n      x: x,\n      y: y + 4 * step,\n      label: \"Smartphone\",\n      group: \"mobile\",\n      value: 1,\n      fixed: true,\n      physics: false,\n    });\n\n    // create a network\n    var container = document.getElementById(\"mynetwork\");\n    var data = {\n      nodes: nodes,\n      edges: edges,\n    };\n    var options = {\n      nodes: {\n        scaling: {\n          min: 16,\n          max: 32,\n        },\n      },\n      edges: {\n        color: GRAY,\n        smooth: false,\n      },\n      physics: {\n        barnesHut: { gravitationalConstant: -30000 },\n        stabilization: { iterations: 2500 },\n      },\n      groups: {\n        switch: {\n          shape: \"triangle\",\n          color: \"#FF9900\", // orange\n        },\n        desktop: {\n          shape: \"dot\",\n          color: \"#2B7CE9\", // blue\n        },\n        mobile: {\n          shape: \"dot\",\n          color: \"#5A1E5C\", // purple\n        },\n        server: {\n          shape: \"square\",\n          color: \"#C5000B\", // red\n        },\n        internet: {\n          shape: \"square\",\n          color: \"#109618\", // green\n        },\n      },\n    };\n    network = new vis.Network(container, data, options);\n  }\n```\n</code></pre>"},{"location":"sims/matching/","title":"Graph Matching","text":"<p>Many people don't list matching problems as simply graph problems. Perhaps this is because people try to use spreadsheets to attack matching problems. However, as we will see, graphs are ideal at helping people optimize matching problems.</p> <p>We are going to look at several examples:</p> <ol> <li>The schema matching problem occurs when are attempting to import new data into a database and we need to map new incoming data elements to existing data elements.  The schema matching problem is a key cost factor when building data warehouse systems.  After the data maps are created code can be generated to convert incoming data to data inserts and updates into an existing system.</li> <li>The resource matching problem is where we are trying to match things like people to positions, students to mentors or people to projects within a set of constraints.  For example, matching students that have five preferences to 20 potential projects. There are existing Python libraries such as matching that are useful for executing these algorithms, but these algorithms often lack a user interface for viewing, testing and interactively changing the match suggestions.</li> <li>The entity resolution problem is where new records are being added to an existing database but they must be linked to the correct record.  This is also known as the Record Linkage, data matching or data linkage problem.</li> </ol>"},{"location":"sims/matching/#some-sample-matching-p5js-example","title":"Some Sample Matching p5.js Example","text":"<ul> <li> <p>Curved Line Matching</p> </li> <li> <p>Data Element Matching</p> </li> <li> <p>Custom Curve With Percent - I used generative AI to create a custom version of the curve() function that had one additional parameter: the percent of the line to be drawn.</p> </li> <li> <p>curveVertex Demo</p> </li> </ul>"},{"location":"sims/matching/#sample-visjs-arrows-for-matching","title":"Sample Vis.js Arrows for Matching","text":"<ul> <li>Vis.js Arrow Alignment - this is a great demo of \"arrow alignment\" using curves.</li> </ul>"},{"location":"sims/matching/#references","title":"References","text":"<ul> <li>Wikipedia Schema Matching</li> <li>Wikipedia Entity Resolution</li> <li>Entity Resolution Quantexa</li> </ul>"},{"location":"sims/page-rank/","title":"Page Rank","text":"![Image Name](./page-rank.png){ width=\"400\" }    Figure caption. <p>Run the Page Rank MicroSim Edit the PageRank MicroSim</p> <p>When the \"Update PageRank\" button is pressed multiple times in the p5.js sketch, the PageRank values for each node in the graph are recalculated and updated iteratively. Here's a breakdown of what happens during each update:</p> <ol> <li> <p>Initial PageRank Distribution: Initially, every node is assigned the same PageRank value, typically <code>1.0</code>. This represents an equal distribution of 'importance' or 'rank' among all nodes.</p> </li> <li> <p>PageRank Calculation: On each update, the PageRank for each node is recalculated based on the PageRank algorithm. The new PageRank of a node is determined by the sum of the PageRank values of its incoming links, divided by the number of outgoing links from each of those nodes. This is modified by the damping factor, which is a constant (typically set around 0.85) used to model the probability of randomly jumping to another node in the network.</p> </li> <li> <p>Damping Factor: The damping factor (0.85 in your case) plays a critical role. It accounts for the likelihood that a person randomly clicking on links will eventually stop clicking. The damping factor is applied to the sum of PageRank values passed from neighboring nodes. The remaining part <code>(1 - damping factor) / number of nodes</code> is added to each node's score to ensure that the total PageRank in the system remains constant.</p> </li> <li> <p>Iterative Updates: Each time \"Update PageRank\" is pressed, the PageRank values are recalculated using the values from the previous iteration. With each iteration, the PageRank values gradually converge to a stable state where they don't change much with further iterations. This stable state reflects the relative 'importance' of each node within the network.</p> </li> <li> <p>Visual Representation: In the sketch, the diameter of each node is proportional to its PageRank value, so pressing the button repeatedly will adjust the sizes of the nodes to reflect their updated ranks.</p> </li> <li> <p>Convergence: After a sufficient number of iterations, the PageRank values will converge, meaning that additional iterations won't significantly change the values. The number of iterations needed for convergence depends on the structure of the graph and the damping factor.</p> </li> </ol> <p>In summary, each press of the \"Update PageRank\" button refines the estimation of each node's importance within the graph, moving the system closer to a balanced state where the PageRank values accurately represent the significance of each node based on its connections.</p>"},{"location":"sims/page-rank/#directed-edges-example","title":"Directed Edges Example","text":"<p>In this updated sketch:</p> <ul> <li>Each <code>Node</code> now has two arrays: <code>outgoing</code> and <code>incoming</code>, representing outgoing and incoming links respectively.</li> <li>The <code>addLink</code> method in the <code>Node</code> class creates a directed edge from one node to another.</li> <li>The <code>drawEdges</code> method in the <code>Node</code> class calls the <code>drawArrow</code> function to visually represent the directed edges.</li> <li>The <code>drawArrow</code> function is responsible for drawing an arrow from one node to another, indicating the direction of the link.</li> <li>The <code>connectRandomly</code> method in the <code>Graph</code> class creates directed edges between nodes, simulating hyperlinks between web pages.</li> </ul> <p>By pressing the \"Update PageRank\" button, the PageRank values are recalculated based on these directed edges, visually depicting the influence of each web page in the network.</p>"},{"location":"sims/shortest-path/","title":"Shortest Path","text":"<p>Given a graph, how do we find the shortest path between two points on the graph?</p> <p>The classic way to do this is to use Dijkstra's shortest path algorithm.</p> <p>In this lesson, we describe what Dijkstra's shortest path algorithm is and how it is used to solve real-world practical graph analytics problems.</p>"},{"location":"sims/shortest-path/#background","title":"Background","text":"<p>Dijkstra's shortest path algorithm is a famous algorithm in computer science, used for finding the shortest paths between nodes in a graph, which may represent, for example, road networks. It was conceived by computer scientist Edsger W. Dijkstra in 1956.</p>"},{"location":"sims/shortest-path/#how-dijkstras-algorithm-works","title":"How Dijkstra's Algorithm Works:","text":"<ol> <li> <p>Initialization: It starts with a source node and initializes the shortest path to all other nodes as infinity (or a very high value), and to the source node as 0.</p> </li> <li> <p>Exploration of Neighbors: The algorithm then repeatedly selects the node with the smallest known distance from the source node that hasn't been processed yet.</p> </li> <li> <p>Distance Update: For the selected node, it checks all its neighbors. If the sum of the current shortest distance to that node and the weight of the edge to a neighbor is less than the known distance to the neighbor, it updates the shortest distance to the neighbor.</p> </li> <li> <p>Mark as Processed: The node is then marked as processed, meaning it will not be checked again.</p> </li> <li> <p>Repeat: Steps 2-4 are repeated until all nodes have been processed or the shortest path to all reachable nodes have been found.</p> </li> </ol>"},{"location":"sims/shortest-path/#characteristics","title":"Characteristics:","text":"<ul> <li>Greedy Algorithm: It makes the optimal choice at each step, aiming to find the global optimum.</li> <li>Single-Source Shortest Paths: It finds the shortest paths from a single source node to all other nodes.</li> <li>Non-Negative Weights: It works correctly only when all edge weights are non-negative.</li> </ul>"},{"location":"sims/shortest-path/#real-world-applications","title":"Real-World Applications:","text":"<ol> <li> <p>GPS and Routing Systems: One of the most common applications is in GPS systems for finding the shortest path between two locations on a map.</p> </li> <li> <p>Network Routing Protocols: In computer networks, routing protocols like OSPF (Open Shortest Path First) use Dijkstra's algorithm to calculate the shortest path for data packets.</p> </li> <li> <p>Social Networking Applications: Finding shortest paths in social networks, like the degrees of separation between people.</p> </li> <li> <p>Urban Planning and Traffic Management: Used for analyzing traffic patterns and planning road networks in urban areas.</p> </li> <li> <p>Telecommunications: Used in telephone network systems to route calls through the network in the most efficient way.</p> </li> <li> <p>Biological Networks: In bioinformatics, it's used to understand and analyze the pathways in biological networks.</p> </li> <li> <p>Robotics and Artificial Intelligence: For pathfinding in robotics and certain AI applications, like navigating through a grid or network.</p> </li> </ol> <p>Dijkstra's algorithm is highly versatile and forms the basis of many complex systems and applications in the real world, where the efficient traversal of a graph is necessary.</p> <p>Vis-js Demo</p> <p>ChatGPT Dialog</p>"},{"location":"sims/spanning-tree/","title":"Spanning Trees","text":"<p>Given a list of vertices with distances between them, what is the shortest path that connects them all together?</p> <p>This is an important algorithm for things such as network design, power distribution and many other areas.  For example, in connecting houses to the power grid, how can you use the least amount of wire?</p>"},{"location":"sims/spanning-tree/#_1","title":"Spanning Tree","text":"<p>Jazon Jiao</p>"},{"location":"sims/template/","title":"MicroSim Template","text":"![Image Name](./image.png){ width=\"400\" }    Figure caption. <p>Link to Demo Edit MicroSim</p>"},{"location":"sims/template/#about-this-microsim","title":"About this MicroSim","text":"<p>This MicroSim teaches us how to specify the drawing of a static filled circle.</p>"},{"location":"sims/template/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a single file p5.js sketch.\nDraw a green circle on a 600x400 canvas with a radius of 200.\n</code></pre>"},{"location":"sims/template/#sample-response","title":"Sample Response","text":"<pre><code>let canvasHeight = 400;\nlet aspectRatio = 1.91; // Open Graph standard\nlet canvasWidth = canvasHeight * aspectRatio;\nlet radius = 200;\nfunction setup() {\nconst canvas = createCanvas(canvasWidth, canvasHeight);\n  canvas.parent('canvas-container');\n  fill(245);\n  rect(0,0, canvasWidth, canvasHeight);\n  fill('green');\n  circle(canvasWidth/2, canvasHeight/2, radius);\n}\n</code></pre>"},{"location":"sims/template/#lesson-plan","title":"Lesson Plan","text":""},{"location":"sims/template/#grade-level-subject-and-topic","title":"Grade Level, Subject and Topic","text":"<p>9th grade geometry. Circle and radius.</p>"},{"location":"sims/template/#activities","title":"Activities","text":""},{"location":"sims/template/#fill-color","title":"Fill Color","text":"<p>Change the color in the prompt.  You can specify any one of the 140 named colors.</p>"},{"location":"sims/template/#border-weight","title":"Border Weight","text":"<p>Change the prompt to include a black border of width 10.</p>"},{"location":"sims/template/#border-color","title":"Border Color","text":"<p>Change the prompt to make the border purple.</p>"},{"location":"sims/template/#change-the-radius","title":"Change the Radius","text":"<p>Change the prompt to make the circle smaller or larger by changing the radius from 10 to 200.</p>"},{"location":"sims/template/#change-the-location","title":"Change the Location","text":"<p>Change the prompt to move the circle to the left or right.</p>"},{"location":"sims/weighted-graph/","title":"Weighted Graph","text":"<p>Link to Demo Edit</p>"},{"location":"sims/weighted-graph/#create-a-list-of-nodes-and-place-them-on-the-canvas","title":"Create a list of nodes and place them on the canvas","text":""},{"location":"sims/weighted-graph/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Create a list of the 10 large major metropolitan cities\nin the US and place them on a 400x400 canvas.\nRound each point to the nearest integer.\nThen create a p5.js sketch that will connect each\ncity to the nearest three cities.\nDraw a graph that places the distance between\nthe nodes at the halfway point between the nodes.\n</code></pre> <pre><code>// weighted graph example\n// I used ChatGPT to generate sample cities and moved them around\nlet cities = {\n  \"New York\":      {x: 520, y: 40},\n  \"Los Angeles\":   {x: 50,  y:180},\n  \"Chicago\":       {x: 290, y:120},\n  \"Phoenix\":       {x: 150, y:310},\n  \"Miami\":         {x: 510, y:340},\n  \"San Diego\":     {x: 70,  y:330},\n  \"Dallas\":        {x: 270, y:290},\n  \"Seattle\":       {x: 50,  y: 30},\n  \"Minneapolis\":   {x: 250, y: 40},\n  \"San Francisco\": {x: 160, y:150}\n};\n\nfunction setup() {\n  const canvas = createCanvas(550, 440);\n  var mainElement = document.querySelector('main');\n  canvas.parent(mainElement);\n  textSize(14);\n  calculateNeighbors();\n}\n\nfunction draw() {\n  background(255);\n\n  for (let city in cities) {\n    // draw lines to nearest three cities\n    for (let neighbor of cities[city].neighbors) {\n      let neighborX = cities[neighbor].x;\n      let neighborY = cities[neighbor].y;\n      stroke(0);\n      // need to put the line in\n      line(cities[city].x, cities[city].y, neighborX, neighborY);\n      // put the distance text at midpoint\n      let midX = (cities[city].x + neighborX) / 2;\n      let midY = (cities[city].y + neighborY) / 2;\n      // calculate the distance\n      let distance = dist(cities[city].x, cities[city].y, neighborX, neighborY);\n      // place a white box behind weight\n      noStroke();\n      fill('white');\n      rect(midX-14, midY-8, 28, 16);\n      // draw the text in black and align it\n      fill('black');\n      textAlign(CENTER,CENTER);\n      // nf is number format with 0 decimal places\n      text(nf(distance, 0, 0), midX, midY);\n    }\n  }\n  for (let city in cities) {\n    fill(0,100,255);\n    circle(cities[city].x, cities[city].y, 20);\n  }\n\n  noLoop(); // Static drawing\n}\n\nfunction calculateNeighbors() {\n  for (let city in cities) {\n    let distances = [];\n    for (let otherCity in cities) {\n      if (otherCity !== city) {\n        let d = dist(cities[city].x, cities[city].y, cities[otherCity].x, cities[otherCity].y);\n        distances.push({ city: otherCity, distance: d });\n      }\n    }\n    distances.sort((a, b) =&gt; a.distance - b.distance);\n    cities[city].neighbors = distances.slice(0, 3).map(d =&gt; d.city);\n  }\n\n}\n</code></pre>"},{"location":"vis/","title":"Vis Tutorials","text":""},{"location":"vis/#basic-properties-of-nodes-and-edges","title":"Basic Properties of Nodes and Edges","text":""},{"location":"vis/#lab-1","title":"Lab 1","text":"<p>Lab 1</p>"},{"location":"vis/#lab-2-json","title":"Lab 2 - JSON","text":"<p>Learn the JSON format</p> <p>Lab 2</p>"},{"location":"vis/#lab-3-node-properties","title":"Lab 3 - Node Properties","text":"<p>Learn the Properties of a Node</p> <p>Lab 3</p>"},{"location":"vis/#lab-4-custom-shapes","title":"Lab 4 - Custom Shapes","text":"<p>Lab 4 - Custom Shapes</p>"},{"location":"vis/#examples","title":"Examples","text":"<p>Concept Dependency Graph</p>"},{"location":"vis/#graph-editor","title":"Graph Editor","text":"<p>Learn how to create an interactive graph editor</p> <p>Graph Editor</p>"},{"location":"vis/#csv-reader","title":"CSV-Reader","text":"<p>CSV Reader</p>"},{"location":"vis/#node-enricher","title":"Node Enricher","text":"<p>Node Enricher</p>"},{"location":"vis/concept-dependency-graph/","title":"Concept Dependency Graph","text":"<p>SampleConcept Dependency Graph for Ohm's Law</p> <p>A Concept Dependency Graph is a specific type of graph that has the following properties.</p> <ol> <li>Each Concept is represented by a vertex and all concepts have a short name called the \"label\".</li> <li>By default circles are used to represent concepts in a graph.</li> <li>To learn a new Concept, you must understand the prerequisite concepts called the dependant concepts.</li> <li>Concepts each have a DEPENDS_ON directed link that points to what other Concepts any concept depends on.  To keep the chart ink smaller, the abbreviation \"dep\" is often used.</li> <li>A course is a collection of Concepts that must be learned in an approximate order.</li> <li>Every course has a collection of background foundational concepts that should be mastered before the student takes the course.</li> <li>Concepts that are prerequisites for the course often appear on the left edge of the concept graph at a location of x=-300.</li> <li>Advanced concepts often appear on the right at x=300</li> <li>By convention, concrete physical concepts are lower in the graph and more abstract mathematical concepts are initially located toward the top of the graph.</li> <li>When we want to focus on a concept, that concept is displayed in a larger font.</li> </ol>"},{"location":"vis/concept-dependency-graph/#sample-prompt","title":"Sample Prompt","text":"<pre><code>Generate a vis.js application that shows what concepts must\nbe mastered before you understand Ohm's Law.\n\nUse this graph data:\n\n// create an array with nodes\n    var nodes = new vis.DataSet([\n        {id: 1, label: \"Ohm's Law\", color: \"wheat\", size: 150, x: 150, y: 0, fixed: true,font: { size: 24 }, color: {border: \"black\"}},\n        {id: 2, label: 'Voltage', color: \"tan\"},\n        {id: 3, label: 'Current', color: \"tan\"},\n        {id: 4, label: 'Resistance', color: \"tan\"},\n        {id: 5, label: 'Linear Equations', color: \"coral\", shape: \"box\", x: -150, y: 0, fixed: true}\n    ]);\n\n    // create an array with edges\n    var edges = new vis.DataSet([\n        {from: 1, to: 2, arrows: 'to', label: 'DEPENDS_ON' },\n        {from: 1, to: 3, arrows: 'to', label: 'DEPENDS_ON' },\n        {from: 1, to: 4, arrows: 'to', label: 'DEPENDS_ON' },\n        {from: 1, to: 5, arrows: 'to', label: 'DEPENDS_ON' }\n    ]);\n</code></pre>"},{"location":"vis/lab-01/","title":"Vis Tutorial 1","text":"<p>Lab 1</p> <pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;script type=\"text/javascript\" src=\"https://unpkg.com/vis-network/standalone/umd/vis-network.min.js\"&gt;&lt;/script&gt;\n\n    &lt;style type=\"text/css\"&gt;\n        #mynetwork {\n            width: 600px;\n            height: 400px;\n            border: 1px solid lightgray;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"mynetwork\"&gt;&lt;/div&gt;\n&lt;a href=\"lab-01\"&gt;Back to Lesson&lt;/a&gt;\n&lt;script type=\"text/javascript\"&gt;\n    // create an array with nodes\n    var nodes = new vis.DataSet([\n        {id: 1, label: 'Node 1'},\n        {id: 2, label: 'Node 2'},\n        {id: 3, label: 'Node 3'},\n        {id: 4, label: 'Node 4'},\n        {id: 5, label: 'Node 5'}\n    ]);\n\n    // create an array with edges\n    var edges = new vis.DataSet([\n        {from: 1, to: 3},\n        {from: 1, to: 2},\n        {from: 2, to: 4},\n        {from: 2, to: 5}\n    ]);\n\n    // create a network\n    var container = document.getElementById('mynetwork');\n\n    // provide the data in the vis format\n    var data = {\n        nodes: nodes,\n        edges: edges\n    };\n    var options = {};\n\n    // initialize your network!\n    var network = new vis.Network(container, data, options);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"vis/lab-02/","title":"Lab 2: JSON","text":"<p>Run Lab 2</p>"},{"location":"vis/lab-02/#prompt","title":"Prompt","text":"<pre><code>Refactor the attached vis.js program to read the data\nfrom a file called \"lab-02.json\" and store\nthe JavaScript in a separate file called lab-02.js\n</code></pre>"},{"location":"vis/lab-02/#chatgpt-4o-response","title":"ChatGPT 4o Response","text":"<p>To refactor your <code>lab-01.html</code> file, we can follow these steps:</p> <ol> <li>Move the JavaScript code to a separate file called <code>lab-02.js</code>.</li> <li>Fetch the node and edge data from a separate <code>lab-02.json</code> file.</li> <li>Refactor the HTML to reference the new JavaScript file and load the JSON data dynamically.</li> </ol> <p>Here is how we can structure the files:</p>"},{"location":"vis/lab-02/#refactored-html-lab-01html","title":"Refactored HTML (<code>lab-01.html</code>):","text":"<pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;script type=\"text/javascript\" src=\"https://unpkg.com/vis-network/standalone/umd/vis-network.min.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\" src=\"network.js\"&gt;&lt;/script&gt;\n\n    &lt;style type=\"text/css\"&gt;\n        #mynetwork {\n            width: 600px;\n            height: 400px;\n            border: 1px solid lightgray;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"mynetwork\"&gt;&lt;/div&gt;\n&lt;a href=\"lab-01\"&gt;Back to Lesson&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"vis/lab-02/#javascript-lab-02js","title":"JavaScript (<code>lab-02.js</code>):","text":"<pre><code>// Fetch data from the JSON file\nfetch('lab-02.json')\n    .then(response =&gt; response.json())\n    .then(data =&gt; {\n        // Parse the data from JSON\n        const nodes = new vis.DataSet(data.nodes);\n        const edges = new vis.DataSet(data.edges);\n\n        // Create a network\n        const container = document.getElementById('mynetwork');\n        const networkData = {\n            nodes: nodes,\n            edges: edges\n        };\n        const options = {};\n\n        // Initialize the network\n        const network = new vis.Network(container, networkData, options);\n    })\n    .catch(error =&gt; console.error('Error loading the network data:', error));\n</code></pre>"},{"location":"vis/lab-02/#json-file-lab-01json","title":"JSON File (<code>lab-01.json</code>):","text":"<pre><code>{\n    \"nodes\": [\n        {\"id\": 1, \"label\": \"Node 1\"},\n        {\"id\": 2, \"label\": \"Node 2\"},\n        {\"id\": 3, \"label\": \"Node 3\"},\n        {\"id\": 4, \"label\": \"Node 4\"},\n        {\"id\": 5, \"label\": \"Node 5\"}\n    ],\n    \"edges\": [\n        {\"from\": 1, \"to\": 3},\n        {\"from\": 1, \"to\": 2},\n        {\"from\": 2, \"to\": 4},\n        {\"from\": 2, \"to\": 5}\n    ]\n}\n</code></pre>"},{"location":"vis/lab-02/#explanation","title":"Explanation:","text":"<ul> <li>The HTML file now only includes the necessary script tags and references the new JavaScript file (<code>network.js</code>).</li> <li>The <code>network.js</code> script fetches the data from <code>lab-01.json</code> and initializes the network once the data is loaded.</li> <li>The <code>lab-01.json</code> file contains the nodes and edges in a format that can be easily fetched and parsed in JavaScript.</li> </ul> <p>With this refactor, your data can now be dynamically loaded from the JSON file, and your JavaScript code is cleanly separated from the HTML.</p>"},{"location":"vis/lab-03/","title":"Vis Tutorial Lesson 3: Node Properties","text":"<p>Run Lab 3 HTML</p> <p>In this lab we learn how to change the properties of each node including:</p> <ol> <li>The shape</li> <li>The background color</li> <li>The size</li> <li>The font color</li> </ol>"},{"location":"vis/lab-03/#prompt","title":"Prompt","text":"<pre><code>Refactor the attached vis.js to add color and shape to each vertex.\n\nNode 1: red triangle\nNode 2: orange square\nNode 3: gold circle\nNode 4: green big box\nNode 5: blue star\nNode 6: purple ellipse\n</code></pre>"},{"location":"vis/lab-03/#chatgpt-o4-response","title":"ChatGPT o4 Response","text":"<p>To refactor the <code>lab-02</code> files to add color and shape to each vertex, we will modify the <code>lab-02.json</code> to include the color and shape properties for each node. Here's how we can adjust the structure:</p>"},{"location":"vis/lab-03/#updated-lab-03json","title":"Updated <code>lab-03.json</code>:","text":"<pre><code>{\n    \"nodes\": [\n        {\"id\": 1, \"label\": \"Node 1\", \"color\": \"red\", \"shape\": \"triangle\"},\n        {\"id\": 2, \"label\": \"Node 2\", \"color\": \"orange\", \"shape\": \"square\"},\n        {\"id\": 3, \"label\": \"Node 3\", \"color\": \"gold\", \"shape\": \"circle\"},\n        {\"id\": 4, \"label\": \"Node 4\", \"color\": \"green\", \"shape\": \"box\", \"size\": 50},\n        {\"id\": 5, \"label\": \"Node 5\", \"color\": \"blue\", \"shape\": \"star\"},\n        {\"id\": 6, \"label\": \"Node 6\", \"color\": \"purple\", \"shape\": \"ellipse\"}\n    ],\n    \"edges\": [\n        {\"from\": 1, \"to\": 3},\n        {\"from\": 1, \"to\": 2},\n        {\"from\": 2, \"to\": 4},\n        {\"from\": 2, \"to\": 5},\n        {\"from\": 3, \"to\": 6}\n    ]\n}\n</code></pre>"},{"location":"vis/lab-03/#updated-lab-03js","title":"Updated <code>lab-03.js</code>:","text":"<p>You don't need to change much in the JavaScript file, but here it is for completeness.</p> <pre><code>// Fetch data from the JSON file\nfetch('lab-03.json')\n    .then(response =&gt; response.json())\n    .then(data =&gt; {\n        // Parse the data from JSON\n        const nodes = new vis.DataSet(data.nodes);\n        const edges = new vis.DataSet(data.edges);\n\n        // Create a network\n        const container = document.getElementById('mynetwork');\n        const networkData = {\n            nodes: nodes,\n            edges: edges\n        };\n        const options = {};\n\n        // Initialize the network\n        const network = new vis.Network(container, networkData, options);\n    })\n    .catch(error =&gt; console.error('Error loading the network data:', error));\n</code></pre>"},{"location":"vis/lab-03/#changes-explained","title":"Changes explained:","text":"<ul> <li>Each node now has a <code>color</code> and <code>shape</code> property. These properties allow you to customize the appearance of each node.</li> <li>For node 4, a larger size is specified with the <code>size</code> property to make it a \"big box.\"</li> <li>The edges are unchanged but include a new edge between nodes 3 and 6 to reflect the inclusion of Node 6.</li> </ul> <p>When you run this, each node will now have the specified color and shape, creating a visually distinct network.</p>"},{"location":"vis/lab-03/#using-white-text-on-dark-colors","title":"Using White Text On Dark Colors","text":""},{"location":"vis/lab-03/#prompt_1","title":"Prompt","text":"<pre><code>The black text is hard to read on the darker colors. How do I change the text to be white in the green and purple nodes?\n</code></pre>"},{"location":"vis/lab-03/#chatgpt-said","title":"ChatGPT said:","text":"<p>ChatGPT</p> <p>To change the text color for nodes with darker background colors like blue and purple, you can use the <code>font</code> property within each node's configuration to specify the text color. Here's how you can update your <code>lab-03.json</code> file to set the text color to white for the green and purple nodes:</p>"},{"location":"vis/lab-03/#updated-lab-02json","title":"Updated <code>lab-02.json</code>:","text":"<pre><code>{\n    \"nodes\": [\n        {\"id\": 1, \"label\": \"Node 1\", \"color\": \"red\", \"shape\": \"triangle\"},\n        {\"id\": 2, \"label\": \"Node 2\", \"color\": \"orange\", \"shape\": \"square\"},\n        {\"id\": 3, \"label\": \"Node 3\", \"color\": \"yellow\", \"shape\": \"circle\"},\n        {\"id\": 4, \"label\": \"Node 4\", \"color\": \"green\", \"shape\": \"box\", \"size\": 50, \"font\": {\"color\": \"white\"}},\n        {\"id\": 5, \"label\": \"Node 5\", \"color\": \"blue\", \"shape\": \"star\"},\n        {\"id\": 6, \"label\": \"Node 6\", \"color\": \"purple\", \"shape\": \"ellipse\", \"font\": {\"color\": \"white\"}}\n    ],\n    \"edges\": [\n        {\"from\": 1, \"to\": 3},\n        {\"from\": 1, \"to\": 2},\n        {\"from\": 2, \"to\": 4},\n        {\"from\": 2, \"to\": 5},\n        {\"from\": 3, \"to\": 6}\n    ]\n}\n</code></pre>"},{"location":"vis/lab-03/#explanation","title":"Explanation:","text":"<ul> <li>For <code>Node 5</code> (blue) and <code>Node 6</code> (purple), I added the <code>\"font\": {\"color\": \"white\"}</code> property, which changes the text color to white for better readability against the darker backgrounds.</li> </ul> <p>Now, when you display the graph, the text on the blue and purple nodes will appear in white, making it much easier to read.</p>"},{"location":"vis/lab-03/#more-things-to-try","title":"More Things to Try","text":"<p>You can also change the border width:</p> <ol> <li>borderWidth</li> <li>color.border</li> <li>opacity</li> <li>icon</li> <li>image</li> </ol> <p>The size is used to determine the size of node shapes that do not have the label inside of them. These shapes are: image, circularImage, diamond, dot, star, triangle, triangleDown, hexagon, square and icon</p>"},{"location":"vis/lab-03/#custom-canvas-shapes","title":"Custom Canvas Shapes","text":"<p>You can make the shape \"custom\" and then supply a Canvas drawing function:</p> <p>Canvas Drawing Function</p>"},{"location":"vis/lab-03/#references","title":"References","text":"<p>Vis.js Documentation on Node Properties</p>"},{"location":"vis/lab-04/","title":"Lab 4: Custom Shape","text":"<p>Lab 4 Custom Shapes HTML</p> <p>Here's a small example of a <code>vis.js</code> program that uses the <code>ctxRenderer</code> function to draw a custom hexagonal shape for a node:</p>"},{"location":"vis/lab-04/#html-code","title":"HTML Code:","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;vis.js Custom Shape Example&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src=\"https://unpkg.com/vis-network/standalone/umd/vis-network.min.js\"&gt;&lt;/script&gt;\n    &lt;style type=\"text/css\"&gt;\n        #mynetwork {\n            width: 600px;\n            height: 400px;\n            border: 1px solid lightgray;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"mynetwork\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n    function customShapeRenderer({ ctx, x, y, state: { selected, hover }, style }) {\n        const r = style.size;  // size of the shape (radius)\n        ctx.beginPath();\n        const sides = 6;  // number of sides for the hexagon\n        const a = (Math.PI * 2) / sides;  // angle between sides\n\n        // Start drawing the hexagon\n        ctx.moveTo(x + r * Math.sin(0), y + r * Math.cos(0));\n        for (let i = 1; i &lt;= sides; i++) {\n            ctx.lineTo(x + r * Math.sin(a * i), y + r * Math.cos(a * i));\n        }\n\n        ctx.closePath();\n        ctx.save();\n        ctx.fillStyle = selected ? 'blue' : 'red';  // change color if selected\n        ctx.fill();\n        ctx.strokeStyle = hover ? 'orange' : 'black';  // change stroke if hovered\n        ctx.stroke();\n        ctx.restore();\n\n        // Add label inside the shape\n        ctx.font = \"normal 12px sans-serif\";\n        ctx.fillStyle = 'black';\n        ctx.fillText('Custom Node', x - r / 2, y + 4);\n\n        // Return dimensions of the node\n        return {\n            nodeDimensions: { width: r * 2, height: r * 2 }\n        };\n    }\n\n    // Create nodes and edges\n    const nodes = new vis.DataSet([\n        {\n            id: 1,\n            label: 'Custom Node',\n            shape: 'custom',\n            ctxRenderer: customShapeRenderer,  // specify the custom renderer\n            size: 40  // set the size of the node\n        }\n    ]);\n\n    const edges = new vis.DataSet([]);\n\n    // Create the network\n    const container = document.getElementById('mynetwork');\n    const data = {\n        nodes: nodes,\n        edges: edges\n    };\n    const options = {};\n    const network = new vis.Network(container, data, options);\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"vis/lab-04/#explanation","title":"Explanation:","text":"<ul> <li>Custom Renderer (<code>customShapeRenderer</code>): This function creates a hexagonal node. It takes the context (<code>ctx</code>) and node state as input, calculates the position of each side of the hexagon, and draws the shape using the <code>canvas</code> API.<ul> <li>The node is filled with red unless it is selected, in which case it becomes blue.</li> <li>The stroke color is black but changes to orange when the node is hovered over.</li> <li>The label \"Custom Node\" is drawn inside the hexagon.</li> </ul> </li> <li>Node Configuration: The node uses the <code>shape: 'custom'</code> property to specify that it should use a custom renderer. The <code>ctxRenderer</code> property is set to the <code>customShapeRenderer</code> function.</li> <li>Node Dimensions: The size of the hexagonal node is defined by the <code>r</code> variable, which is passed in via <code>style.size</code>.</li> </ul> <p>When you load this HTML file in a browser, it will draw a single hexagonal node with the ability to change color when selected or hovered. You can easily modify the shape or style further by changing the drawing logic inside the <code>customShapeRenderer</code> function.</p> <p>4o</p> <p>requestAnimationFrame((function(){window.__oai_logTTI?window.__oai_logTTI():window.__oai_SSR_TTI=window.__oai_SSR_TTI??Date.now()}))</p> <p>ChatGPT can make mistakes. Check important info.</p>"},{"location":"vis/csv-reader/","title":"CSV to JSON Converter","text":"<p>This prompt generates a Python program that reads in a CSV file for a graph and returns a JSON file in vis.js format.</p>"},{"location":"vis/csv-reader/#prompt","title":"Prompt","text":"<pre><code>I have a CSV file that has graph data in it.\n\nThe fields are:\nConceptID - the node id in a graph. Unique for all nodes. Required.\nThe ConceptName - a node label - Required\nDependencyList - a pipe-delimited list of dependant ConceptIDs.  An edge goes from this concept to other concepts with a directed arrow.\nCategoryID - a group ID for the concept.\nCategoryLabel - the name of the category\n\nThere are about 11 Categories\n\nConceptID,ConceptName,DependencyList,CategoryID,CategoryLabel\n1,Ohm's Law,2|3|4,1,Fundamental Concepts\n2,Voltage,7,1,Fundamental Concepts\n3,Current,7,1,Fundamental Concepts\n4,Resistance,101,1,Fundamental Concepts\n5,Power,2|3,1,Fundamental Concepts\n6,Energy,5|102,1,Fundamental Concepts\n7,Electric charge,120,1,Fundamental Concepts\n8,Conductors,7,1,Fundamental Concepts\n9,Insulators,7,1,Fundamental Concepts\n10,Capacitance,2|7,1,Fundamental Concepts\n11,Inductance,3|104,1,Fundamental Concepts\n\nPlease create a Python program that converts this CSV file into a JSON file that can be easily read by vis.js.  Assume that the category ID will become a group ID.\n</code></pre>"},{"location":"vis/csv-reader/#chatgpt-response","title":"ChatGPT Response","text":"<pre><code>import csv\nimport json\n\ndef csv_to_visjs_json(csv_filename, json_filename):\n    nodes = []\n    edges = []\n    categories = {}\n\n    # Read the CSV file\n    with open(csv_filename, 'r', newline='', encoding='utf-8') as csvfile:\n        reader = csv.DictReader(csvfile)\n        for row in reader:\n            # Extract node information\n            try:\n                concept_id = int(row['ConceptID'])\n            except ValueError:\n                print(f\"Invalid ConceptID '{row['ConceptID']}' skipped.\")\n                continue  # Skip rows with invalid ConceptID\n\n            concept_name = row['ConceptName'].strip()\n            if not concept_name:\n                print(f\"Empty ConceptName for ConceptID {concept_id} skipped.\")\n                continue  # Skip nodes without a name\n\n            try:\n                category_id = int(row['CategoryID'])\n            except ValueError:\n                print(f\"Invalid CategoryID '{row['CategoryID']}' for ConceptID {concept_id} skipped.\")\n                continue  # Skip rows with invalid CategoryID\n\n            category_label = row['CategoryLabel'].strip()\n\n            # Create node object\n            node = {\n                'id': concept_id,\n                'label': concept_name,\n                'group': category_id\n            }\n            nodes.append(node)\n\n            # Store category information (optional, for groups)\n            if category_id not in categories:\n                categories[category_id] = category_label\n\n            # Process DependencyList to create edges\n            dependency_list = row['DependencyList'].strip()\n            if dependency_list:\n                dependencies = dependency_list.split('|')\n                for dep in dependencies:\n                    dep = dep.strip()\n                    if dep:\n                        try:\n                            dep_id = int(dep)\n                            edge = {\n                                'from': concept_id,\n                                'to': dep_id\n                            }\n                            edges.append(edge)\n                        except ValueError:\n                            print(f\"Invalid DependencyID '{dep}' for ConceptID {concept_id} skipped.\")\n                            continue  # Skip invalid DependencyIDs\n\n    # Optionally, create a separate groups structure if needed\n    # Uncomment the following lines if you want to include group labels\n    \"\"\"\n    groups = []\n    for cid, clabel in categories.items():\n        group = {\n            'id': cid,\n            'label': clabel\n            # You can add more styling options here if needed\n        }\n        groups.append(group)\n    data = {\n        'nodes': nodes,\n        'edges': edges,\n        'groups': groups\n    }\n    \"\"\"\n\n    # If not using separate groups, omit the 'groups' key\n    data = {\n        'nodes': nodes,\n        'edges': edges\n    }\n\n    # Write the JSON output\n    with open(json_filename, 'w', encoding='utf-8') as jsonfile:\n        json.dump(data, jsonfile, indent=4)\n\n    print(f\"Successfully converted '{csv_filename}' to '{json_filename}'.\")\n\nif __name__ == \"__main__\":\n    # Define input and output file names\n    input_csv = 'graph-data.csv'\n    output_json = 'graph-data.json'\n\n    # Convert CSV to JSON\n    csv_to_visjs_json(input_csv, output_json)\n</code></pre> <p>Python Code</p>"},{"location":"vis/fix-x-positions/","title":"Fix the X Positions","text":"<p>Fix X Positions Demo</p>"},{"location":"vis/fix-x-positions/#prompt","title":"Prompt","text":"<pre><code>using vis.js, is there a way to freeze a node's x position\nbut let the y position float freely and be repositioned\nby the force-directed graph algorithm?\n</code></pre>"},{"location":"vis/fix-x-positions/#chatgpt-said","title":"ChatGPT said:","text":"<p>In vis.js, the built-in options for node positioning allow you to fix both the x and y coordinates of a node using the <code>fixed</code> option. However, freezing only one axis while letting the other float (like freezing the x-axis and letting the y-axis adjust with the force-directed graph algorithm) is not supported natively.</p> <p>That said, you can achieve this behavior with a workaround by using the <code>physics</code> option and manually adjusting the node's x position in each frame:</p> <ol> <li>Set the node's <code>x</code> position and use the <code>fixed: { x: true, y: false }</code> option to lock only the x-axis.</li> <li>During the graph's update cycle, reapply the node's fixed x position while letting the force algorithm adjust the y position.</li> </ol> <p>Here's an example code snippet to implement this behavior:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;vis.js Fixed X Position Example&lt;/title&gt;\n  &lt;script type=\"text/javascript\" src=\"https://unpkg.com/vis-network@9.1.2/dist/vis-network.min.js\"&gt;&lt;/script&gt;\n\n  &lt;style&gt;\n    #network {\n      width: 800px;\n      height: 600px;\n      border: 1px solid lightgray;\n      margin-left: 10px;\n      background-color: aliceblue;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"network\"&gt;&lt;/div&gt;\n&lt;script type=\"text/javascript\" src=\"fix-x-positions.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <pre><code>var nodes = new vis.DataSet([\n  { id: 1, label: \"Node 1\", x: 100, fixed: { x: true, y: false } },\n  { id: 2, label: \"Node 2\", x: 200, fixed: { x: true, y: false } },\n  { id: 3, label: \"Node 3\", fixed: false },\n]);\n\nvar edges = new vis.DataSet([\n  { from: 1, to: 2 },\n  { from: 2, to: 3 },\n]);\n\nvar container = document.getElementById('network');\nvar data = {\n  nodes: nodes,\n  edges: edges\n};\n\nvar options = {\n  physics: {\n    enabled: true,\n    solver: 'forceAtlas2Based',\n    stabilization: false\n  }\n};\n\nvar network = new vis.Network(container, data, options);\n\n// Workaround: Lock x position while letting y position be free\nnetwork.on(\"beforeDrawing\", function () {\n  nodes.forEach(function (node) {\n    if (node.fixed &amp;&amp; node.fixed.x) {\n      var currentPosition = network.getPosition(node.id);\n      nodes.update({ id: node.id, x: node.x, y: currentPosition.y });\n    }\n  });\n});\n</code></pre>"},{"location":"vis/fix-x-positions/#explanation-of-changes","title":"Explanation of Changes","text":"<ol> <li> <p>Fixed Nodes Configuration:</p> <ul> <li><code>fixed: { x: true, y: false }</code>: This ensures that the x-position of the node remains constant while allowing the y-position to be influenced by the physics engine.</li> <li><code>physics: false</code>: Disables physics simulation for these nodes, preventing them from being moved by forces or other nodes.</li> <li> <p>Removal of <code>beforeDrawing</code> Event:</p> </li> <li> <p>Since we're now using <code>physics: false</code> for fixed nodes, the manual adjustment in the <code>beforeDrawing</code> event is no longer necessary and has been removed to prevent interference.</p> </li> <li> <p>Centering the Graph:</p> </li> <li> <p><code>moveTo</code> Method: After the network stabilizes, <code>moveTo</code> centers the graph at (0,0) with a smooth animation.</p> </li> <li><code>stabilization</code> Settings: Increased the number of iterations to ensure the network has ample time to stabilize before centering.</li> <li> <p>Responsive Design:</p> </li> <li> <p>Window Resize Event: Added an event listener to re-fit the network when the browser window is resized, maintaining the centered view.</p> </li> <li> <p>Node Styling (Optional):</p> </li> <li> <p>Enhanced node appearance for better visibility and aesthetics. This is optional but can help in visual differentiation.</p> </li> </ul> </li> </ol>"},{"location":"vis/fix-x-positions/#additional-tips","title":"Additional Tips","text":"<ul> <li> <p>Adjust Initial Positions: Ensure that the initial <code>x</code> positions of the fixed nodes are within the visible range of your container. If nodes are still drifting off, try setting <code>x</code> to smaller absolute values (e.g., closer to 0).</p> </li> <li> <p>Scale Adjustment: If the graph appears too zoomed out or in, adjust the <code>scale</code> parameter in the <code>moveTo</code> method to better fit the nodes within the view.</p> </li> <li> <p>Solver Selection: While <code>forceAtlas2Based</code> is a good general-purpose solver, experimenting with different solvers like <code>barnesHut</code> or <code>repulsion</code> might yield better results based on your specific graph structure.</p> </li> <li> <p>Debugging Node Positions: Temporarily disable physics (<code>physics: false</code>) for all nodes to manually position them and ensure they appear correctly within the view. Once satisfied, re-enable physics selectively.</p> </li> </ul>"},{"location":"vis/fix-x-positions/#final-thoughts","title":"Final Thoughts","text":"<p>By configuring the fixed nodes correctly and ensuring they are excluded from the physics simulation, you should achieve the desired behavior where specific nodes remain anchored on the x-axis while others are dynamically positioned. Centering the graph post-stabilization ensures that all nodes remain within the visible area, providing a clear and organized visualization.</p> <p>Feel free to adjust the parameters further based on the specific requirements of your graph and the visual outcome you desire. Let me know if you encounter any more issues or need further assistance!</p>"},{"location":"vis/graph-editor/","title":"Graph Editor","text":"<p>Run Graph Editor</p>"},{"location":"vis/graph-editor/#prompt","title":"Prompt","text":"<pre><code>Please generate a graph network editor based on vis.js.  The editor should be able to do the following:\n\n1. Open a graph network from a JSON file to an in memory structure.  Look for files with .json extensions.\n2. Add, update and delete nodes and edges.\n3. Edit various properties of the nodes and edges such as color, shape, size and image\n4. Save the in-memory structure to the file or do a \"Save As\" to a new file\n5. Allow the user to change and save global options\n\nUpon reading the file, display statistics about what was in the file including node count and edge count.  Also display the count of orphaned nodes when a file is read.\nPerform checks on data quality as a new file is opened such as edges without nodes.\n</code></pre>"},{"location":"vis/graph-editor/#graph-editor-check-for-network","title":"Graph Editor Check for Network","text":"<p>Check for Network after Load of JSON data</p>"},{"location":"vis/graph-editor/#references","title":"References","text":"<p>Sam Adams TinkerTiny Vis.js Graph Editor - an interesting UI.  One time code commit in 2022.</p>"},{"location":"vis/graph-editor/prompt-history/","title":"Prompt History for Graph Editor","text":""},{"location":"vis/graph-editor/prompt-history/#adding-details-to-node","title":"Adding Details to Node","text":"<p>``` What are the most common properties that a user sets on a node? I can think of the following:  1. Label  2. Title (for hover text)  3. Shape (selected from a list of shapes)  4. Size  5. Background color (select from list)  6. Edge color (select from list)  7. x  8. y  9. Fixed location (checkbox) </p> <p>What other parameters might a person change? Update the JavaScript to allow all these parameters to be visible when creating a new node or updating a node.</p>"},{"location":"vis/graph-editor/prompt-history/#chatgpt-said","title":"ChatGPT said:","text":"<p>In addition to the properties you've already listed, here are some other common node properties that users might want to set:</p> <ol> <li>Image (for image-based nodes, with a URL to an image)</li> <li>Font (size, color, face for the label)</li> <li>Border Width (controls the thickness of the node's border)</li> <li>Border Color (set separately from edge color, allows customization of node outline)</li> <li>Opacity (allows transparency on nodes)</li> <li>Shadow (option to add shadows for depth perception)</li> <li>Group (used to assign nodes into categories for different styles or behaviors)</li> <li>Icon (if using icons instead of labels)</li> <li>Physics (whether the node is affected by physics simulation)</li> </ol>"},{"location":"vis/graph-editor/prompt-history/#updated-javascript-for-node-creationediting-form","title":"Updated JavaScript for Node Creation/Editing Form","text":"<p>Here is an updated version of your graph-editor.js that includes a form for setting all these parameters when creating or editing nodes:</p>"},{"location":"vis/group-colors/","title":"Group Colors","text":"<p>Run the Group Colors Demo</p> <p>Run the Group Colors Demo v2</p> <p>Run the Group Colors Demo v3</p> <p>Run the Group Colors Demo v4 with external groups.json file</p>"},{"location":"vis/legend-checkboxes/","title":"Legend Checkboxes","text":""},{"location":"vis/legend-checkboxes/#prompt","title":"Prompt","text":"<pre><code>I have a vis.js program that has a legend for the node types.\nI would like to conditionally include specific nodes that are\nin groups in the network graphs. \nUsing the following template, create a new version that puts\ncheckboxes in the legend in the sidebar.\nThe checkboxes will turn on and off the inclusion of each\ngroup in the network.\n</code></pre>"},{"location":"vis/legend-checkboxes/#response","title":"Response","text":"<p>To implement checkboxes in the legend sidebar to control the visibility of specific groups in the network, I\u2019ll modify your template to add checkboxes next to each group. The checkboxes will toggle the visibility of nodes in that specific group. When a checkbox is unchecked, nodes in that group will be hidden from the network graph; when checked, they will be displayed.</p>"},{"location":"vis/legend-checkboxes/#explanation","title":"Explanation","text":""},{"location":"vis/legend-checkboxes/#group-and-checkbox-property-consistency","title":"Group and Checkbox Property Consistency","text":"<ul> <li>Updated Node Groups: Each node's <code>group</code> property now matches the IDs of the checkboxes. For example, the node for \"Foundation\" has <code>group: 'Foundation'</code>.</li> </ul> <pre><code>{id: 1, label: 'Foundation', shape: \"box\", color: \"red\", font: {color: \"white\"}, group: 'Foundation'},\n</code></pre> <ul> <li>Checkbox IDs and <code>toggleGroup</code> Function: The <code>id</code> attributes of the checkboxes match the <code>group</code> names. The <code>toggleGroup</code> function now uses the <code>groupName</code> to reference both the checkbox and the node group.</li> </ul> <pre><code>&lt;input type=\"checkbox\" id=\"groupFoundation\" checked onchange=\"toggleGroup('Foundation')\"&gt;\n</code></pre>"},{"location":"vis/legend-checkboxes/#javascript-function-to-toggle-group-visibility","title":"JavaScript Function to Toggle Group Visibility","text":"<pre><code>function toggleGroup(groupName) {\n      const visible = document.getElementById(`group${groupName}`).checked;\n      nodes.forEach(node =&gt; {\n        if (node.group === groupName) {\n          nodes.update({id: node.id, hidden: !visible});\n        }\n      });\n    }\n</code></pre> <ul> <li>Consistent Colors: The colors in the legend now match the colors assigned to the nodes. For example, \"Flow and Match\" uses <code>color: \"indigo\"</code> and the legend reflects this with <code>background-color: indigo</code>.</li> </ul> <pre><code>&lt;td style=\"background-color: indigo; color: white;\"&gt;Indigo&lt;/td&gt;\n</code></pre>"},{"location":"vis/legend-checkboxes/#testing-the-fix","title":"Testing the Fix:","text":"<ul> <li>When you uncheck a checkbox in the legend, the corresponding nodes in the network graph should disappear.</li> <li>When you check the checkbox again, the nodes reappear.</li> </ul>"},{"location":"vis/legend-checkboxes/#additional-notes","title":"Additional Notes:","text":"<ul> <li> <p>Edge Visibility: If you need the edges connected to the hidden nodes to also be hidden, Vis.js handles this automatically when a connected node is hidden.</p> </li> <li> <p>Multiple Nodes per Group: If you have more nodes in each group, this method will scale appropriately.</p> </li> </ul>"},{"location":"vis/legend-checkboxes/#example-legend-checkbox-program","title":"Example Legend Checkbox Program","text":"<p>Legend Checkboxes</p>"},{"location":"vis/legend-checkboxes/#adding-check-all-and-uncheck-all-buttons","title":"Adding \"Check All\" and \"Uncheck All\" Buttons","text":""},{"location":"vis/legend-checkboxes/#prompt_1","title":"Prompt","text":"<pre><code>How can I add two buttons that will \"Check All\" and \"Uncheck All\"?\n</code></pre>"},{"location":"vis/legend-checkboxes/#response_1","title":"Response","text":"<p>ChatGPT Thought for 17 seconds</p> <p>Certainly! To add \"Check All\" and \"Uncheck All\" buttons that control all the group checkboxes and update the network graph accordingly, we'll:</p> <ol> <li>Add two buttons labeled \"Check All\" and \"Uncheck All\" above the legend table.</li> <li>Implement two functions, <code>checkAllGroups()</code> and <code>uncheckAllGroups()</code>, that will check or uncheck all the checkboxes and update the node visibility in the network graph.</li> <li>Ensure that the network graph updates efficiently when these buttons are clicked.</li> </ol> <p>Here's the updated code with the new buttons and functions</p>"},{"location":"vis/legend-checkboxes/#explanation-of-changes","title":"Explanation of Changes:","text":""},{"location":"vis/legend-checkboxes/#1-added-check-all-and-uncheck-all-buttons","title":"1.  Added \"Check All\" and \"Uncheck All\" Buttons:","text":"<p><pre><code>&lt;div&gt;\n    &lt;button onclick=\"checkAllGroups()\"&gt;Check All&lt;/button&gt;\n    &lt;button onclick=\"uncheckAllGroups()\"&gt;Uncheck All&lt;/button&gt;\n&lt;/div&gt;\n</code></pre> -   These buttons are placed above the legend table in the sidebar. -   They call the functions <code>checkAllGroups()</code> and <code>uncheckAllGroups()</code> when clicked.</p>"},{"location":"vis/legend-checkboxes/#2-implemented-checkallgroups-function","title":"2.  Implemented <code>checkAllGroups()</code> Function:","text":"<p><pre><code>function checkAllGroups() {\n      const checkboxes = document.querySelectorAll('input[id^=\"group\"]');\n      checkboxes.forEach(checkbox =&gt; {\n        if (!checkbox.checked) {\n          checkbox.checked = true;\n          // Update nodes in this group to be visible\n          toggleGroup(checkbox.id.replace('group', ''));\n        }\n      });\n    }\n</code></pre> -   Purpose: Checks all the group checkboxes and makes all corresponding nodes visible. -   How it Works:     -   Selects all input elements with IDs starting with <code>\"group\"</code>.     -   Loops through each checkbox:         -   If it's not already checked, it sets <code>checkbox.checked = true</code>.         -   Calls <code>toggleGroup()</code> with the group name to update node visibility.</p>"},{"location":"vis/legend-checkboxes/#3-implemented-uncheckallgroups-function","title":"3.  Implemented <code>uncheckAllGroups()</code> Function:","text":"<pre><code>function uncheckAllGroups() {\n      const checkboxes = document.querySelectorAll('input[id^=\"group\"]');\n      checkboxes.forEach(checkbox =&gt; {\n        if (checkbox.checked) {\n          checkbox.checked = false;\n          // Update nodes in this group to be hidden\n          toggleGroup(checkbox.id.replace('group', ''));\n        }\n      });\n    }\n</code></pre> <ul> <li>Purpose: Unchecks all the group checkboxes and hides all corresponding nodes.</li> <li>How it Works:<ul> <li>Selects all input elements with IDs starting with <code>\"group\"</code>.</li> <li>Loops through each checkbox:<ul> <li>If it's checked, it sets <code>checkbox.checked = false</code>.<ul> <li>Calls <code>toggleGroup()</code> with the group name to update node visibility.</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"vis/legend-checkboxes/#4-optimizing-node-updates","title":"4.  Optimizing Node Updates:","text":"<ul> <li>By only calling <code>toggleGroup()</code> when a checkbox state changes (from unchecked to checked or vice versa), we avoid unnecessary updates.</li> <li>The <code>toggleGroup()</code> function handles updating the node visibility based on the current state of the checkbox.</li> </ul>"},{"location":"vis/legend-checkboxes/#5-ensuring-consistent-group-names","title":"5.  Ensuring Consistent Group Names:","text":"<ul> <li>The <code>replace('group', '')</code> method extracts the group name from the checkbox ID (e.g., from <code>\"groupFoundation\"</code> to <code>\"Foundation\"</code>).</li> <li>This ensures that <code>toggleGroup()</code> receives the correct group name to update node visibility.</li> </ul>"},{"location":"vis/legend-checkboxes/#how-it-works","title":"How It Works:","text":"<ul> <li> <p>\"Check All\" Button:</p> <ul> <li>When clicked, all checkboxes become checked.</li> <li>For each checkbox that was previously unchecked, <code>toggleGroup()</code> is called to set the corresponding nodes as visible.</li> <li>The network graph updates to show all nodes.</li> <li> <p>\"Uncheck All\" Button:</p> </li> <li> <p>When clicked, all checkboxes become unchecked.</p> </li> <li>For each checkbox that was previously checked, <code>toggleGroup()</code> is called to hide the corresponding nodes.</li> <li>The network graph updates to hide all nodes.</li> <li> <p>Individual Checkboxes:</p> </li> <li> <p>The existing functionality for individual checkboxes remains unchanged.</p> </li> <li>Checking or unchecking a group checkbox will show or hide nodes in that group.</li> </ul> </li> </ul>"},{"location":"vis/legend-checkboxes/#additional-notes_1","title":"Additional Notes:","text":"<ul> <li> <p>Edge Visibility:</p> <ul> <li>Vis.js automatically handles edge visibility. If both connected nodes are hidden, the edge is also hidden.</li> <li>If one node is visible and the other is hidden, the edge will still be displayed, connected to the visible node.</li> <li> <p>Scalability:</p> </li> <li> <p>This approach works efficiently even if more groups or nodes are added.</p> </li> <li>The functions dynamically select checkboxes and nodes based on IDs and group names.</li> <li> <p>Accessibility:</p> </li> <li> <p>The buttons and checkboxes are standard HTML elements, ensuring compatibility with assistive technologies.</p> </li> </ul> </li> </ul>"},{"location":"vis/legend-checkboxes/#testing-the-implementation","title":"Testing the Implementation:","text":"<ol> <li> <p>Initial State:</p> <ul> <li>All checkboxes are checked.</li> <li>All nodes are visible in the network graph.</li> <li> <p>Uncheck All:</p> </li> <li> <p>Click the \"Uncheck All\" button.</p> </li> <li>All checkboxes become unchecked.</li> <li>All nodes are hidden in the network graph.</li> <li>Check All:</li> </ul> </li> <li> <p>Click the \"Check All\" button.</p> </li> <li>All checkboxes become checked.</li> <li> <p>All nodes reappear in the network graph.</p> </li> <li> <p>Combination:</p> </li> <li> <p>Uncheck individual checkboxes to hide specific groups.</p> </li> <li>Use \"Check All\" to restore visibility to all groups.</li> </ol>"},{"location":"vis/legend-checkboxes/#summary-of-check-all-and-uncheck-all","title":"Summary of Check All and Uncheck All","text":"<p>By adding the \"Check All\" and \"Uncheck All\" buttons and implementing the corresponding functions, users can easily control the visibility of all node groups in the network graph with a single click. This enhancement improves the usability of the application, especially when dealing with a large number of groups.</p> <p>Example of Check All</p>"},{"location":"vis/legend-checkboxes/#adding-network-statistics","title":"Adding Network Statistics","text":"<p>When we disable some nodes with the checkboxes, we often need to know that some nodes are now disconnected from the network. We can see the number of orphaned nodes by running a simple query on the graph.  Here is how it works.</p>"},{"location":"vis/legend-checkboxes/#graph-statistics-prompt","title":"Graph Statistics Prompt","text":""},{"location":"vis/legend-checkboxes/#sample-prompt","title":"Sample Prompt","text":"<pre><code>How would I modify the code to display the network statistics\nin the sidebar such as number of nodes, number of edges and\nnumber of orphaned nodes? \nUse HTML in the sidebar under \"Graph Statistics\".\n</code></pre>"},{"location":"vis/legend-checkboxes/#sample-response","title":"Sample Response","text":"<p>ChatGPT o1-preview Thought for 24 seconds</p> <p>Certainly! To display dynamic network statistics---such as the number of nodes, number of edges, and number of orphaned nodes---in the sidebar under \"Graph Statistics\", we'll need to:</p> <ol> <li>Add placeholders in the HTML for the statistics.</li> <li>Write a function <code>updateStatistics()</code> that calculates these statistics based on the current state of the network.</li> <li>Call <code>updateStatistics()</code> whenever the network changes (e.g., when nodes are shown or hidden via the checkboxes).</li> </ol> <p>Below is the updated code with the necessary modifications:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Demo of Toggle Sidebar Legend&lt;/title&gt;\n  &lt;script type=\"text/javascript\" src=\"https://unpkg.com/vis-network/standalone/umd/vis-network.min.js\"&gt;&lt;/script&gt;\n  &lt;style&gt;\n    body {\n      font-family: Arial, Helvetica, sans-serif;\n      display: flex;\n    }\n\n    #sidebar {\n      width: auto;\n      max-width: 300px;\n      padding: 5px;\n      margin-right: 10px;\n      box-sizing: border-box;\n    }\n\n    #main {\n      flex: 1;\n      padding: 10px;\n    }\n\n    #mynetwork {\n      width: 100%;\n      height: 700px;\n      background-color: aliceblue;\n      border: 1px solid lightgray;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;div id=\"sidebar-container\"&gt;\n    &lt;button id=\"toggle-button\" onclick=\"toggleSidebar()\"&gt;&amp;#9776;&lt;/button&gt;\n\n    &lt;div id=\"sidebar\"&gt;\n      &lt;h3&gt;Legend Sidebar&lt;/h3&gt;\n\n      &lt;div&gt;\n        &lt;button onclick=\"checkAllGroups()\"&gt;Check All&lt;/button&gt;\n        &lt;button onclick=\"uncheckAllGroups()\"&gt;Uncheck All&lt;/button&gt;\n      &lt;/div&gt;\n      &lt;table&gt;\n        &lt;tr&gt;\n          &lt;td&gt;&lt;input type=\"checkbox\" id=\"groupFoundation\" checked onchange=\"toggleGroup('Foundation')\"&gt; Foundational Concepts and Definitions&lt;/td&gt;\n          &lt;td style=\"background-color: red; color: white;\"&gt;Red&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;&lt;input type=\"checkbox\" id=\"groupTypes\" checked onchange=\"toggleGroup('Types')\"&gt; Types and Properties of Graphs&lt;/td&gt;\n          &lt;td style=\"background-color: orange;\"&gt;Orange&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;&lt;input type=\"checkbox\" id=\"groupRepresentations\" checked onchange=\"toggleGroup('Representations')\"&gt; Graph Representations and Data Structures&lt;/td&gt;\n          &lt;td style=\"background-color: gold;\"&gt;Gold&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;&lt;input type=\"checkbox\" id=\"groupAlgorithms\" checked onchange=\"toggleGroup('Algorithms')\"&gt; Basic Graph Algorithms&lt;/td&gt;\n          &lt;td style=\"background-color: green; color: white;\"&gt;Green&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;&lt;input type=\"checkbox\" id=\"groupPaths\" checked onchange=\"toggleGroup('Paths')\"&gt; Shortest Path and Spanning Tree Algorithms&lt;/td&gt;\n          &lt;td style=\"background-color: blue; color: white;\"&gt;Blue&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;&lt;input type=\"checkbox\" id=\"groupFlow\" checked onchange=\"toggleGroup('Flow')\"&gt; Network Flow and Matching Algorithms&lt;/td&gt;\n          &lt;td style=\"background-color: indigo; color: white;\"&gt;Indigo&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;&lt;input type=\"checkbox\" id=\"groupAdvanced\" checked onchange=\"toggleGroup('Advanced')\"&gt; Advanced Graph Algorithms&lt;/td&gt;\n          &lt;td style=\"background-color: violet; color: white;\"&gt;Violet&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;&lt;input type=\"checkbox\" id=\"groupMetrics\" checked onchange=\"toggleGroup('Metrics')\"&gt; Graph Measures and Centrality Metrics&lt;/td&gt;\n          &lt;td style=\"background-color: gray; color: white;\"&gt;Gray&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;&lt;input type=\"checkbox\" id=\"groupSpectral\" checked onchange=\"toggleGroup('Spectral')\"&gt; Spectral Graph Theory and Clustering&lt;/td&gt;\n          &lt;td style=\"background-color: brown; color: white;\"&gt;Brown&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;&lt;input type=\"checkbox\" id=\"groupML\" checked onchange=\"toggleGroup('ML')\"&gt; Graph Machine Learning and Network Models&lt;/td&gt;\n          &lt;td style=\"background-color: teal; color: white;\"&gt;Teal&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/table&gt;\n      &lt;h3&gt;Graph Statistics&lt;/h3&gt;\n\n      &lt;ul&gt;\n        &lt;li&gt;&lt;b&gt;Nodes:&lt;/b&gt; &lt;span id=\"nodeCount\"&gt;0&lt;/span&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;b&gt;Edges:&lt;/b&gt; &lt;span id=\"edgeCount\"&gt;0&lt;/span&gt;&lt;/li&gt;\n        &lt;li&gt;&lt;b&gt;Orphans:&lt;/b&gt; &lt;span id=\"orphanCount\"&gt;0&lt;/span&gt;&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div id=\"main\"&gt;\n    &lt;div id=\"mynetwork\"&gt;&lt;/div&gt;\n  &lt;/div&gt;\n\n  &lt;script&gt;\n    function toggleSidebar() {\n      const sidebar = document.getElementById(\"sidebar\");\n      const mainContent = document.getElementById(\"main\");\n      const toggleButton = document.getElementById(\"toggle-button\");\n\n      if (sidebar.style.display === \"none\") {\n        sidebar.style.display = \"block\";\n        toggleButton.innerHTML = \"&amp;#9776;\";\n        mainContent.style.marginLeft = \"auto\";\n      } else {\n        sidebar.style.display = \"none\";\n        toggleButton.innerHTML = \"&amp;#8594;\";\n        mainContent.style.marginLeft = \"0\";\n      }\n    }\n\n    // Create an array with nodes\n    var nodes = new vis.DataSet([\n      {id: 1, label: 'Foundation', shape: \"box\", color: \"red\", font: {color: \"white\"}, group: 'Foundation'},\n      {id: 2, label: 'Types', color: \"orange\", font: {color: \"black\"}, group: 'Types'},\n      {id: 3, label: 'Representations', color: \"gold\", font: {color: \"black\"}, group: 'Representations'},\n      {id: 4, label: 'Algorithms', color: \"green\", font: {color: \"white\"}, group: 'Algorithms'},\n      {id: 5, label: 'Paths', color: \"blue\", font: {color: \"white\"}, group: 'Paths'},\n      {id: 6, label: 'Flow and Match', color: \"indigo\", font: {color: \"white\"}, group: 'Flow'},\n      {id: 7, label: 'Advanced', color: \"violet\", font: {color: \"white\"}, group: 'Advanced'},\n      {id: 8, label: 'Metrics', color: \"gray\", font: {color: \"white\"}, group: 'Metrics'},\n      {id: 9, label: 'Spectral', color: \"brown\", font: {color: \"white\"}, group: 'Spectral'},\n      {id: 10, label: 'ML and NN', shape: \"star\", color: \"teal\", font: {color: \"black\"}, group: 'ML'},\n    ]);\n\n    // Create an array with edges\n    var edges = new vis.DataSet([\n      {from: 2, to: 1},\n      {from: 3, to: 2},\n      {from: 4, to: 3},\n      {from: 5, to: 4},\n      {from: 6, to: 5},\n      {from: 7, to: 6},\n      {from: 8, to: 7},\n      {from: 9, to: 8},\n      {from: 10, to: 9}\n    ]);\n\n    // Create a network\n    var container = document.getElementById('mynetwork');\n\n    // Provide the data in the vis format\n    var data = {\n      nodes: nodes,\n      edges: edges\n    };\n    var options = {\n      edges: {\n        arrows: {\n          to: { enabled: true, type: 'arrow', color: 'black', scaleFactor: 1 }\n        },\n        smooth: { type: 'continuous' }\n      },\n      layout: {\n        hierarchical: { direction: \"LR\" }\n      }\n    };\n    var network = new vis.Network(container, data, options);\n\n    // Function to update statistics\n    function updateStatistics() {\n      // Get all nodes and edges\n      var allNodes = nodes.get();\n      var allEdges = edges.get();\n\n      // Filter visible nodes\n      var visibleNodes = allNodes.filter(node =&gt; !node.hidden);\n\n      // Filter visible edges (both connected nodes must be visible)\n      var visibleEdges = allEdges.filter(edge =&gt; {\n        var fromNode = nodes.get(edge.from);\n        var toNode = nodes.get(edge.to);\n        return (!fromNode.hidden &amp;&amp; !toNode.hidden);\n      });\n\n      // Calculate number of visible nodes and edges\n      var nodeCount = visibleNodes.length;\n      var edgeCount = visibleEdges.length;\n\n      // Find orphan nodes (nodes with no visible edges)\n      var connectedNodeIds = new Set();\n      visibleEdges.forEach(edge =&gt; {\n        connectedNodeIds.add(edge.from);\n        connectedNodeIds.add(edge.to);\n      });\n      var orphanNodes = visibleNodes.filter(node =&gt; !connectedNodeIds.has(node.id));\n      var orphanCount = orphanNodes.length;\n\n      // Update the HTML elements with the statistics\n      document.getElementById('nodeCount').textContent = nodeCount;\n      document.getElementById('edgeCount').textContent = edgeCount;\n      document.getElementById('orphanCount').textContent = orphanCount;\n    }\n\n    // Call updateStatistics after the network is initialized\n    updateStatistics();\n\n    // Function to toggle groups\n    function toggleGroup(groupName) {\n      const visible = document.getElementById(`group${groupName}`).checked;\n      nodes.forEach(node =&gt; {\n        if (node.group === groupName) {\n          nodes.update({id: node.id, hidden: !visible});\n        }\n      });\n      updateStatistics(); // Update statistics after toggling a group\n    }\n\n    // Function to check all groups\n    function checkAllGroups() {\n      const checkboxes = document.querySelectorAll('input[id^=\"group\"]');\n      checkboxes.forEach(checkbox =&gt; {\n        if (!checkbox.checked) {\n          checkbox.checked = true;\n          // Update nodes in this group to be visible\n          toggleGroup(checkbox.id.replace('group', ''));\n        }\n      });\n      // updateStatistics(); // Already called within toggleGroup\n    }\n\n    // Function to uncheck all groups\n    function uncheckAllGroups() {\n      const checkboxes = document.querySelectorAll('input[id^=\"group\"]');\n      checkboxes.forEach(checkbox =&gt; {\n        if (checkbox.checked) {\n          checkbox.checked = false;\n          // Update nodes in this group to be hidden\n          toggleGroup(checkbox.id.replace('group', ''));\n        }\n      });\n      // updateStatistics(); // Already called within toggleGroup\n    }\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"vis/legend-checkboxes/#explanation-of-modifications","title":"Explanation of Modifications:","text":""},{"location":"vis/legend-checkboxes/#step-1-added-placeholders-in-the-html-for-statistics","title":"Step 1.  Added Placeholders in the HTML for Statistics:","text":"<p><pre><code>&lt;h3&gt;Graph Statistics&lt;/h3&gt;\n  &lt;ul&gt;\n    &lt;li&gt;&lt;b&gt;Nodes:&lt;/b&gt; &lt;span id=\"nodeCount\"&gt;0&lt;/span&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;b&gt;Edges:&lt;/b&gt; &lt;span id=\"edgeCount\"&gt;0&lt;/span&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;b&gt;Orphans:&lt;/b&gt; &lt;span id=\"orphanCount\"&gt;0&lt;/span&gt;&lt;/li&gt;\n  &lt;/ul&gt;\n</code></pre>   -   Replaced the hardcoded numbers with <code>&lt;span&gt;</code> elements having IDs (<code>nodeCount</code>, <code>edgeCount</code>, <code>orphanCount</code>).   -   These elements will be updated dynamically via JavaScript.</p>"},{"location":"vis/legend-checkboxes/#step-2-created-updatestatistics-function","title":"Step 2.  Created <code>updateStatistics()</code> Function:","text":"<p>```javascript   function updateStatistics() {       // Get all nodes and edges       var allNodes = nodes.get();       var allEdges = edges.get();</p> <pre><code>  // Filter visible nodes\n  var visibleNodes = allNodes.filter(node =&gt; !node.hidden);\n\n  // Filter visible edges (both connected nodes must be visible)\n  var visibleEdges = allEdges.filter(edge =&gt; {\n    var fromNode = nodes.get(edge.from);\n    var toNode = nodes.get(edge.to);\n    return (!fromNode.hidden &amp;&amp; !toNode.hidden);\n  });\n\n  // Calculate number of visible nodes and edges\n  var nodeCount = visibleNodes.length;\n  var edgeCount = visibleEdges.length;\n\n  // Find orphan nodes (nodes with no visible edges)\n  var connectedNodeIds = new Set();\n  visibleEdges.forEach(edge =&gt; {\n    connectedNodeIds.add(edge.from);\n    connectedNodeIds.add(edge.to);\n  });\n  var orphanNodes = visibleNodes.filter(node =&gt; !connectedNodeIds.has(node.id));\n  var orphanCount = orphanNodes.length;\n\n  // Update the HTML elements with the statistics\n  document.getElementById('nodeCount').textContent = nodeCount;\n  document.getElementById('edgeCount').textContent = edgeCount;\n  document.getElementById('orphanCount').textContent = orphanCount;\n}\n</code></pre> <p><code>``   -   **Purpose:** Calculates the current number of visible nodes, visible edges, and orphan nodes, and updates the HTML elements accordingly.   -   **Steps in the Function:**       -   **Get All Nodes and Edges:** Retrieve all nodes and edges from the DataSets.       -   **Filter Visible Nodes:** Use</code>filter<code>to get nodes that are not hidden.       -   **Filter Visible Edges:** Only include edges where both the</code>from<code>and</code>to<code>nodes are visible.       -   **Calculate Counts:** Count the number of visible nodes and edges.       -   **Identify Orphan Nodes:**           -   Create a</code>Set<code>of node IDs that are connected via visible edges.           -   An orphan node is one that is visible but not included in the</code>connectedNodeIds<code>set.       -   **Update HTML Elements:** Set the</code>textContent` of the span elements to display the calculated counts.</p>"},{"location":"vis/legend-checkboxes/#step-3-calling-updatestatistics-appropriately","title":"Step 3.  Calling <code>updateStatistics()</code> Appropriately:","text":"<pre><code>-   **After Network Initialization:**\n</code></pre> <p><pre><code>// Call updateStatistics after the network is initialized\n        updateStatistics();\n</code></pre> -   Ensures that the statistics are accurate when the page first loads. -   Within <code>toggleGroup()</code> Function:</p> <pre><code>function toggleGroup(groupName) {\n// ... existing code ...\n  updateStatistics(); // Update statistics after toggling a group\n}`\n</code></pre> <ul> <li>Updates statistics whenever a group is toggled (shown or hidden).</li> <li>No Need to Call <code>updateStatistics()</code> in <code>checkAllGroups()</code> and <code>uncheckAllGroups()</code>:</li> <li>Since <code>toggleGroup()</code> is called for each group within these functions and <code>updateStatistics()</code> is called within <code>toggleGroup()</code>, it's unnecessary to call it again.</li> <li>This avoids redundant calculations and ensures efficiency.</li> </ul>"},{"location":"vis/legend-checkboxes/#how-it-works_1","title":"How It Works:","text":"<ul> <li>Initial Load:<ul> <li>The statistics display the total number of nodes and edges in the network.</li> <li>Orphan nodes are calculated based on the current visibility of nodes and edges.</li> </ul> </li> <li>When Nodes Are Hidden/Shown:<ul> <li>Toggling checkboxes hides or shows nodes.</li> <li>Edges connected to hidden nodes are also hidden automatically by Vis.js.</li> <li>The <code>updateStatistics()</code> function recalculates the counts and updates the sidebar.</li> </ul> </li> <li>Orphan Nodes:<ul> <li>An orphan node is a visible node with no visible edges connected to it.</li> <li>As nodes or edges are hidden, the number of orphan nodes may increase.</li> </ul> </li> </ul>"},{"location":"vis/legend-checkboxes/#testing-the-implementation_1","title":"Testing the Implementation:","text":"<ol> <li> <p>Check All Groups:</p> <ul> <li>Click \"Check All\" to ensure all nodes and edges are visible.</li> <li>The statistics should display the total number of nodes and edges.</li> <li>Orphan count should be <code>0</code> if all nodes are connected.</li> </ul> </li> <li> <p>Uncheck All Groups:</p> <ul> <li>Click \"Uncheck All\" to hide all nodes.</li> <li>Statistics should show <code>0</code> nodes, <code>0</code> edges, and <code>0</code> orphans.</li> </ul> </li> <li> <p>Toggle Individual Groups:</p> <ul> <li>Uncheck individual groups to hide specific nodes.</li> <li>Statistics should update to reflect the current counts.</li> <li>Observe how the number of orphans changes as nodes become disconnected.</li> </ul> </li> </ol>"},{"location":"vis/legend-checkboxes/#additional-notes_2","title":"Additional Notes:","text":"<ul> <li>Edge Visibility:<ul> <li>Vis.js hides edges automatically when connected nodes are hidden.</li> <li>Edges are only considered visible if both connected nodes are visible.</li> </ul> </li> <li>Scalability:<ul> <li>The <code>updateStatistics()</code> function works dynamically with any number of nodes and edges.</li> <li>If you add more nodes or edges, the statistics will adjust accordingly.</li> </ul> </li> <li>Performance:<ul> <li>The use of <code>Set</code> for <code>connectedNodeIds</code> improves performance when checking for orphan nodes.</li> <li>Filtering and mapping functions are efficient for datasets of moderate size.</li> </ul> </li> </ul>"},{"location":"vis/legend-checkboxes/#summary-of-dynamic-networks-statistics","title":"Summary of Dynamic Networks Statistics","text":"<p>By adding dynamic network statistics to the sidebar, users can gain insights into the structure and connectivity of the network at any given time. The statistics update automatically in response to user interactions, enhancing the interactivity and usefulness of the visualization.</p>"},{"location":"vis/node-enricher/","title":"Vis.js Node Enricher Example","text":""},{"location":"vis/node-enricher/#prompt","title":"Prompt","text":"<pre><code>I have a JSON file that represents the nodes and edges in a network graph. \nI would like you to generate a Python program that reads in this JSON file\nand returns it with one addition.\nIf the node has a group of 1, I want you to add another property \"x\": -300. \nAll other elements in the JSON file should remain unchained.\nHere is a sample of the nodes:\n</code></pre> <pre><code>{ \"nodes\": [ \n    { \"id\": 1, \"label\": \"Ohm's Law\", \"group\": 1 },\n    { \"id\": 2, \"label\": \"Voltage\", \"group\": 1 },\n    { \"id\": 3, \"label\": \"Current\", \"group\": 1 },\n    { \"id\": 4, \"label\": \"Resistance\", \"group\": 1 },\n    { \"id\": 5, \"label\": \"Power\", \"group\": 1 },\n    { \"id\": 6, \"label\": \"Energy\", \"group\": 1 } \n]}\n</code></pre> <p>You should return:</p> <pre><code>\"nodes\": [ \n    { \"id\": 1, \"label\": \"Ohm's Law\", \"group\": 1, \"x\": -300 },\n    { \"id\": 2, \"label\": \"Voltage\", \"group\": 1,  \"x\": -300},\n     etc.\n]}\n</code></pre>"},{"location":"vis/node-enricher/#chatgpt-response","title":"ChatGPT Response","text":"<p>Certainly! Below is a Python program that accomplishes your requirements. This script reads a JSON file representing a network graph, adds an <code>\"x\": -300</code> property to each node with <code>\"group\": 1</code>, and writes the modified data back to a new JSON file. All other elements in the JSON remain unchanged.</p>"},{"location":"vis/node-enricher/#step-by-step-explanation","title":"Step-by-Step Explanation","text":"<ol> <li> <p>Import Necessary Modules:</p> </li> <li> <p><code>json</code>: To handle JSON data.</p> </li> <li> <p><code>sys</code>: To handle command-line arguments (optional, for flexibility).</p> </li> <li> <p>Define the Functionality:</p> </li> <li> <p>Reading the JSON File: The script reads the input JSON file containing the network graph.</p> </li> <li>Modifying Nodes: It iterates through each node in the <code>\"nodes\"</code> list. If a node has <code>\"group\": 1</code>, it adds a new property <code>\"x\": -300</code> to that node.</li> <li> <p>Writing the Modified JSON: The script writes the updated JSON data to an output file.</p> </li> <li> <p>Usage:</p> </li> </ol> <p>You can run the script from the command line, specifying the input and output file paths. If no arguments are provided, it defaults to <code>input.json</code> and <code>output.json</code>.</p>"},{"location":"vis/node-enricher/#python-code","title":"Python Code","text":"<pre><code>import json\nimport sys\n\ndef add_x_property(input_file, output_file):\n    try:\n        # Read the input JSON file\n        with open(input_file, 'r', encoding='utf-8') as f:\n            data = json.load(f)\n\n        # Check if 'nodes' key exists\n        if 'nodes' not in data:\n            print(f\"Error: The key 'nodes' was not found in {input_file}.\")\n            return\n\n        # Iterate through each node and add \"x\": -300 if group is 1\n        for node in data['nodes']:\n            if node.get('group') == 1:\n                node['x'] = -300\n\n        # Write the modified data to the output JSON file\n        with open(output_file, 'w', encoding='utf-8') as f:\n            json.dump(data, f, indent=4)\n\n        print(f\"Successfully wrote the modified JSON to {output_file}.\")\n\n    except FileNotFoundError:\n        print(f\"Error: The file {input_file} does not exist.\")\n    except json.JSONDecodeError:\n        print(f\"Error: The file {input_file} is not a valid JSON file.\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\ndef main():\n    # Default input and output file names\n    input_file = 'input.json'\n    output_file = 'output.json'\n\n    # If command-line arguments are provided, use them\n    if len(sys.argv) == 3:\n        input_file = sys.argv[1]\n        output_file = sys.argv[2]\n    elif len(sys.argv) != 1:\n        print(\"Usage: python script.py [input_file output_file]\")\n        return\n\n    add_x_property(input_file, output_file)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"vis/node-enricher/#how-to-use-the-script","title":"How to Use the Script","text":"<ol> <li> <p>Save the Script:</p> </li> <li> <p>Save the above code to a file, for example, <code>modify_graph.py</code>.</p> </li> <li> <p>Prepare Your JSON File:</p> <ul> <li> <p>Ensure your JSON file (e.g., <code>input.json</code>) is properly formatted. Here's an example based on your sample:</p> <pre><code>json\nCopy code\n\n`{\n    \"nodes\": [\n        {\n            \"id\": 1,\n            \"label\": \"Ohm's Law\",\n            \"group\": 1\n        },\n        {\n            \"id\": 2,\n            \"label\": \"Voltage\",\n            \"group\": 1\n        },\n        {\n            \"id\": 3,\n            \"label\": \"Current\",\n            \"group\": 1\n        },\n        {\n            \"id\": 4,\n            \"label\": \"Resistance\",\n            \"group\": 1\n        },\n        {\n            \"id\": 5,\n            \"label\": \"Power\",\n            \"group\": 1\n        },\n        {\n            \"id\": 6,\n            \"label\": \"Energy\",\n            \"group\": 1\n        }\n    ],\n    \"edges\": [\n        // Your edge definitions here\n    ]\n}\n`\n</code></pre> </li> </ul> </li> <li> <p>Run the Script:</p> <ul> <li> <p>Open your terminal or command prompt.</p> </li> <li> <p>Navigate to the directory containing <code>modify_graph.py</code> and your <code>input.json</code>.</p> </li> <li> <p>Execute the script using Python. You can specify input and output files or use the defaults.</p> <p>Using Default File Names (<code>input.json</code> and <code>output.json</code>):</p> <pre><code>bash\nCopy code\n\n`python modify_graph.py\n`\n</code></pre> <p>Specifying Input and Output Files:</p> <pre><code>bash\nCopy code\n\n`python modify_graph.py your_input.json your_output.json\n`\n</code></pre> </li> </ul> </li> <li> <p>Check the Output:</p> <ul> <li> <p>After running the script, check the <code>output.json</code> file. Nodes with <code>\"group\": 1</code> will have an additional property <code>\"x\": -300</code>.</p> </li> <li> <p>Example Output:</p> <pre><code>json\nCopy code\n\n`{\n    \"nodes\": [\n        {\n            \"id\": 1,\n            \"label\": \"Ohm's Law\",\n            \"group\": 1,\n            \"x\": -300\n        },\n        {\n            \"id\": 2,\n            \"label\": \"Voltage\",\n            \"group\": 1,\n            \"x\": -300\n        },\n        {\n            \"id\": 3,\n            \"label\": \"Current\",\n            \"group\": 1,\n            \"x\": -300\n        },\n        {\n            \"id\": 4,\n            \"label\": \"Resistance\",\n            \"group\": 1,\n            \"x\": -300\n        },\n        {\n            \"id\": 5,\n            \"label\": \"Power\",\n            \"group\": 1,\n            \"x\": -300\n        },\n        {\n            \"id\": 6,\n            \"label\": \"Energy\",\n            \"group\": 1,\n            \"x\": -300\n        }\n    ],\n    \"edges\": [\n        // Your edge definitions here\n    ]\n}\n`\n</code></pre> </li> </ul> </li> </ol>"},{"location":"vis/node-enricher/#notes","title":"Notes","text":"<ul> <li>Error Handling: The script includes basic error handling for missing files and invalid JSON formats.</li> <li>Flexibility: You can specify different input and output files via command-line arguments.</li> <li>Extensibility: You can easily modify the script to add more properties or handle different conditions as needed.</li> </ul> <p>Feel free to customize the script further based on your specific requirements!</p> <p>o1-mini</p> <p>window.__oai_logHTML?window.__oai_logHTML():window.__oai_SSR_HTML=window.__oai_SSR_HTML||Date.now();requestAnimationFrame((function(){window.__oai_logTTI?window.__oai_logTTI():window.__oai_SSR_TTI=window.__oai_SSR_TTI||Date.now()}))</p> <p>ChatGPT can make mistakes. Check imp</p>"}]}